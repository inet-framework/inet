[General]
network = AODVNetwork
num-rngs = 3
**.mobility.rng-0 = 1
**.wlan[*].mac.rng-0 = 2
#abstract-config = true (requires omnet 7)

# radio medium
*.radioMedium.sameTransmissionStartTimeCheck = "ignore"

# channel physical parameters
**.wlan[*].typename = "AckingWirelessInterface"
**.wlan[*].bitrate = 2Mbps
**.wlan[*].mac.headerLength = 23B
**.wlan[*].radio.typename = "GenericRadio"
**.wlan[*].radio.signalAnalogRepresentation = "unitDisk"
**.wlan[*].radio.transmitter.headerLength = 96b
**.wlan[*].radio.transmitter.analogModel.communicationRange = 250m
**.wlan[*].radio.transmitter.analogModel.interferenceRange = 0m
**.wlan[*].radio.transmitter.analogModel.detectionRange = 0m
**.wlan[*].radio.receiver.ignoreInterference = true

# mobility
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m
**.mobility.constraintAreaMinX = 0m
**.mobility.constraintAreaMinY = 0m
**.mobility.constraintAreaMaxX = 600m
**.mobility.constraintAreaMaxY = 600m

# lifecycle
**.hasStatus = true

[Config Static]
sim-time-limit = 50s
description = routing without mobility
*.numHosts = 20
*.host[*].wlan[*].radio.transmitter.analogModel.communicationRange = 250m
*.host[0].app[0].destAddr = "host[1](ipv4)"

# mobility
**.host[*].mobility.typename = "StationaryMobility"

# ping app (host[0] pinged by others)
*.host[0].numApps = 1
*.host[0].app[0].typename = "PingApp"
*.host[0].app[0].startTime = uniform(1s,5s)
*.host[0].app[0].printPing = true

[Config IPv4SlowMobility]
sim-time-limit = 50s
description = two fixed communicating nodes with low speed mobile nodes
extends = Static
# mobility
**.aodv.activeRouteTimeout = 3s
**.host[2..20].mobility.typename = "MassMobility"

**.host[*].mobility.changeInterval = normal(5s, 0.1s)
**.host[*].mobility.angleDelta = normal(0deg, 30deg)
**.host[*].mobility.speed = normal(2mps, 0.01mps)
**.host[1].mobility.initialX = 600m
**.host[1].mobility.initialY = 600m

[Config IPv4ModerateFastMobility]
sim-time-limit = 50s
description = two fixed communicating nodes with moderate speed mobile nodes
extends = IPv4SlowMobility
# mobility
**.aodv.activeRouteTimeout = 2s
**.host[*].mobility.speed = normal(8mps, 0.01mps)

[Config IPv4FastMobility]
sim-time-limit = 50s
description = two fixed communicating nodes with high speed mobile nodes
extends = IPv4SlowMobility
# mobility
**.aodv.activeRouteTimeout = 1s
**.host[*].mobility.speed = normal(15mps, 0.01mps)

[Config Dynamic]
sim-time-limit = 60s
description = one node is shut down and restarted trigger route changes
extends = Static
*.scenarioManager.script = xmldoc("dynamic.xml")

[Config MoreDynamic]
sim-time-limit = 100s
description = some nodes are shut down trigger route changes
extends = Static
*.scenarioManager.script = xmldoc("moreDynamic.xml")

[Config SimpleRREQ]
sim-time-limit = 100s
description = demonstrates a single RREQ-RREP exchange
network = SimpleRREQ
# nic settings
**.wlan[*].radio.transmitter.analogModel.communicationRange = 240m
**.sender.numApps = 1
**.sender.app[0].typename = "PingApp"
**.sender.app[0].startTime = uniform(1s,5s)
**.sender.app[0].printPing = true
**.sender.app[0].destAddr = "receiver(ipv4)"

[Config SimpleRREQ2]
sim-time-limit = 100s
description = demonstrates a single RREQ-RREP exchange with two intermediate nodes
extends = SimpleRREQ
network = SimpleRREQ2

[Config SimpleLifecycle]
sim-time-limit = 100s
description = demonstrates AODV's RERR mechanism when a node shuts down
extends = SimpleRREQ2
*.scenarioManager.script = xmldoc("simpleLifecycle.xml")

[Config ShortestPath]
sim-time-limit = 100s
description = demonstrates that AODV chooses the shorter path
network = ShortestPath
extends = SimpleRREQ
