#
# Copyright (C) 2012 Kyeong Soo (Joseph) Kim. All rights reserved.
#
# This ini file is for a test of UDPVideoStreamCli/SvrWithTrace.
#

[General]
network = inet.examples.multimedia_communications.decodable_frame_rate.testVideo
tkenv-plugin-path = ../../../etc/plugins
cmdenv-status-frequency = 10s  # default is 2s

#debug-on-errors = true
sim-time-limit = 10min
warmup-period = 1min	# depends on 'startTime' of applications
repeat = 1

# results recording
result-dir = results/test
**.scalar-recording = true
**.vector-recording = false

###
### Streaming video client
###
**.host.numVideoApps = 1
**.host.videoApp[*].localPort = 9999
**.host.videoApp[*].serverAddress = "server"
**.host.videoApp[*].serverPort = 3088
**.host.videoApp[*].startTime = uniform(1s, 5s)
**.host.videoApp[*].startupDelay = 50ms
**.host.videoApp[*].fps = 30  # frames per second
**.host.videoApp[*].numTraceFrames = 125  # for 'test_verbose2'
**.host.videoApp[*].gopSize = 16  # for 'test_verbose2'
**.host.videoApp[*].numBFrames = 3  # for 'test_verbose2'
**.host.videoAppType = "UDPVideoStreamCliWithTrace2"
###
### Streaming video server
###
**.server.numVideoSrvs = 1
**.server.videoSrvType = "UDPVideoStreamSvrWithTrace"
**.server.videoSrv[*].serverPort = 3088
**.server.videoSrv[*].fps = 30  # frames per second
**.server.videoSrv[*].appOverhead = 12B  # size of application layer overhead (e.g., RTP header)
**.server.videoSrv[*].maxPayloadSize = 1460B  # maximum size of payload to be carried in RTP packets
**.server.videoSrv[*].traceFile = "../../videoTraces/test_verbose2"
###
### Misc.
###
**.ch.datarate = 1000Gbps
**.ch.delay = 10ms
**.ch.p = 0.2
**.ch.q = 0.1

########################################################################
### TCP parameters
########################################################################
**.tcp.sendQueueClass = "TCPMsgBasedSendQueue"
**.tcp.receiveQueueClass = "TCPMsgBasedRcvQueue"
**.tcp.mss = 1460	# optimal for Ethernet interface whose MTU is 1500 bytes

[Config Bernoulli]
**.ch.p = ${p=0.05, 0.1, 0.15, 0.2}
**.ch.q = ${p}

[Config SGM]
**.ch.p = ${p=	0.05,	0.1,	0.15,	0.2}
**.ch.q = ${q=	0.2,	0.15,	0.1,	0.05 ! p}	// p and q go parallel!