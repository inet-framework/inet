#
# Copyright (C) 2010-2011 Kyeong Soo (Joseph) Kim. All rights reserved.
#
# This ini file provides architecture-specific configurations
# for a hybrid TDM/WDM-PON architectures for the comparison study
# of next-generation optical access (NGOA) architectures.
#
# Note that [General] section, i.e., configurations common to all
# architectures including those of traffic models, is provided by
# "General.ini".
#
# References
# [1] N. K. Shankaranarayanan, Z. Jiang, and P. Mishra, "User-perceived
#     performance of web-browsing and interactive data in HFC cable access
#     networks," Proc. of ICC, June 2001.
#


### [General] section providing configurations common to all network architectures
include General.ini


[Config HybridPonBase]
########################################################################
### Architecture-Specific Settings
########################################################################
network = inet.examples.traffic_engineering.comparison_framework.HybridPon
result-dir = results/HybridPon

########################################################################
### NIC (of ONUs, OLT)
########################################################################

#################################
# Hybird PON settings
#################################
#**.numTransmitters = 2  # number of OLT transmitters (tx)
#**.numReceivers = 1  # number of OLT receivers (rx)
#**.onuTimeout = ${ot=10}ms  # ONU timeout (ot) (default is 1 ms)
**.olt.scheduler.voqSize = 121440000b	# corresponding to 10,000 maximum size (1518 bytes) Ethernet frames; based on RTT(10ms)*BW(10G) (default is 80 Mb)
**.onu.mac.queueSize = 121440000b		# corresponding to 10,000 maximum size (1518 bytes) Ethernet frames; based on RTT(10ms)*BW(10G) (default is 80 Mb)


[Config Default]
extends = HybridPonBase
result-dir = results/HybridPon/Default
*.N = ${N=16,32,64}	# number of ONUs
*.n = ${n=1..10}	# number of hosts per ONU
#*.distribution_rate = ${dr=10}Gbps	# rate of distribution fiber
#*.feeder_rate = ${dr}Gbps	# rate of feeder fiber
**.numTransmitters = ${tx=1..5}  # number of transmitters (tx)
**.numReceivers = ${tx}  # number of receivers (rx)
*.backbone_rate = ${br=100, 1000}Gbps  # rate of backbone link
#*.backbone_delay = ${bd=4.7}ms  # delay in backbone network (total RTT = 10 ms)


[Config Test]
extends = Default
result-dir = results/HybridPon/Test
sim-time-limit = 30min


[Config N16_10h]
extends = HybridPonBase
result-dir = results/HybridPon/N16_10h
sim-time-limit = 10h
*.N = ${N=16}	# number of ONUs
*.n = ${n=1..10}	# number of hosts per ONU
#*.distribution_rate = ${dr=10}Gbps	# rate of distribution fiber
#*.feeder_rate = ${dr}Gbps	# rate of feeder fiber
**.numTransmitters = ${tx=1..5}  # number of transmitters (tx)
**.numReceivers = ${tx}  # number of receivers (rx)
*.backbone_rate = ${br=100, 1000}Gbps  # rate of backbone link
#*.backbone_delay = ${bd=4.7}ms  # delay in backbone network (total RTT = 10 ms)


[Config Debug_N2]
extends = HybridPonBase
result-dir = results/HybridPon/Debug_N2
*.N = ${N=2}	# number of ONUs
*.n = ${n=1}	# number of hosts per ONU
**.numTransmitters = ${tx=2}  # number of transmitters (tx)
**.numReceivers = ${tx}  # number of receivers (rx)
*.backbone_rate = ${br=100}Gbps  # rate of backbone link
sim-time-limit = 5min


[Config Debug_N2_video]
extends = Debug_N2
**.host[*].numHttpApps = 0
**.host[*].numFtpApps = 0
sim-time-limit = 10min
warmup-period = 2min


[Config Debug_N16]
extends = N16_10h
result-dir = results/HybridPon/Debug_N16
sim-time-limit = 5min
warmup-period = 0min


[Config N32_10h]
extends = HybridPonBase
result-dir = results/HybridPon/N32_10h
sim-time-limit = 10h
*.N = ${N=32}	# number of ONUs
*.n = ${n=1..10}	# number of hosts per ONU
#*.distribution_rate = ${dr=10}Gbps	# rate of distribution fiber
#*.feeder_rate = ${dr}Gbps	# rate of feeder fiber
**.numTransmitters = ${tx=1..5}  # number of transmitters (tx)
**.numReceivers = ${tx}  # number of receivers (rx)
*.backbone_rate = ${br=100, 1000}Gbps  # rate of backbone link
#*.backbone_delay = ${bd=4.7}ms  # delay in backbone network (total RTT = 10 ms)
