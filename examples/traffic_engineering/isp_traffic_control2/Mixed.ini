#
# Copyright (C) 2013 Kyeong Soo (Joseph) Kim. All rights reserved.
#
# This ini file provides architecture-specific configurations for an
# abstract model of shared access architectures -- like TDM-PONs or
# DOCSIS cable Internet access -- for the comparison study of
# next-generation network (NGN) access architectures.
#
# Note that [General] section, i.e., configurations common to all
# architectures including those of traffic models, is provided by
# "General.ini".
#


[General]
### [General] section providing configurations common to all network architectures
include General.ini


######################################################################################
### Architecture-Specific Settings (with 100-Mbps access line rate and 16 subscribers)
######################################################################################
[Config Base]
### General
result-dir = results/mixed
sim-time-limit = 240.5s	# 60s per each sub-period (of total 4); 0.5s added to handle the last 1-s period for throghput averaging
warmup-period = 0s
repeat = 10
**.performanceMeter.startTime = 0s
**.performanceMeter.measurementInterval = 1s		# throughput measurement interval (default is 1s)
**.performanceMeter.bitThruput.result-recording-modes = +vector
**.performanceMeter.packetDelay.result-recording-modes = default
**.performanceMeter.packetThruput.result-recording-modes = default
#**.performanceMeter.bitThruput.vector-recording = true
**.performanceMeter.*.vector-recording = true
**.olt.mac[0].queue.*.vector-recording = false	# for debugging of DRR/CSFQ algorithms
### Network configuraion
*.uni_rate = ${ur=100}Mbps			# rate of UNI
*.distribution_rate = ${dr=100}Mbps	# rate of distribution fiber
*.backbone_rate = ${br=10000}Mbps		# rate of backbone link (10 Gbps)
*.N = ${N=16}
**.olt.numSubscribers = ${N}
**.olt.mac[0].queue.numFlows = ${N}
**.olt.mac[0].queue.vids = "10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25"
### Server
**.server.numFtpSrvs = 1
**.server.numUdpApps = 12
**.server.udpApp[*].lineRate = ${br}Mbps	# backbone rate
**.server.udpApp[*].messageLength = 950B	# resulting in 1000-byte Ethernet frame (i.e., UDP(8)+IP(20)+Ethernet(22))
#**.server.udpApp[*].messagePeriod = exponential(1s)
#**.server.udpApp[*].startTime = uniform(0s, 1s)
### TBM
**.olt.mac[0].meter[*].bucketSize = ${bs=1}*1000000B	# 1 MB
**.olt.mac[0].meter[*].peakRate = ${br}Mbps		# It should be set to the backbone rate, not the distribution rate,
												# because we now use metering, not shaping.
### TCP
**.tcp.windowScalingSupport = true	# enable window scaling support to provide throughput greater than 6Mbps
**.tcp.advertisedWindow = 65535*100
**.tcp.sackSupport = true
### Flows
# Group 1: UDP (CBR) with SR=16Mbps & TGR=2.5Mbps
**.server.udpApp[0].destAddresses = "host[0]"
**.server.udpApp[1].destAddresses = "host[1]"
**.server.udpApp[2].destAddresses = "host[2]"
**.server.udpApp[3].destAddresses = "host[3]"
**.server.udpApp[0..3].startTime = 0.0s
**.server.udpApp[0..3].messagePeriod = 0.5ms
**.olt.mac[0].meter[0..3].meanRate = 2.5Mbps
## Group 2: UDP (CBR) with SR=16Mbps & TGR=5Mbps
**.server.udpApp[4].destAddresses = "host[4]"
**.server.udpApp[5].destAddresses = "host[5]"
**.server.udpApp[6].destAddresses = "host[6]"
**.server.udpApp[7].destAddresses = "host[7]"
**.server.udpApp[4..7].startTime = 60.0s
**.server.udpApp[4..7].messagePeriod = 0.5ms
**.olt.mac[0].meter[4..7].meanRate = 5Mbps
## Group 3: UDP (CBR) with SR=16Mbps & TGR=7.5Mbps
**.server.udpApp[8].destAddresses = "host[8]"
**.server.udpApp[9].destAddresses = "host[9]"
**.server.udpApp[10].destAddresses = "host[10]"
**.server.udpApp[11].destAddresses = "host[11]"
**.server.udpApp[8..11].startTime = 120.0s
**.server.udpApp[8..11].messagePeriod = 0.5ms
**.olt.mac[0].meter[8..11].meanRate = 7.5Mbps
## Group 4: Greedy TCP with TGR=10Mbps
**.host[12..15].numFtpApps = 1
**.host[12..15].numUdpApps = 0
**.host[12..15].ftpApp[*].fileSize = 1GiB	# to emulate greedy source
**.host[12..15].ftpApp[*].startTime = 180.0s
**.olt.mac[0].meter[12..15].meanRate = 10Mbps

[Config drr]
extends = Base
**.olt.mac[0].queueType = "DRRVLANQueue"	# OLT downstream queue
#**.olt.mac[0].queue.fifoSize = 16000000B	# 16 MB
**.olt.mac[0].queue.fifoSize = ${qs=1000000}B	# 1 MB
**.olt.mac[0].queue.voqSize = ${qs}B
**.olt.mac[0].queue.quanta = "1522 1522 1522 1522 3044 3044 3044 3044 4566 4566 4566 4566 6088 6088 6088 6088"
#**.olt.mac[0].queue.quanta = "250 250 250 250 500 500 500 500 750 750 750 750 1000 1000 1000 1000"
#**.olt.mac[0].queue.quanta = "100 100 100 100 200 200 200 200 300 300 300 300 400 400 400 400"

[Config csfq]
extends = Base
**.olt.mac[0].queueType = "CSFQVLANQueue"	# OLT downstream queue
**.olt.mac[0].queue.queueSize = ${qs=($N)*1000000}*1B	# FIFO queue size - 16MB

[Config csfq5]
extends = Base
**.olt.mac[0].queueType = "CSFQVLANQueue5"	# OLT downstream queue
**.olt.mac[0].queue.queueSize = ${qs=($N)*1000000}*1B	# FIFO queue size - 16MB
**.olt.mac[0].queue.queueThreshold = 64000B	# 64KB
**.olt.mac[0].queue.K_scale = ${Ks=1.0}
**.olt.mac[0].queue.max_alpha = -1 # turn off fair share rate decrease based on buffer overflow

[Config drr2]
extends = Base
**.olt.mac[0].queueType = "DRRVLANQueue2"	# OLT downstream queue
**.olt.mac[0].queue.voqSize = ${vqs=($bs)}*1000000B	# in MB
**.olt.mac[0].queue.quanta = "1522 1522 1522 1522 3044 3044 3044 3044 4566 4566 4566 4566 6088 6088 6088 6088"
#**.olt.mac[0].queue.quanta = "250 250 250 250 500 500 500 500 750 750 750 750 1000 1000 1000 1000"
#**.olt.mac[0].queue.quanta = "100 100 100 100 200 200 200 200 300 300 300 300 400 400 400 400"

[Config tbf2]
## original TBF (with meter)
extends = Base
**.olt.mac[0].queueType = "DropTailRRVLANTBFQueue2"	# OLT downstream queue
**.olt.mac[0].queue.voqSize = ${vqs=($bs)}*1000000B	# in MB; should be larger than the bucket size


#####################################################################################
### Architecture-Specific Settings (with 1-Gbps access line rate and 160 subscribers)
#####################################################################################
[Config Base_dr1G_N160]
### General
result-dir = results/mixed
sim-time-limit = 240.5s	# 60s per each sub-period (of total 4); 0.5s added to handle the last 1-s period for throghput averaging
warmup-period = 0s
repeat = 10
**.performanceMeter.startTime = 0s
**.performanceMeter.measurementInterval = 1s		# throughput measurement interval (default is 1s)
**.performanceMeter.bitThruput.result-recording-modes = +vector
**.performanceMeter.packetDelay.result-recording-modes = default
**.performanceMeter.packetThruput.result-recording-modes = default
#**.performanceMeter.bitThruput.vector-recording = true
**.performanceMeter.*.vector-recording = true
**.olt.mac[0].queue.*.vector-recording = false	# for debugging of DRR/CSFQ algorithms
### Network configuraion
*.uni_rate = ${ur=100}Mbps				# rate of UNI
*.distribution_rate = ${dr=1000}Mbps	# rate of distribution fiber
*.backbone_rate = ${br=10000}Mbps		# rate of backbone link (10 Gbps)
*.N = ${N=160}
**.olt.numSubscribers = ${N}
**.olt.mac[0].queue.numFlows = ${N}
**.olt.mac[0].queue.vids = "10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169"
### Server
**.server.numFtpSrvs = 1
**.server.numUdpApps = 120
**.server.udpApp[*].lineRate = ${br}Mbps	# backbone rate
**.server.udpApp[*].messageLength = 950B	# resulting in 1000-byte Ethernet frame (i.e., UDP(8)+IP(20)+Ethernet(22))
### TBM
**.olt.mac[0].meter[*].bucketSize = ${bs=1}*1000000B	# 1 MB
**.olt.mac[0].meter[*].peakRate = ${br}Mbps		# It should be set to the backbone rate, not the distribution rate,
												# because we now use metering, not shaping.
### TCP
**.tcp.windowScalingSupport = true	# enable window scaling support to provide throughput greater than 6Mbps
**.tcp.advertisedWindow = 65535*100
**.tcp.sackSupport = true
### Flows
# Group 1: UDP (CBR) with SR=16Mbps & TGR=2.5Mbps
**.server.udpApp[0].destAddresses = "host[0]"
**.server.udpApp[1].destAddresses = "host[1]"
**.server.udpApp[2].destAddresses = "host[2]"
**.server.udpApp[3].destAddresses = "host[3]"
**.server.udpApp[4].destAddresses = "host[4]"
**.server.udpApp[5].destAddresses = "host[5]"
**.server.udpApp[6].destAddresses = "host[6]"
**.server.udpApp[7].destAddresses = "host[7]"
**.server.udpApp[8].destAddresses = "host[8]"
**.server.udpApp[9].destAddresses = "host[9]"
**.server.udpApp[10].destAddresses = "host[10]"
**.server.udpApp[11].destAddresses = "host[11]"
**.server.udpApp[12].destAddresses = "host[12]"
**.server.udpApp[13].destAddresses = "host[13]"
**.server.udpApp[14].destAddresses = "host[14]"
**.server.udpApp[15].destAddresses = "host[15]"
**.server.udpApp[16].destAddresses = "host[16]"
**.server.udpApp[17].destAddresses = "host[17]"
**.server.udpApp[18].destAddresses = "host[18]"
**.server.udpApp[19].destAddresses = "host[19]"
**.server.udpApp[20].destAddresses = "host[20]"
**.server.udpApp[21].destAddresses = "host[21]"
**.server.udpApp[22].destAddresses = "host[22]"
**.server.udpApp[23].destAddresses = "host[23]"
**.server.udpApp[24].destAddresses = "host[24]"
**.server.udpApp[25].destAddresses = "host[25]"
**.server.udpApp[26].destAddresses = "host[26]"
**.server.udpApp[27].destAddresses = "host[27]"
**.server.udpApp[28].destAddresses = "host[28]"
**.server.udpApp[29].destAddresses = "host[29]"
**.server.udpApp[30].destAddresses = "host[30]"
**.server.udpApp[31].destAddresses = "host[31]"
**.server.udpApp[32].destAddresses = "host[32]"
**.server.udpApp[33].destAddresses = "host[33]"
**.server.udpApp[34].destAddresses = "host[34]"
**.server.udpApp[35].destAddresses = "host[35]"
**.server.udpApp[36].destAddresses = "host[36]"
**.server.udpApp[37].destAddresses = "host[37]"
**.server.udpApp[38].destAddresses = "host[38]"
**.server.udpApp[39].destAddresses = "host[39]"
#**.server.udpApp[0..39].startTime = 0.0s + uniform(0s, 10ms)
**.server.udpApp[0..39].startTime = 0.0s + uniform(0s, 100ms)
**.server.udpApp[0..39].messagePeriod = 0.5ms
**.olt.mac[0].meter[0..39].meanRate = 2.5Mbps
## Group 2: UDP (CBR) with SR=16Mbps & TGR=5Mbps
**.server.udpApp[40].destAddresses = "host[40]"
**.server.udpApp[41].destAddresses = "host[41]"
**.server.udpApp[42].destAddresses = "host[42]"
**.server.udpApp[43].destAddresses = "host[43]"
**.server.udpApp[44].destAddresses = "host[44]"
**.server.udpApp[45].destAddresses = "host[45]"
**.server.udpApp[46].destAddresses = "host[46]"
**.server.udpApp[47].destAddresses = "host[47]"
**.server.udpApp[48].destAddresses = "host[48]"
**.server.udpApp[49].destAddresses = "host[49]"
**.server.udpApp[50].destAddresses = "host[50]"
**.server.udpApp[51].destAddresses = "host[51]"
**.server.udpApp[52].destAddresses = "host[52]"
**.server.udpApp[53].destAddresses = "host[53]"
**.server.udpApp[54].destAddresses = "host[54]"
**.server.udpApp[55].destAddresses = "host[55]"
**.server.udpApp[56].destAddresses = "host[56]"
**.server.udpApp[57].destAddresses = "host[57]"
**.server.udpApp[58].destAddresses = "host[58]"
**.server.udpApp[59].destAddresses = "host[59]"
**.server.udpApp[60].destAddresses = "host[60]"
**.server.udpApp[61].destAddresses = "host[61]"
**.server.udpApp[62].destAddresses = "host[62]"
**.server.udpApp[63].destAddresses = "host[63]"
**.server.udpApp[64].destAddresses = "host[64]"
**.server.udpApp[65].destAddresses = "host[65]"
**.server.udpApp[66].destAddresses = "host[66]"
**.server.udpApp[67].destAddresses = "host[67]"
**.server.udpApp[68].destAddresses = "host[68]"
**.server.udpApp[69].destAddresses = "host[69]"
**.server.udpApp[70].destAddresses = "host[70]"
**.server.udpApp[71].destAddresses = "host[71]"
**.server.udpApp[72].destAddresses = "host[72]"
**.server.udpApp[73].destAddresses = "host[73]"
**.server.udpApp[74].destAddresses = "host[74]"
**.server.udpApp[75].destAddresses = "host[75]"
**.server.udpApp[76].destAddresses = "host[76]"
**.server.udpApp[77].destAddresses = "host[77]"
**.server.udpApp[78].destAddresses = "host[78]"
**.server.udpApp[79].destAddresses = "host[79]"
#**.server.udpApp[40..79].startTime = 20.0s + uniform(0s, 10ms)
**.server.udpApp[40..79].startTime = 60.0s + uniform(0s, 100ms)
**.server.udpApp[40..79].messagePeriod = 0.5ms
**.olt.mac[0].meter[40..79].meanRate = 5Mbps
## Group 3: UDP (CBR) with SR=16Mbps & TGR=7.5Mbps
**.server.udpApp[80].destAddresses = "host[80]"
**.server.udpApp[81].destAddresses = "host[81]"
**.server.udpApp[82].destAddresses = "host[82]"
**.server.udpApp[83].destAddresses = "host[83]"
**.server.udpApp[84].destAddresses = "host[84]"
**.server.udpApp[85].destAddresses = "host[85]"
**.server.udpApp[86].destAddresses = "host[86]"
**.server.udpApp[87].destAddresses = "host[87]"
**.server.udpApp[88].destAddresses = "host[88]"
**.server.udpApp[89].destAddresses = "host[89]"
**.server.udpApp[90].destAddresses = "host[90]"
**.server.udpApp[91].destAddresses = "host[91]"
**.server.udpApp[92].destAddresses = "host[92]"
**.server.udpApp[93].destAddresses = "host[93]"
**.server.udpApp[94].destAddresses = "host[94]"
**.server.udpApp[95].destAddresses = "host[95]"
**.server.udpApp[96].destAddresses = "host[96]"
**.server.udpApp[97].destAddresses = "host[97]"
**.server.udpApp[98].destAddresses = "host[98]"
**.server.udpApp[99].destAddresses = "host[99]"
**.server.udpApp[100].destAddresses = "host[100]"
**.server.udpApp[101].destAddresses = "host[101]"
**.server.udpApp[102].destAddresses = "host[102]"
**.server.udpApp[103].destAddresses = "host[103]"
**.server.udpApp[104].destAddresses = "host[104]"
**.server.udpApp[105].destAddresses = "host[105]"
**.server.udpApp[106].destAddresses = "host[106]"
**.server.udpApp[107].destAddresses = "host[107]"
**.server.udpApp[108].destAddresses = "host[108]"
**.server.udpApp[109].destAddresses = "host[109]"
**.server.udpApp[110].destAddresses = "host[110]"
**.server.udpApp[111].destAddresses = "host[111]"
**.server.udpApp[112].destAddresses = "host[112]"
**.server.udpApp[113].destAddresses = "host[113]"
**.server.udpApp[114].destAddresses = "host[114]"
**.server.udpApp[115].destAddresses = "host[115]"
**.server.udpApp[116].destAddresses = "host[116]"
**.server.udpApp[117].destAddresses = "host[117]"
**.server.udpApp[118].destAddresses = "host[118]"
**.server.udpApp[119].destAddresses = "host[119]"
#**.server.udpApp[80..119].startTime = 40.0s + uniform(0s, 10ms)
**.server.udpApp[80..119].startTime = 120.0s + uniform(0s, 100ms)
**.server.udpApp[80..119].messagePeriod = 0.5ms
**.olt.mac[0].meter[80..119].meanRate = 7.5Mbps
## Group 4: Greedy TCP with TGR=10Mbps
**.host[120..159].numFtpApps = 1
**.host[120..159].numUdpApps = 0
**.host[120..159].ftpApp[*].fileSize=1GiB	# to emulate greedy source
#**.host[120..159].ftpApp[*].startTime = 60.0s + uniform(0s, 10ms)
**.host[120..159].ftpApp[*].startTime = 180.0s + uniform(0s, 100ms)
**.olt.mac[0].meter[120..159].meanRate = 10Mbps

[Config drr_dr1G_N160]
extends = Base_dr1G_N160
**.olt.mac[0].queueType = "DRRVLANQueue"	# OLT downstream queue
**.olt.mac[0].queue.fifoSize = ${qs=1000000}B	# 1MB
**.olt.mac[0].queue.voqSize = ${qs}B
**.olt.mac[0].queue.quanta = "1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088"
#**.olt.mac[0].queue.quanta = "250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000"

[Config csfq_dr1G_N160]
extends = Base_dr1G_N160
**.olt.mac[0].queueType = "CSFQVLANQueue"	# OLT downstream queue
**.olt.mac[0].queue.queueSize = ${qs=($N)*1000000}*1B	# FIFO queue size - 160MB
#**.olt.mac[0].queue.linkRate = ${dr}Mbps	# transmission rate of output link (i.e., feeder line rate (R_F))

[Config csfq5_dr1G_N160]
extends = Base_dr1G_N160
**.olt.mac[0].queueType = "CSFQVLANQueue5"	# OLT downstream queue
**.olt.mac[0].queue.queueSize = ${qs=($N)*1000000}*1B	# FIFO queue size - 160MB
#**.olt.mac[0].queue.linkRate = ${dr}Mbps	# transmission rate of output link (i.e., feeder line rate (R_F))
#**.olt.mac[0].queue.queueThreshold = 64000B	# 64KB
**.olt.mac[0].queue.queueThreshold = ${qt=64, 640, 6400, 64000}*1000B
**.olt.mac[0].queue.K_scale = ${Ks=1.0}
**.olt.mac[0].queue.max_alpha = -1 # turn off fair share rate decrease based on buffer overflow

[Config drr2_dr1G_N160]
extends = Base_dr1G_N160
**.olt.mac[0].queueType = "DRRVLANQueue2"	# OLT downstream queue
**.olt.mac[0].queue.voqSize = ${vqs=($bs)}*1000000B # in MB
**.olt.mac[0].queue.quanta = "1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 1522 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 3044 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 4566 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088 6088"
#**.olt.mac[0].queue.quanta = "250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000"

[Config tbf2_dr1G_N160]
## original TBF (with meter)
extends = Base_dr1G_N160
**.olt.mac[0].queueType = "DropTailRRVLANTBFQueue2"	# OLT downstream queue
**.olt.mac[0].queue.voqSize = ${vqs=($bs)}*1000000B	# in MB; should be larger than the bucket size
