#
# Copyright (C) 2014 Kyeong Soo (Joseph) Kim. All rights reserved.
#
# This ini file provides architecture-specific configurations for an
# abstract model of shared access architectures -- like TDM-PONs or
# DOCSIS cable Internet access -- for the comparison study of
# next-generation network (NGN) access architectures.
#
# Note that [General] section, i.e., configurations common to all
# architectures including those of traffic models, is provided by
# "General.ini".
#


[General]
### [General] section providing configurations common to all network architectures
include General.ini


######################################################################################
### Architecture-Specific Settings (with 100-Mbps access line rate and 2 subscribers)
######################################################################################
[Config Base]
### General
result-dir = results/onoff
#sim-time-limit = 240.5s	# 60s per each sub-period (of total 4); 0.5s added to handle the last 1-s period for throghput averaging
sim-time-limit = 20s	# for testing
warmup-period = 0s
#repeat = 10
repeat = 1	# for testing
**.performanceMeter.startTime = 0s
**.performanceMeter.measurementInterval = 10ms		# throughput measurement interval (default is 1s)
**.performanceMeter.*.result-recording-modes = all
**.performanceMeter.*.vector-recording = true
**.olt.mac[0].queue.*.vector-recording = false	# for debugging of DRR/CSFQ algorithms
### Network configuraion
*.uni_rate = ${ur=100}Mbps			# rate of UNI
*.distribution_rate = ${dr=100}Mbps	# rate of distribution fiber
*.backbone_rate = ${br=${dr}}Mbps		# rate of backbone link
#*.backbone_rate = ${br=10000}Mbps		# rate of backbone link
*.N = ${N=2}
**.olt.numSubscribers = ${N}
**.olt.mac[0].queue.numFlows = ${N}
**.olt.mac[0].queue.vids = "10 11"
### Server
**.server.numFtpSrvs = 0
**.server.numUdpApps = 2
**.server.udpApp[*].lineRate = ${br}Mbps	# backbone rate
# **.server.udpApp[*].messageLength = 950B	# resulting in 1000-byte Ethernet frame (i.e., UDP(8)+IP(20)+Ethernet(22))
#**.server.udpApp[*].messagePeriod = exponential(1s)
#**.server.udpApp[*].startTime = uniform(0s, 1s)
### TBM
**.olt.mac[0].meter[*].meanRate = ${mr=10}Mbps
**.olt.mac[0].meter[*].bucketSize = ${bs=10}*1000000B	# 10 MB
**.olt.mac[0].meter[*].peakRate = ${pr=${br}}Mbps		# It should be set to the backbone rate, not the distribution rate,
												# because we now use metering, not shaping.
### Flows
# Conformant Subscriber: UDP (periodic ON-OFF source) with SR of ~2 kbps to ~18 Mbps
**.server.udpApp[0].destAddresses = "host[0]"
**.server.udpApp[0].startTime = 1s
**.server.udpApp[0].messageLength = ${ml=1..9}*1000000B	# in MB
**.server.udpApp[0].messagePeriod = 4s	# TODO: update
# Non-Conformant Subscriber: UDP (CBR, no back-to-back packets) with SR of 80 Mbps
**.server.udpApp[1].destAddresses = "host[1]"
**.server.udpApp[1].startTime = 0s
**.server.udpApp[1].messageLength = 950B	# resulting in 1000-byte Ethernet frame (i.e., UDP(8)+IP(20)+Ethernet(22))
**.server.udpApp[1].messagePeriod = 0.1ms

[Config tbf]
## original TBF
extends = Base
**.olt.mac[0].queueType = "DropTailVLANTBFQueue"	# OLT downstream queue
**.olt.mac[0].queue.numQueues = ${N}
**.olt.mac[0].queue.mtu = 1522B
**.olt.mac[0].queue.meanRate = ${mr}Mbps
**.olt.mac[0].queue.bucketSize = ${bs}*1000000B
**.olt.mac[0].queue.peakRate = ${pr}Mbps

[Config drr]
## conceptual scheme based on the original DDR and PQ
extends = Base
**.olt.mac[0].queueType = "DRRVLANQueue"	# OLT downstream queue
**.olt.mac[0].queue.fifoSize = ${qs=($bs)}*1000000B
**.olt.mac[0].queue.voqSize = ${qs}*1000000B
#**.olt.mac[0].queue.quanta = "1522 1522 1522 1522 3044 3044 3044 3044 4566 4566 4566 4566 6088 6088 6088 6088"
**.olt.mac[0].queue.quanta = "250 250"

[Config drr2]
## practical scheme based on the modified DRR
extends = Base
**.olt.mac[0].queueType = "DRRVLANQueue2"	# OLT downstream queue
**.olt.mac[0].queue.voqSize = ${qs=($bs)}*1000000B	# in MB
**.olt.mac[0].queue.quanta = "1522 1522"

[Config csfq]
extends = Base
**.olt.mac[0].queueType = "CSFQVLANQueue"	# OLT downstream queue
**.olt.mac[0].queue.queueSize = ${qs=($N)*($bs)}*1000000B	# FIFO queue size in MB

[Config csfq5]
extends = Base
**.olt.mac[0].queueType = "CSFQVLANQueue5"	# OLT downstream queue
**.olt.mac[0].queue.queueSize = ${qs=($N)*($bs)}*1000000B	# FIFO queue size in MB
**.olt.mac[0].queue.queueThreshold = 64000B	# 64KB
#**.olt.mac[0].queue.queueThreshold = int(0.25*{$qs})*1B	# quarter of queue size
#**.olt.mac[0].queue.thresholdScaleFactor = 0.2
**.olt.mac[0].queue.max_alpha = -1 # turn off fair share rate decrease based on buffer overflow
#**.olt.mac[0].queue.max_beta = -1  # turn off fair share rate decrease based on queue size & queue threshold
