[Config default_tcp]
description = "default_TCP <---> default_TCP"

[Config inet__inet]
description = "inet_TCP <---> inet_TCP"
# default TCP implementation
**.tcp.typename = "Tcp"

[Config inet__inet_msg]
description = "inet_TCP <---> inet_TCP"
# default TCP implementation
**.tcp.typename = "Tcp"
**.app[*].dataTransferMode = "object" # bytecount | object | bytestream

[Config inet__inet_stream]
description = "inet_TCP <---> inet_TCP"
# default TCP implementation
**.tcp.typename = "Tcp"
**.app[*].dataTransferMode = "bytestream" # bytecount | object | bytestream

[Config NSClinux__NSClinux]
description = "NSC_TCP (Linux) <---> NSC_TCP (Linux)"
# setting TCP stack implementation
**.tcp.typename = "TcpNsc"

[Config NSClinux__NSClinux_stream]
description = "NSC_TCP (Linux) <---> NSC_TCP (Linux)"
# setting TCP stack implementation
**.tcp.typename = "TcpNsc"
**.app[*].dataTransferMode = "bytestream" # bytecount | object | bytestream

[Config NSClinux__NSCfreebsd]
description = "NSC_TCP (Linux) <---> NSC_TCP (FreeBSD)"
# setting TCP stack implementation
**.tcp.typename = "TcpNsc"
**.client*.tcp.stackName = "libfreebsd5.3.so"

[Config NSCfreebsd__NSCfreebsd]
description = "NSC_TCP (FreeBSD) <---> NSC_TCP (FreeBSD)"
# setting TCP stack implementation
**.tcp.typename = "TcpNsc"
**.tcp.stackName = "libfreebsd5.3.so"

[Config NSClwip__inet]
description = "NSC_TCP (lwIP) <---> inet_TCP"
# setting TCP stack implementation
**.server*.tcp.typename = "TcpNsc"
**.server*.tcp.stackName = "liblwip.so"
**.client*.tcp.typename = "Tcp"

[Config inet__NSClinux]
description = "inet_TCP <---> NSC_TCP (linux)"
# setting TCP stack implementation
**.server*.tcp.typename = "Tcp"
**.client*.tcp.typename = "TcpNsc"

[Config lwip__lwip]
description = "TcpLwip <---> TcpLwip"
# setting TCP stack implementation
**.tcp.typename = "TcpLwip"

[Config lwip__inet]
description = "TcpLwip <---> inet_TCP"
# setting TCP stack implementation
**.server*.tcp.typename = "TcpLwip"
**.client*.tcp.typename = "Tcp"

[Config lwip__lwip__msg]
description = "TcpLwip <---> TcpLwip"
# setting TCP stack implementation
**.tcp.typename = "TcpLwip"
#**.tcp.sendQueueClass = "TcpLwipMsgBasedSendQueue"
#**.tcp.receiveQueueClass = "TcpLwipMsgBasedReceiveQueue"
**.app[*].dataTransferMode = "object" # bytecount | object | bytestream

[Config lwip__lwip__stream]
description = "TcpLwip <---> TcpLwip"
# setting TCP stack implementation
**.tcp.typename = "TcpLwip"
#**.tcp.sendQueueClass = "TcpLwipMsgBasedSendQueue"
#**.tcp.receiveQueueClass = "TcpLwipMsgBasedReceiveQueue"
**.app[*].dataTransferMode = "bytestream" # bytecount | object | bytestream

[Config inet__lwip]
description = "inet_TCP <---> TcpLwip"
# setting TCP stack implementation
**.server*.tcp.typename = "Tcp"
**.client*.tcp.typename = "TcpLwip"

[Config inet-reno]
description = "TCP <---> TCP with reno algorithm"
*.server*.tcp.typename = "Tcp"
*.client*.tcp.typename = "Tcp"
**.tcp.tcpAlgorithmClass = "TcpReno"
*.per = 0.01 * ${0, 0.1, 0.2, 0.5, 1, 2, 5}
*.server*.app[0].echoFactor = 0

[Config inet-newreno]
description = "TCP <---> TCP with NewReno algorithm"
*.server*.tcp.typename = "Tcp"
*.client*.tcp.typename = "Tcp"
**.tcp.tcpAlgorithmClass = "TcpNewReno"
*.per = 0.01 * ${0, 0.1, 0.2, 0.5, 1, 2, 5}
*.server*.app[0].echoFactor = 0

[Config inet-tahoe]
description = "TCP <---> TCP with Tahoe algorithm"
*.server*.tcp.typename = "Tcp"
*.client*.tcp.typename = "Tcp"
**.tcp.tcpAlgorithmClass = "TcpReno"
*.per = 0.01 * ${0, 0.1, 0.2, 0.5, 1, 2, 5}
*.server*.app[0].echoFactor = 0

[Config inet-vegas]
description = "TCP <---> TCP with Vegas algorithm"
*.server*.tcp.typename = "Tcp"
*.client*.tcp.typename = "Tcp"
**.tcp.tcpAlgorithmClass = "TcpVegas"
*.per = 0.01 * ${0, 0.1, 0.2, 0.5, 1, 2, 5}
*.server*.app[0].echoFactor = 0

[Config inet-westwood]
description = "TCP <---> TCP with Westwood algorithm"
*.server*.tcp.typename = "Tcp"
*.client*.tcp.typename = "Tcp"
**.tcp.tcpAlgorithmClass = "TcpWestwood"
*.per = 0.01 * ${0, 0.1, 0.2, 0.5, 1, 2, 5}
*.server*.app[0].echoFactor = 0

[Config inet-dumb]
description = "inet_TCP <---> inet_TCP with DumbTcp algorithm"
*.server*.tcp.typename = "Tcp"
*.client*.tcp.typename = "Tcp"
**.tcp.tcpAlgorithmClass = "DumbTcp"
*.per = 0.01 * ${0, 0.1, 0.2, 0.5, 1, 2, 5}
*.server*.app[0].echoFactor = 0


###################################################################

[General]
network = ClientServer
total-stack = 7MiB
#debug-on-errors = true
#record-eventlog = true
**.server.hasPcapRecorder = true
**.server.pcapRecorder.pcapFile = "results/server.pcap"
**.client1.hasPcapRecorder = true
**.client1.pcapRecorder.pcapFile = "results/client1.pcap"
**.crcMode = "computed"
**.pcapRecorder.pcapNetwork = 204     # Ppp

## tcp apps
**.numApps = 1
**.client*.app[*].typename = "TcpSessionApp"
**.client*.app[0].active = true
#**.client*.app[0].localAddress = "10.0.0.1"
#**.client*.app[0].localAddress = "192.168.1.1"
**.client*.app[0].localPort = -1
**.client*.app[0].connectAddress = "server"
**.client*.app[0].connectPort = 1000
**.client*.app[0].tOpen = 0.2s
**.client*.app[0].tSend = 0.4s
**.client*.app[0].sendBytes = 1000000B
**.client*.app[0].sendScript = ""
**.client*.app[0].tClose = 25s

# tcp apps
#**.numApps = 1
#**.client*.app[*].typename = "TcpBasicClientApp"
#**.client*.app[0].active = true
##**.client*.app[0].localAddress = "10.0.0.1"
##**.client*.app[0].localAddress = "192.168.1.1"
#**.client*.app[0].localPort = -1
#**.client*.app[0].connectAddress = "server"
#**.client*.app[0].connectPort = 1000
#**.client*.app[0].tOpen = 0.2s
#**.client*.app[0].tSend = 0.4s
#**.client*.app[0].sendBytes = 1000000B
#**.client*.app[0].idleInterval = 3s
#**.client*.app[0].thinkTime = 0s


#**.server*.app[*].typename="TcpSinkApp"
**.server*.app[*].typename = "TcpEchoApp"
#**.server*.app[0].localAddress = "10.0.0.2"
#**.server*.app[0].localAddress = "192.168.1.2"
**.server*.app[0].localPort = 1000
**.server*.app[0].echoFactor = 2.0
**.server*.app[0].echoDelay = 0s

# NIC configuration
**.ppp[*].queue.typename = "DropTailQueue" # in routers
**.ppp[*].queue.frameCapacity = 10  # in routers

#*.configurator.networkAddress = "10.0.0.0"
*.configurator.config=xml("<config><interface hosts='*' address='192.168.1.x' netmask='255.255.255.0'/></config>")

