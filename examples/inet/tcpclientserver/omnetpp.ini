[Config default_tcp]
sim-time-limit = 100s
description = "default_TCP <---> default_TCP"
**.server*.app[0].echoFactor = 2.0

[Config inet__inet]
sim-time-limit = 100s
description = "inet_TCP <---> inet_TCP"
# default TCP implementation
**.tcp.typename = "Tcp"
**.server*.app[0].echoFactor = 2.0

[Config inet__inet_msg]
sim-time-limit = 100s
description = "inet_TCP <---> inet_TCP"
# default TCP implementation
**.tcp.typename = "Tcp"
**.app[*].dataTransferMode = "object" # bytecount | object | bytestream
**.server*.app[0].echoFactor = 2.0

[Config inet__inet_stream]
sim-time-limit = 100s
description = "inet_TCP <---> inet_TCP"
# default TCP implementation
**.tcp.typename = "Tcp"
**.app[*].dataTransferMode = "bytestream" # bytecount | object | bytestream
**.server*.app[0].echoFactor = 2.0

[Config lwip__lwip]
sim-time-limit = 100s
description = "TcpLwip <---> TcpLwip"
# setting TCP stack implementation
**.tcp.typename = "TcpLwip"
**.server*.app[0].echoFactor = 2.0

[Config lwip__inet]
sim-time-limit = 100s
description = "TcpLwip <---> inet_TCP"
# setting TCP stack implementation
**.server*.tcp.typename = "TcpLwip"
**.client*.tcp.typename = "Tcp"
**.server*.app[0].echoFactor = 2.0

[Config lwip__lwip__msg]
sim-time-limit = 100s
description = "TcpLwip <---> TcpLwip"
# setting TCP stack implementation
**.tcp.typename = "TcpLwip"
**.app[*].dataTransferMode = "object" # bytecount | object | bytestream
**.server*.app[0].echoFactor = 2.0

[Config lwip__lwip__stream]
sim-time-limit = 100s
description = "TcpLwip <---> TcpLwip"
# setting TCP stack implementation
**.tcp.typename = "TcpLwip"
**.app[*].dataTransferMode = "bytestream" # bytecount | object | bytestream
**.server*.app[0].echoFactor = 2.0

[Config inet__lwip]
sim-time-limit = 100s
description = "inet_TCP <---> TcpLwip"
# setting TCP stack implementation
**.server*.tcp.typename = "Tcp"
**.client*.tcp.typename = "TcpLwip"
**.server*.app[0].echoFactor = 2.0

[Config inet-reno]
sim-time-limit = 500s
description = "TCP <---> TCP with reno algorithm"
*.server*.tcp.typename = "Tcp"
*.client*.tcp.typename = "Tcp"
**.tcp.tcpAlgorithmClass = "TcpReno"
*.per = 0.01 * ${0, 0.1, 0.2, 0.5, 1, 2, 5}
*.server*.app[0].echoFactor = 0

[Config inet-newreno]
sim-time-limit = 500s
description = "TCP <---> TCP with NewReno algorithm"
*.server*.tcp.typename = "Tcp"
*.client*.tcp.typename = "Tcp"
**.tcp.tcpAlgorithmClass = "TcpNewReno"
*.per = 0.01 * ${0, 0.1, 0.2, 0.5, 1, 2, 5}
*.server*.app[0].echoFactor = 0

[Config inet-tahoe]
sim-time-limit = 500s
description = "TCP <---> TCP with Tahoe algorithm"
*.server*.tcp.typename = "Tcp"
*.client*.tcp.typename = "Tcp"
**.tcp.tcpAlgorithmClass = "TcpReno"
*.per = 0.01 * ${0, 0.1, 0.2, 0.5, 1, 2, 5}
*.server*.app[0].echoFactor = 0

[Config inet-vegas]
sim-time-limit = 500s
description = "TCP <---> TCP with Vegas algorithm"
*.server*.tcp.typename = "Tcp"
*.client*.tcp.typename = "Tcp"
**.tcp.tcpAlgorithmClass = "TcpVegas"
*.per = 0.01 * ${0, 0.1, 0.2, 0.5, 1, 2, 5}
*.server*.app[0].echoFactor = 0

[Config inet-westwood]
sim-time-limit = 500s
description = "TCP <---> TCP with Westwood algorithm"
*.server*.tcp.typename = "Tcp"
*.client*.tcp.typename = "Tcp"
**.tcp.tcpAlgorithmClass = "TcpWestwood"
*.per = 0.01 * ${0, 0.1, 0.2, 0.5, 1, 2, 5}
*.server*.app[0].echoFactor = 0

[Config inet-dumb]
sim-time-limit = 500s
description = "inet_TCP <---> inet_TCP with DumbTcp algorithm"
*.server*.tcp.typename = "Tcp"
*.client*.tcp.typename = "Tcp"
**.tcp.tcpAlgorithmClass = "DumbTcp"
*.per = 0.01 * ${0, 0.1, 0.2, 0.5, 1, 2, 5}
*.server*.app[0].echoFactor = 0

[Config inet-nocongestioncontrol]
sim-time-limit = 500s
description = "inet_TCP <---> inet_TCP with TcpNoCongestionControl algorithm"
*.server*.tcp.typename = "Tcp"
*.client*.tcp.typename = "Tcp"
**.tcp.tcpAlgorithmClass = "TcpNoCongestionControl"
*.per = 0.01 * ${0, 0.1, 0.2, 0.5, 1, 2, 5}
*.server*.app[0].echoFactor = 0

###################################################################

[General]
network = ClientServer
total-stack = 7MiB
#abstract-config = true (requires omnet 7)

**.server.numPcapRecorders = 1
**.server.pcapRecorder[0].pcapFile = "results/server.pcap"
**.client1.numPcapRecorders = 1
**.client1.pcapRecorder[0].pcapFile = "results/client1.pcap"
**.checksumMode = "computed"

## tcp apps
**.numApps = 1
**.client*.app[*].typename = "TcpSessionApp"
**.client*.app[0].active = true
**.client*.app[0].localPort = -1
**.client*.app[0].connectAddress = "server"
**.client*.app[0].connectPort = 1000
**.client*.app[0].tOpen = 0.2s
**.client*.app[0].tSend = 0.4s
**.client*.app[0].sendBytes = 1000000B
**.client*.app[0].sendScript = ""
**.client*.app[0].tClose = 25s

**.server*.app[*].typename = "TcpEchoApp"
**.server*.app[0].localPort = 1000
**.server*.app[0].echoDelay = 0s

# NIC configuration
**.ppp[*].queue.typename = "DropTailQueue" # in routers
**.ppp[*].queue.packetCapacity = 10  # in routers

*.configurator.config=xml("<config><interface hosts='*' address='192.168.1.x' netmask='255.255.255.0'/></config>")

