#
# Copyright (C) 2012 Kyeong Soo (Joseph) Kim. All rights reserved.
#
# This ini file provides [General] section -- configurations common
# to all architectures -- for the comparison study of next-generation
# optical access architectures.
#
# It provides configurations for a host with the following hybrid
# traffic models:
# - HTTP:  Behavioural model of a web user (HTTP/1.1-persistent mode transfer)
#		   browsing web pages with several embedded objects (e.g., images,
#		   applets, frames, etc) based on [2].
#		   It uses HttpClientApp and TCPGenericSrvApp.
# - FTP:   FTP model based on the parameters in [2].
#          It uses FtpClientApp and TCPGenericSrvApp as well.
# - Video: Streaming video model based on H.264/AVC trace files from
#          ASU video trace library [3]. It uses UDPVideoStreamCliWithTrace2
#          and UDPVideoStreamSvrWithTrace.
#
# References
# [1] N. K. Shankaranarayanan, Z. Jiang, and P. Mishra, "User-perceived
#     performance of web-browsing and interactive data in HFC cable access
#     networks," Proc. of ICC, June 2001.
# [2] cdma2000 Evaulation Methodology, 3GPP2 C.R1002-B, 3GPP2 Std., Rev. B,
#     Dec. 2009. [Online]. Available:
#     http://www.3gpp2.org/public_html/specs/C.R1002-B%20v1.0_Evaluation_Methodology.pdf
# [3] Video trace library, Arizona State University. [Online]. Available:
#     http://trace.eas.asu.edu/
#


[General]
total-stack = 32MiB
#network = inet.examples.ngoa.traffic_control.Reference	# included as default; to be changed in architecture-specific ini
#debug-on-errors = true
sim-time-limit = 3h
#sim-time-limit = 6h
warmup-period = 20min	# depends on 'startTime' of applications and video trace duration (~10 min. for Terminator 2)
repeat = 10
seed-set = ${repetition}	# for consistent results over different configurations


########################################################################
### Results recording
########################################################################
result-dir = results  # included as default; to be changed in architecture-specific ini
**.scalar-recording = true
**.vector-recording = false
**.olt.ethg$o[*].channel.throughput.result-recording-modes = all	# for throughput measurement
**.httpApp[*].*.result-recording-modes = all
**.ftpApp[*].*.result-recording-modes = all
**.delayMeter.*.result-recording-modes = all
#**.delayMeter.**.vector-recording = true
#**.tcp.**.vector-recording = true

########################################################################
### Command environment
########################################################################
cmdenv-express-mode = true
cmdenv-performance-display = true	# for monitoring
cmdenv-status-frequency = 2min	# default is 2s

########################################################################
### Tk environment
########################################################################
tkenv-plugin-path = ../../../etc/plugins

########################################################################
### Network/system settings
########################################################################
#*.N = 16  # number of ONUs (subscribers)
#*.n = ${n=1}  # number of hosts (users) per ONU (subscriber)
#*.uni_rate = ${ur=100}Mbps	# rate of UNI
#*.uni_delay = ${ud=0}s  # delay at UNIs
#*.distribution_rate = ${dr=0.1, 1}Gbps	# rate of distribution fiber
*.backbone_rate = ${br=100}Gbps	# rate of backbone link
#*.backbone_delay = ${bd=4.7}ms  # delay in backbone network (giving total RTT of 10 ms including access)

########################################################################
### Performance measurement modules (BurstMeter and DelayMeter) 
########################################################################
**.burstMeter.maxIFG = 5	# maximum IFGs allowed between two consecutive Ethernet frames of a same burst

########################################################################
### Host (user)
########################################################################
###
### HTTP (based on [2])
###
**.host*[*].httpAppType = "HttpClientApp"
**.host*[*].httpApp[*].address = ""
#**.host*[*].tcpApp[*].port = -1  # Due to issues in assigning ephemeral
                                 # port numer, we assign port number
                                 # statically in HttpClientApp.ned instead.
**.host*[*].httpApp[*].connectAddress = "server"
**.host*[*].httpApp[*].connectPort = 80
**.host*[*].httpApp[*].startTime = uniform(1s, 5s)
**.host*[*].httpApp[*].htmlObjectLength = trunc_lognormal(8.35B, 1.37B, 100B, 2e6B)  # "replyLength" of the 1st request (for HTML object)
**.host*[*].httpApp[*].numEmbeddedObjects = trunc_pareto(2, 1.1, 55)-2
**.host*[*].httpApp[*].embeddedObjectLength = trunc_lognormal(6.17B, 2.36B, 50B, 2e6B)
**.host*[*].httpApp[*].requestLength = uniform(0B, 700B)
**.host*[*].httpApp[*].parsingTime = exponential(0.13s)	# lambda = 7.69
**.host*[*].httpApp[*].thinkTime = 0s  # no time gap between requests (for embedded objects)
**.host*[*].httpApp[*].idleInterval = exponential(30.3s)	# time gap between sessions ("Reading Time" in [2]); lambda = 0.033
**.host*[*].httpApp[*].reconnectInterval = 30s
###
### FTP (based on [2])
###
**.host*[*].ftpAppType = "FtpClientApp"
#**.host*[*].ftpApp[*].active = true
**.host*[*].ftpApp[*].address = ""
#**.host*[*].ftpApp[*].port = -1
**.host*[*].ftpApp[*].connectAddress = "server"
**.host*[*].ftpApp[*].connectPort = 20
**.host*[*].ftpApp[*].startTime = uniform(1s, 5s)
**.host*[*].ftpApp[*].fileSize = trunc_lognormal(14.45B, 0.35B, 0B, 5e6B)
**.host*[*].ftpApp[*].requestLength = uniform(0B, 700B)
**.host*[*].ftpApp[*].idleInterval = exponential(166.667s)  # time gap between sessions ("Reading Time" in [3]); lambda = 0.006
**.host*[*].ftpApp[*].reconnectInterval = 30s
###
### Streaming video (based on [3])
###
**.host*[*].videoAppType = "UDPVideoStreamCliWithTrace2" # for delay to loss conversion
**.host*[*].videoApp[*].localPort = 9999
**.host*[*].videoApp[*].serverAddress = "server"
**.host*[*].videoApp[*].serverPort = 3088
**.host*[*].videoApp[*].startTime = uniform(1s, 5s)
**.host*[*].videoApp[*].startupDelay = 5s

########################################################################
### Server settings
########################################################################
###
### HTTP
###
**.server.httpSrvType = "TCPGenericSrvApp"
### Another choice of server app (it does the same as TCPGenericSrvApp):
#  **.server.httpSrvType="TCPSrvHostApp"
#  **.server.httpSrv[*].serverThreadClass="TCPGenericSrvThread"
**.server.httpSrv[*].address = ""
**.server.httpSrv[*].port = 80
**.server.httpSrv[*].replyDelay = 0
###
### FTP
###
**.server.ftpSrvType = "TCPGenericSrvApp"
**.server.ftpSrv[*].address = ""
**.server.ftpSrv[*].port = 20
**.server.ftpSrv[*].replyDelay = 0
###
### Streaming video (based on [3])
###
**.server.videoSrvType = "UDPVideoStreamSvrWithTrace"
**.server.videoSrv[*].serverPort = 3088
**.server.videoSrv[*].fps = 30  # frames per second
**.server.videoSrv[*].appOverhead = 12B  # size of application layer overhead (e.g., RTP header)
**.server.videoSrv[*].maxPayloadSize = 1460B  # maximum size of payload to be carried in RTP packets
#**.server.videoSrv[*].frameSpreading = false  # turn off spreading of frames over a period

########################################################################
### Worst-case traffic (WCT) settings
########################################################################
###
### sources at the network side
###
**.wct_source[*].udpApp.localPort = 7000
**.wct_source[*].udpApp.destPort = 8000
**.wct_source[*].udpApp.startTime = uniform(1s, 5s)
**.wct_source[*].udpApp.lineRate = ${br}Gbps
###
### sinks at the user side
###
**.wct_sink[*].numUdpApps = 1
**.wct_sink[*].udpAppType = "UDPSink"
**.wct_sink[*].udpApp[*].localPort = 8000

########################################################################
### TCP parameters
########################################################################
**.tcp.sendQueueClass = "TCPMsgBasedSendQueue"
**.tcp.receiveQueueClass = "TCPMsgBasedRcvQueue"
**.tcp.mss = 1460	# optimal for Ethernet interface whose MTU is 1500 bytes

########################################################################
### IP-related
########################################################################
**.arp.cacheTimeout = 4h	# default value for Cisco devices (6h for Juniper; 10min for Windows; 1min for Linux)
					  		# INET default is 120s

########################################################################
### NIC (of server, hosts, and Ethernet switches)
########################################################################
**.olt.relayUnit.addressTableSize = 2000	# >> maximum of 960 streams for N=64, n=5, and 3 apps/host
**.accessSwitch.relayUnit.addressTableSize = 2000	# >> maximum of 960 streams for N=64, n=5, and 3 apps/host
#**.eth[*].queueType = "DropTailQueue"  # (default is "DropTailQueue")
#**.eth[*].queueType = "REDQueue" # in routers (for better fairness among sessions)
#**.eth[*].queue.frameCapacity = 10000  # in frames; based on RTT(10ms)*BW(10G) (default is 100)
#**.eth[*].queue.frameCapacity = 1000 # in Ethernet switches
**.frameCapacity = 10000	# in frames; based on RTT(10ms)*BW(10G) (default is 100)
**.txQueueLimit = 10000		# in frames; based on RTT(10ms)*BW(10G) (default is 100)
