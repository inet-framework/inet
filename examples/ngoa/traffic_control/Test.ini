#
# Copyright (C) 2011 Kyeong Soo (Joseph) Kim. All rights reserved.
#
# This ini file provides architecture-specific configurations for a
# reference (dedicated) access architectures (e.g., point-to-point or
# static WDM-PON) for the comparison study of next-generation optical
# access (NGOA) architectures.
#
# Note that [General] section, i.e., configurations common to all
# architectures including those of traffic models, is provided by
# "General.ini".
#
# References
# [1] N. K. Shankaranarayanan, Z. Jiang, and P. Mishra,
#     "User-perceived performance of web-browsing and interactive data
#     in HFC cable access networks," Proc. of ICC, June 2001.
#

[General]
### [General] section providing configurations common to all network
### architectures
include General.ini


########################################################################
### Command environment
########################################################################
#cmdenv-express-mode = true
#cmdenv-performance-display = true	# for monitoring
#cmdenv-status-frequency = 2min	# default is 2s

########################################################################
### NIC (of ONUs, OLT)
########################################################################


########################################################################
### Architecture-Specific Settings
########################################################################
[Config TestBase]
network = inet.examples.ngoa.traffic_control.Test
result-dir = results/Test
**.olt.ethg$o[*].channel.throughput.result-recording-modes = all	# for throughput measurement
**.httpApp[*].*.result-recording-modes = all

[Config TestVlanBase]
network = inet.examples.ngoa.traffic_control.TestVlan
result-dir = results/Test
**.olt.ethg$o[*].channel.throughput.result-recording-modes = all	# for throughput measurement
**.httpApp[*].*.result-recording-modes = all

########################################################################
### Reference case without traffic shaping
########################################################################
[Config N1_n1_nh1_nf0_nv0]
sim-time-limit = 2h
warmup-period = 0.2h
extends = TestBase
result-dir = results/Test/N1_n1_nh1_nf0_nv0
*.N = 1	# number of ONUs
*.n = 1	# number of hosts per ONU
**.host[*].numFtpApps = 0
**.server.numFtpSrvs = 0
**.host[*].numVideoApps = 0
**.server.numVideoSrvs = 0
*.distribution_rate = ${dr=0.1, 1, 10}Gbps	# rate of distribution fiber
*.backbone_rate = ${br=100}Gbps	# rate of backbone link
#*.backbone_delay = ${bd=4.7}ms  # delay in backbone network (total RTT = 10 ms)

[Config VLAN_N1_n1_nh1_nf0_nv0]
sim-time-limit = 2h
warmup-period = 0.2h
extends = TestVlanBase
result-dir = results/Test/VLAN_N1_n1_nh1_nf0_nv0
*.N = 1	# number of ONUs
*.n = 1	# number of hosts per ONU
**.onu[1].tagger[1].tagged = true	# tagger[n] is toward ODN
**.onu[1].tagger[1].vidSet = "1"
**.olt.tagger[0].tagged = true	# tagger[0] is toward ODN
**.olt.tagger[0].vidSet = "1"
**.host[*].numFtpApps = 0
**.server.numFtpSrvs = 0
**.host[*].numVideoApps = 0
**.server.numVideoSrvs = 0
*.distribution_rate = ${dr=0.1, 1, 10}Gbps	# rate of distribution fiber
*.backbone_rate = ${br=100}Gbps	# rate of backbone link
#*.backbone_delay = ${bd=4.7}ms  # delay in backbone network (total RTT = 10 ms)

########################################################################
### With traffic shaping in single-user case
########################################################################
[Config N1_n1_nh1_nf0_nv0_tbf]
sim-time-limit = 2h
warmup-period = 0.2h
extends = TestBase
result-dir = results/Test/N1_n1_nh1_nf0_nv0_tbf
*.N = 1	# number of ONUs
*.n = 1	# number of hosts per ONU
**.host[*].numFtpApps = 0
**.server.numFtpSrvs = 0
**.host[*].numVideoApps = 0
**.server.numVideoSrvs = 0
**.olt.mac[0].queueType = "DropTailTBFQueue"  # OLT downstream queue
**.olt.mac[0].queue.bucketSize = ${bs=15180, 30360, 75900, 151800}B	# 10, 20, 50, 100 MTUs
**.olt.mac[0].queue.meanRate = ${mr=1, 2, 5, 10}Mbps
**.olt.ethg$o[*].channel.throughput.result-recording-modes = all	# for throughput measurement
*.distribution_rate = ${dr=100}Mbps  # rate of distribution fiber
*.backbone_rate = ${br=1}Gbps  # rate of backbone link
#*.backbone_delay = ${bd=4.7}ms  # delay in backbone network (total RTT = 10 ms)

########################################################################
### With traffic shaping in multi-user case
########################################################################
[Config VLAN_N2_n1_nh1_nf0_nv0_tbf]
sim-time-limit = 2h
warmup-period = 0.2h
extends = TestVlanBase
result-dir = results/Test/VLAN_N2_n1_nh1_nf0_nv0_tbf
*.N = 2	# number of ONUs
*.n = 1	# number of hosts per ONU
**.host[*].numFtpApps = 0
**.server.numFtpSrvs = 0
**.host[*].numVideoApps = 0
**.server.numVideoSrvs = 0
### OLT
# tagged ports toward ODN
**.olt.mac[0].queueType = "DropTailVLANTBFQueue"  # OLT downstream queue
**.olt.mac[0].queue.numQueues = 2	# set to number of ONUs
**.olt.mac[0].queue.bucketSize = ${bs=15220, 30440, 76100, 152200}B	# 10, 20, 50, 100 MTUs (taking into account VLAN tag)
**.olt.mac[0].queue.meanRate = ${mr=1, 2, 5, 10}Mbps
**.olt.ethg$o[*].channel.throughput.result-recording-modes = all	# for throughput measurement
**.olt.tagger[0].tagged = true
**.olt.tagger[0].vidSet = "10 11"
# untagged ports toward SNI
**.olt.tagger[1].tagged = false
**.olt.tagger[1].dynamicTagging = true
**.olt.tagger[1].vidSet = "10 11"
### ONU
# untagged ports toward UNIs
**.onu[*].tagger[0].tagged = false
**.onu[0].tagger[0].vidSet = "10"
**.onu[1].tagger[0].vidSet = "11"
# tagged ports toward ODN
#**.onu[*].tagger[n].tagged = true
#**.onu[*].tagger[n].vidSet = string(n)
**.onu[*].tagger[1].tagged = true
**.onu[0].tagger[1].vidSet = "10"
**.onu[1].tagger[1].vidSet = "11"
### accessSwitch
**.accessSwitch.tagger[0].tagged = true
**.accessSwitch.tagger[0].vidSet = "10"
**.accessSwitch.tagger[1].tagged = true
**.accessSwitch.tagger[1].vidSet = "11"
**.accessSwitch.tagger[2].tagged = true
**.accessSwitch.tagger[2].vidSet = "10 11"
### channel rates
*.distribution_rate = ${dr=100}Mbps  # rate of distribution fiber
*.backbone_rate = ${br=1}Gbps  # rate of backbone link
#*.backbone_delay = ${bd=4.7}ms  # delay in backbone network (total RTT = 10 ms)
