#
# Copyright (C) 2010 Kyeong Soo (Joseph) Kim. All rights reserved.
#
# This ini file provides [General] section -- configurations common
# to all architectures -- for the equivalent circuit rate (ECR) [1]
# study of next-generation optical access.
#
# It provides configurations for a host with the following hybrid
# traffic models:
# - HTTP:  Behavioural model of a web user (HTTP 1.1) browsing web
#          pages with several embedded objects (e.g., images, applets,
#          frames, etc) based on [2]. It uses HTTPClientApp and
#          TCPGenericSrvApp.
# - FTP:   FTP model based on the parameters in [3]. 10 streams
#          are multiplexed to emulate future high-speed data traffic.
#          It uses HTTPClientApp and TCPGenericSrvApp as well.
# - Video: Streaming video model based on H.264/AVC trace files from
#          ASU video trace library [4]. It uses UDPVideoStreamCliWithTrace
#          and UDPVideoStreamSvrWithTrace.
#
# References
# [1] N. K. Shankaranarayanan, Z. Jiang, and P. Mishra, "User-perceived
#     performance of web-browsing and interactive data in HFC cable access
#     networks," Proc. of ICC, June 2001.
# [2] J. J. Lee and M. Gupta, "A new traffic model for current user web
#     browsing behavior," Research@Intel, 2007. [Online]. Available:
#     http://blogs.intel.com/research/HTTP%20Traffic%20Model_v1%201%20white%20paper.pdf
# [3] cdma2000 Evaulation Methodology, 3GPP2 C.R1002-B, 3GPP2 Std., Rev. B,
#     Dec. 2009. [Online]. Available:
#     http://www.3gpp2.org/public_html/specs/C.R1002-B%20v1.0_Evaluation_Methodology.pdf
# [4] Video trace library, Arizona State University. [Online]. Available:
#     http://trace.eas.asu.edu/
#


[General]
total-stack = 32MiB
#network = inet.examples.ngoa.ecr2.DedicatedAccess  # included as default; to be changed in architecture-specific ini
#debug-on-errors = true
sim-time-limit = 3h
warmup-period = 20min  # depends on 'startTime' of applications and video trace duration (~10 min. for Terminator 2)
repeat = 5
seed-set = ${repetition}	# for consistent results over different configurations


########################################################################
### Results recording
########################################################################
result-dir = results  # included as default; to be changed in architecture-specific ini
**.pingApp.*.scalar-recording = false
#**.server.udpApp[*].scalar-recording = true
**.scalar-recording = true
**.vector-recording = false

########################################################################
### Command environment
########################################################################
cmdenv-express-mode = true
cmdenv-performance-display = true  # for monitoring
cmdenv-status-frequency = 10s  # default is 2s

########################################################################
### Tk environment
########################################################################
tkenv-plugin-path = ../../../etc/plugins

########################################################################
### Network/system settings
########################################################################
#*.N = 16  # number of ONUs (subscribers)
#*.n = ${n=1}  # number of hosts (users) per ONU (subscriber)
#*.uni_rate = ${ur=10}Gbps  # transmission rate of ONU Ethernet UNIs
#*.uni_delay = ${ud=0}s  # delay at UNIs
#*.distribution_rate = ${dr=10}Gbps	# transmission rate of distribution fiber (between Onu and LambdaSplitter)
#*.feeder_rate = ${fr=10}Gbps	# transmission rate of feeder fiber (between Olt and LambdaSplitter)
#*.backbone_rate = ${br=1}Tbps  # transmission rate of backbone link (between Olt and server)
#*.backbone_delay = ${bd=4.7}ms  # delay in backbone network (giving total RTT of 10 ms including access)

########################################################################
### Host (user)
########################################################################
###
### HTTP (based on [2])
###
**.host[*].numHttpApps = 1
**.host[*].httpAppType = "HttpClientApp"
**.host[*].httpApp[*].address = ""
#**.host[*].tcpApp[*].port = -1  # Due to issues in assigning ephemeral
                                 # port numer, we assign port number
                                 # statically in HttpClientApp.ned instead.
**.host[*].httpApp[*].connectAddress = "server"
**.host[*].httpApp[*].connectPort = 80
**.host[*].httpApp[*].startTime = uniform(1s, 5s)
#**.host[*].httpApp[*].htmlObjectLength = trunc_lognormal(7.90272B, 1.7643B, 0B, 2MB)  # "replyLength" of the 1st request (for HTML object)
**.host[*].httpApp[*].htmlObjectLength = trunc_lognormal(7.90272B, 1.7643B, 0B, 2e6B)  # "replyLength" of the 1st request (for HTML object)
**.host[*].httpApp[*].numEmbeddedObjects = gamma_d(0.141385, 40.3257)
#**.host[*].httpApp[*].embeddedObjectLength = trunc_lognormal(7.51384B, 2.17454B, 0B, 6MB)
**.host[*].httpApp[*].embeddedObjectLength = trunc_lognormal(7.51384B, 2.17454B, 0B, 6e6B)
**.host[*].httpApp[*].requestLength = uniform(0B, 700B)
**.host[*].httpApp[*].parsingTime = trunc_lognormal(-1.24892s, 2.08427s, 0s, 300s)
**.host[*].httpApp[*].thinkTime = 0s  # no time gap between requests (for embedded objects)
**.host[*].httpApp[*].idleInterval = lognormal(-0.495204s, 2.7731s)  # time gap between sessions ("Reading Time" in [2])
**.host[*].httpApp[*].reconnectInterval = 30s
###
### FTP (based on [3])
###
**.host[*].numFtpApps = 10
**.host[*].ftpAppType = "HttpClientApp"  # use HTTP cleint module now
#**.host[*].ftpApp[*].active = true
**.host[*].ftpApp[*].address = ""
#**.host[*].ftpApp[*].port = -1
**.host[*].ftpApp[*].connectAddress = "server"
**.host[*].ftpApp[*].connectPort = 1000
#**.host[*].ftpApp[*].tOpen = exponential(0.1s)
#**.host[*].ftpApp[*].tSend = 0
#**.host[*].ftpApp[*].sendBytes = 1MB
#**.host[*].ftpApp[*].sendScript = ""
#**.host[*].ftpApp[*].tClose = 0
**.host[*].ftpApp[*].startTime = uniform(1s, 5s)
**.host[*].ftpApp[*].htmlObjectLength = trunc_lognormal(14.45B, 0.35B, 0B, 5e6B)  # "file size" to download
**.host[*].ftpApp[*].requestLength = uniform(0B, 700B)
**.host[*].ftpApp[*].parsingTime = 0s  # no parsimg time for FTP
**.host[*].ftpApp[*].thinkTime = 0s  # no time gap between requests for FTP
**.host[*].ftpApp[*].idleInterval = exponential(166.667s)  # time gap between sessions ("Reading Time" in [3])
**.host[*].ftpApp[*].reconnectInterval = 30s
###
### Streaming video (based on [4])
###
**.host[*].numVideoApps = 1
**.host[*].videoAppType = "UDPVideoStreamCliWithTrace"
**.host[*].videoApp[*].localPort = 9999
**.host[*].videoApp[*].serverAddress = "server"
**.host[*].videoApp[*].serverPort = 3088
**.host[*].videoApp[*].startTime = uniform(1s, 5s)
**.host[*].videoApp[*].numTraceFrames = 17998  # for 'Terminator 2'
**.host[*].videoApp[*].gopSize = 12  # for 'Terminator 2'
**.host[*].videoApp[*].numBFrames = 2  # for 'Terminator 2'

########################################################################
### Server settings
########################################################################
###
### HTTP
###
**.server.numHttpSrvs = 1
**.server.httpSrvType = "TCPGenericSrvApp"
### Another choice of server app (it does the same as TCPGenericSrvApp):
#  **.server.httpSrvType="TCPSrvHostApp"
#  **.server.httpSrv[*].serverThreadClass="TCPGenericSrvThread"
**.server.httpSrv[*].address = ""
**.server.httpSrv[*].port = 80
**.server.httpSrv[*].replyDelay = 0
###
### FTP
###
**.server.numFtpSrvs = 1
**.server.ftpSrvType = "TCPGenericSrvApp"
**.server.ftpSrv[*].address = ""
**.server.ftpSrv[*].port = 1000
**.server.ftpSrv[*].replyDelay = 0
###
### Streaming video (based on [4])
###
**.server.numVideoSrvs = 1
**.server.videoSrvType = "UDPVideoStreamSvrWithTrace"
**.server.videoSrv[*].serverPort = 3088
**.server.videoSrv[*].fps = 30  # frames per second
**.server.videoSrv[*].appOverhead = 12B  # size of application layer overhead (e.g., RTP header)
**.server.videoSrv[*].maxPayloadSize = 1460B  # maximum size of payload to be carried in RTP packets
**.server.videoSrv[*].traceFile = "../../videoTraces/terminator2_verbose"

########################################################################
### General TCP
########################################################################
**.tcp.sendQueueClass = "TCPMsgBasedSendQueue"
#**.tcp.sendQueueClass = "TCPVirtualDataSendQueue"
**.tcp.receiveQueueClass = "TCPMsgBasedRcvQueue"
#**.tcp.receiveQueueClass = "TCPVirtualDataRcvQueue"

########################################################################
### NIC (of server, and hosts)
########################################################################
#**.server.eth[*].queueType = "DropTailQueue"  # (default is "DropTailQueue")
#**.eth[*].queue.frameCapacity = 10000  # in frames; based on RTT(10ms)*BW(10G) (default is 100)
#**.mac[*].queueType = "REDQueue" # in routers (for better fairness among sessions)
#**.mac[*].queue[*].frameCapacity = 1000 # in Ethernet switches
**.queue.frameCapacity = 10000  # in frames; based on RTT(10ms)*BW(10G) (default is 100)
