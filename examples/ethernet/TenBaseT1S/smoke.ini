[Config Smoke]
description = "Wide range smoke test of an Ethernet 10BASE-T1S multidrop link"
# this simulation proves that the MAC, PLCA, and PHY state machines are robust and they don't fail
# the multidrop link contains a variable number of nodes
# all nodes send traffic to the controller, and the controller sends traffic to all nodes
# the configuration uses several random parameters:
#  - number of nodes
#  - maximum burst count
#  - delay line length
#  - packet production interval
#  - initial packet production offset
#  - packet length
# expected result:
#  - all simulation runs terminate without error

network = MultidropNetwork
sim-time-limit = 100ms
repeat = 100

# number of nodes can vary between 1 and 10
*.numNodes = ${numNodes=1..10}

# controller is an Ethernet PLCA network node
*.controller.typename = "EthernetPlcaHost"

# all nodes are Ethernet PLCA network nodes
*.node[*].typename = "EthernetPlcaHost"

# PLCA max burst count
*.*.eth[*].plca.max_bc = intuniform(0, 10)
*.*.eth[*].plca.delay_line_length = intuniform(0, 100)

# 1 source and 1 sink application in each node
*.node[*].numApps = 2

# source application sends to controller
*.node[*].app[0].typename = "EthernetSourceApp"
*.node[*].app[0].io.interface = "eth0"
*.node[*].app[0].io.remoteAddress = "controller"
*.node[*].app[0].source.productionInterval = uniform(100us, 1000us)
*.node[*].app[0].source.initialProductionOffset = uniform(0us, 100us)
*.node[*].app[0].source.packetLength = intuniform(46B, 1500B)

# sink application receives from controller
*.node[*].app[1].typename = "EthernetSinkApp"
*.node[*].app[1].io.interface = "eth0"
*.node[*].app[1].io.steal = true
*.node[0].app[1].io.localAddress = "node[0]"
*.node[1].app[1].io.localAddress = "node[1]"
*.node[2].app[1].io.localAddress = "node[2]"
*.node[3].app[1].io.localAddress = "node[3]"
*.node[4].app[1].io.localAddress = "node[4]"
*.node[5].app[1].io.localAddress = "node[5]"
*.node[6].app[1].io.localAddress = "node[6]"
*.node[7].app[1].io.localAddress = "node[7]"
*.node[8].app[1].io.localAddress = "node[8]"
*.node[9].app[1].io.localAddress = "node[9]"

# 1 sink application and 1 source application for each node
*.controller.numApps = 1 + ${numNodes}

# sink application receives packets from all nodes
*.controller.app[0].typename = "EthernetSinkApp"
*.controller.app[0].io.steal = true
*.controller.app[0].io.interface = "eth0"
*.controller.app[0].io.localAddress = "controller"

# 1 source application for each node
*.controller.app[*].typename = "EthernetSourceApp"
*.controller.app[*].io.interface = "eth0"
*.controller.app[1].io.remoteAddress = "node[0]"
*.controller.app[2].io.remoteAddress = "node[1]"
*.controller.app[3].io.remoteAddress = "node[2]"
*.controller.app[4].io.remoteAddress = "node[3]"
*.controller.app[5].io.remoteAddress = "node[4]"
*.controller.app[6].io.remoteAddress = "node[5]"
*.controller.app[7].io.remoteAddress = "node[6]"
*.controller.app[8].io.remoteAddress = "node[7]"
*.controller.app[9].io.remoteAddress = "node[8]"
*.controller.app[10].io.remoteAddress = "node[9]"
*.controller.app[*].source.productionInterval = uniform(100us, 1000us)
*.controller.app[*].source.initialProductionOffset = uniform(0us, 100us)
*.controller.app[*].source.packetLength = intuniform(46B, 1500B)

# enable interface visualization
*.visualizer.interfaceTableVisualizer.displayInterfaceTables = true
*.visualizer.interfaceTableVisualizer.format = "%N%\\%m"
