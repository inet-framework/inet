[Config Mixed]
description = "A network that mixes standard Ethernet with 10BASE-T1S Ethernet components"
# this network contains an EthernetSwitch connected to a StandardHost, and an Ethernet 10BASE-T1S multidrop link
# the multidrop link contains a variable number of project specific network nodes
# all 10BASE-T1S nodes send traffic to the host through the switch,
# and the host sends traffic to all 10BASE-T1S nodes through the switch

network = MixedMultidropNetwork
sim-time-limit = 1ms

# number of nodes can vary between 1 and 10
*.numNodes = ${numNodes=1..10}

# configure switch port towards multidrop line to use PLCA interface
*.switch.eth[0].typename = "EthernetPlcaInterface"

# all nodes are Ethernet PLCA network nodes
*.node[*].typename = "EthernetPlcaNode"

# enable socket support in the Ethernet layer for the applications
*.*.ethernet.hasSocketSupport = true

# SPI configuration
*.*.spi.typename = "SpiDelayer"
*.*.spi.speed = 10MHz # delay is calculated from speed and packet length
#*.*.spi.queue.typename = "DropHeadQueue"
#*.*.spi.queue.dataCapacity = 16kB

# encryption delay
*.*.encryption.delay = 10us # constant delay per packet

# switch forwarding delay
*.switch.bridging.typename = "BridgingLayer"
*.switch.bridging.directionReverser.delayer.typename = "PacketDelayer"
*.switch.bridging.directionReverser.delayer.delay = 10us

# PLCA max burst count
*.*.eth[*].plca.max_bc = 3

# 1 source and 1 sink application in each node
*.node[*].numApps = 2

# source application sends to host
*.node[*].app[0].typename = "EthernetSourceApp"
*.node[*].app[0].io.interface = "eth0"
*.node[*].app[0].io.remoteAddress = "host"
*.node[*].app[0].source.productionInterval = 2 * ${numNodes} * ${packetInterval=50,100,200,300,400,500,600,700,800,900,1000}us # the traffic fits into the channel capacity
*.node[*].app[0].source.packetLength = 46B # minimum Ethernet payload size

# sink application receives from host
*.node[*].app[1].typename = "EthernetSinkApp"
*.node[*].app[1].io.interface = "eth0"
*.node[*].app[1].io.steal = true
*.node[0].app[1].io.localAddress = "node[0]"
*.node[1].app[1].io.localAddress = "node[1]"
*.node[2].app[1].io.localAddress = "node[2]"
*.node[3].app[1].io.localAddress = "node[3]"
*.node[4].app[1].io.localAddress = "node[4]"
*.node[5].app[1].io.localAddress = "node[5]"
*.node[6].app[1].io.localAddress = "node[6]"
*.node[7].app[1].io.localAddress = "node[7]"
*.node[8].app[1].io.localAddress = "node[8]"
*.node[9].app[1].io.localAddress = "node[9]"

# network interface queue drops oldest packet first
*.node[*].eth[*].queue.typename = "DropHeadQueue"
*.node[*].eth[*].queue.dataCapacity = 16kB

# 1 sink application and 1 source application for each node
*.host.numApps = 1 + ${numNodes}

# sink application receives packets from all nodes
*.host.app[0].typename = "EthernetSinkApp"
*.host.app[0].io.steal = true
*.host.app[0].io.interface = "eth0"
*.host.app[0].io.localAddress = "host"

# 1 source application for each node
*.host.app[*].typename = "EthernetSourceApp"
*.host.app[*].io.interface = "eth0"
*.host.app[1].io.remoteAddress = "node[0]"
*.host.app[2].io.remoteAddress = "node[1]"
*.host.app[3].io.remoteAddress = "node[2]"
*.host.app[4].io.remoteAddress = "node[3]"
*.host.app[5].io.remoteAddress = "node[4]"
*.host.app[6].io.remoteAddress = "node[5]"
*.host.app[7].io.remoteAddress = "node[6]"
*.host.app[8].io.remoteAddress = "node[7]"
*.host.app[9].io.remoteAddress = "node[8]"
*.host.app[10].io.remoteAddress = "node[9]"
*.host.app[*].source.productionInterval = 2 * ${numNodes} * ${packetInterval}us # the traffic fits into the channel capacity
*.host.app[*].source.packetLength = 46B # minimum Ethernet payload size

# enable interface visualization
*.visualizer.interfaceTableVisualizer.displayInterfaceTables = true
*.visualizer.interfaceTableVisualizer.format = "%N%\\%m"
