//
// Copyright (C) 2020 OpenSim Ltd.
//
// SPDX-License-Identifier: LGPL-3.0-or-later
//


#include "inet/common/checksum/Checksum.h"

namespace inet {

// CRC-32 lookup table, source: https://crccalc.com/
const uint32_t crc32_tab[] = {
    0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f,
    0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988,
    0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2,
    0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,
    0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,
    0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172,
    0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c,
    0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,
    0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423,
    0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,
    0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x01db7106,
    0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,
    0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d,
    0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e,
    0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,
    0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,
    0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7,
    0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0,
    0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa,
    0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
    0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81,
    0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a,
    0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84,
    0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,
    0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,
    0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc,
    0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e,
    0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,
    0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55,
    0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,
    0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28,
    0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,
    0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f,
    0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38,
    0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,
    0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,
    0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69,
    0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2,
    0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc,
    0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
    0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693,
    0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94,
    0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d
};

// CRC-32C (CRC-32/ISCSI) lookup table, source: https://crccalc.com/
const uint32_t crc32c_tab[] = {
    0x00000000, 0xF26B8303,  0xE13B70F7, 0x1350F3F4, 0xC79A971F, 0x35F1141C,  0x26A1E7E8, 0xD4CA64EB,
    0x8AD958CF, 0x78B2DBCC,  0x6BE22838, 0x9989AB3B, 0x4D43CFD0, 0xBF284CD3,  0xAC78BF27, 0x5E133C24,
    0x105EC76F, 0xE235446C,  0xF165B798, 0x030E349B, 0xD7C45070, 0x25AFD373,  0x36FF2087, 0xC494A384,
    0x9A879FA0, 0x68EC1CA3,  0x7BBCEF57, 0x89D76C54, 0x5D1D08BF, 0xAF768BBC,  0xBC267848, 0x4E4DFB4B,
    0x20BD8EDE, 0xD2D60DDD,  0xC186FE29, 0x33ED7D2A, 0xE72719C1, 0x154C9AC2,  0x061C6936, 0xF477EA35,
    0xAA64D611, 0x580F5512,  0x4B5FA6E6, 0xB93425E5, 0x6DFE410E, 0x9F95C20D,  0x8CC531F9, 0x7EAEB2FA,
    0x30E349B1, 0xC288CAB2,  0xD1D83946, 0x23B3BA45, 0xF779DEAE, 0x05125DAD,  0x1642AE59, 0xE4292D5A,
    0xBA3A117E, 0x4851927D,  0x5B016189, 0xA96AE28A, 0x7DA08661, 0x8FCB0562,  0x9C9BF696, 0x6EF07595,
    0x417B1DBC, 0xB3109EBF,  0xA0406D4B, 0x522BEE48, 0x86E18AA3, 0x748A09A0,  0x67DAFA54, 0x95B17957,
    0xCBA24573, 0x39C9C670,  0x2A993584, 0xD8F2B687, 0x0C38D26C, 0xFE53516F,  0xED03A29B, 0x1F682198,
    0x5125DAD3, 0xA34E59D0,  0xB01EAA24, 0x42752927, 0x96BF4DCC, 0x64D4CECF,  0x77843D3B, 0x85EFBE38,
    0xDBFC821C, 0x2997011F,  0x3AC7F2EB, 0xC8AC71E8, 0x1C661503, 0xEE0D9600,  0xFD5D65F4, 0x0F36E6F7,
    0x61C69362, 0x93AD1061,  0x80FDE395, 0x72966096, 0xA65C047D, 0x5437877E,  0x4767748A, 0xB50CF789,
    0xEB1FCBAD, 0x197448AE,  0x0A24BB5A, 0xF84F3859, 0x2C855CB2, 0xDEEEDFB1,  0xCDBE2C45, 0x3FD5AF46,
    0x7198540D, 0x83F3D70E,  0x90A324FA, 0x62C8A7F9, 0xB602C312, 0x44694011,  0x5739B3E5, 0xA55230E6,
    0xFB410CC2, 0x092A8FC1,  0x1A7A7C35, 0xE811FF36, 0x3CDB9BDD, 0xCEB018DE,  0xDDE0EB2A, 0x2F8B6829,
    0x82F63B78, 0x709DB87B,  0x63CD4B8F, 0x91A6C88C, 0x456CAC67, 0xB7072F64,  0xA457DC90, 0x563C5F93,
    0x082F63B7, 0xFA44E0B4,  0xE9141340, 0x1B7F9043, 0xCFB5F4A8, 0x3DDE77AB,  0x2E8E845F, 0xDCE5075C,
    0x92A8FC17, 0x60C37F14,  0x73938CE0, 0x81F80FE3, 0x55326B08, 0xA759E80B,  0xB4091BFF, 0x466298FC,
    0x1871A4D8, 0xEA1A27DB,  0xF94AD42F, 0x0B21572C, 0xDFEB33C7, 0x2D80B0C4,  0x3ED04330, 0xCCBBC033,
    0xA24BB5A6, 0x502036A5,  0x4370C551, 0xB11B4652, 0x65D122B9, 0x97BAA1BA,  0x84EA524E, 0x7681D14D,
    0x2892ED69, 0xDAF96E6A,  0xC9A99D9E, 0x3BC21E9D, 0xEF087A76, 0x1D63F975,  0x0E330A81, 0xFC588982,
    0xB21572C9, 0x407EF1CA,  0x532E023E, 0xA145813D, 0x758FE5D6, 0x87E466D5,  0x94B49521, 0x66DF1622,
    0x38CC2A06, 0xCAA7A905,  0xD9F75AF1, 0x2B9CD9F2, 0xFF56BD19, 0x0D3D3E1A,  0x1E6DCDEE, 0xEC064EED,
    0xC38D26C4, 0x31E6A5C7,  0x22B65633, 0xD0DDD530, 0x0417B1DB, 0xF67C32D8,  0xE52CC12C, 0x1747422F,
    0x49547E0B, 0xBB3FFD08,  0xA86F0EFC, 0x5A048DFF, 0x8ECEE914, 0x7CA56A17,  0x6FF599E3, 0x9D9E1AE0,
    0xD3D3E1AB, 0x21B862A8,  0x32E8915C, 0xC083125F, 0x144976B4, 0xE622F5B7,  0xF5720643, 0x07198540,
    0x590AB964, 0xAB613A67,  0xB831C993, 0x4A5A4A90, 0x9E902E7B, 0x6CFBAD78,  0x7FAB5E8C, 0x8DC0DD8F,
    0xE330A81A, 0x115B2B19,  0x020BD8ED, 0xF0605BEE, 0x24AA3F05, 0xD6C1BC06,  0xC5914FF2, 0x37FACCF1,
    0x69E9F0D5, 0x9B8273D6,  0x88D28022, 0x7AB90321, 0xAE7367CA, 0x5C18E4C9,  0x4F48173D, 0xBD23943E,
    0xF36E6F75, 0x0105EC76,  0x12551F82, 0xE03E9C81, 0x34F4F86A, 0xC69F7B69,  0xD5CF889D, 0x27A40B9E,
    0x79B737BA, 0x8BDCB4B9,  0x988C474D, 0x6AE7C44E, 0xBE2DA0A5, 0x4C4623A6,  0x5F16D052, 0xAD7D5351
};

// CRC-16-IBM lookup table, source: https://crccalc.com/
const uint16_t crc16_ibm_tab[] = {
    0x0000, 0xc0c1, 0xc181, 0x0140, 0xc301, 0x03c0, 0x0280, 0xc241,
    0xc601, 0x06c0, 0x0780, 0xc741, 0x0500, 0xc5c1, 0xc481, 0x0440,
    0xcc01, 0x0cc0, 0x0d80, 0xcd41, 0x0f00, 0xcfc1, 0xce81, 0x0e40,
    0x0a00, 0xcac1, 0xcb81, 0x0b40, 0xc901, 0x09c0, 0x0880, 0xc841,
    0xd801, 0x18c0, 0x1980, 0xd941, 0x1b00, 0xdbc1, 0xda81, 0x1a40,
    0x1e00, 0xdec1, 0xdf81, 0x1f40, 0xdd01, 0x1dc0, 0x1c80, 0xdc41,
    0x1400, 0xd4c1, 0xd581, 0x1540, 0xd701, 0x17c0, 0x1680, 0xd641,
    0xd201, 0x12c0, 0x1380, 0xd341, 0x1100, 0xd1c1, 0xd081, 0x1040,
    0xf001, 0x30c0, 0x3180, 0xf141, 0x3300, 0xf3c1, 0xf281, 0x3240,
    0x3600, 0xf6c1, 0xf781, 0x3740, 0xf501, 0x35c0, 0x3480, 0xf441,
    0x3c00, 0xfcc1, 0xfd81, 0x3d40, 0xff01, 0x3fc0, 0x3e80, 0xfe41,
    0xfa01, 0x3ac0, 0x3b80, 0xfb41, 0x3900, 0xf9c1, 0xf881, 0x3840,
    0x2800, 0xe8c1, 0xe981, 0x2940, 0xeb01, 0x2bc0, 0x2a80, 0xea41,
    0xee01, 0x2ec0, 0x2f80, 0xef41, 0x2d00, 0xedc1, 0xec81, 0x2c40,
    0xe401, 0x24c0, 0x2580, 0xe541, 0x2700, 0xe7c1, 0xe681, 0x2640,
    0x2200, 0xe2c1, 0xe381, 0x2340, 0xe101, 0x21c0, 0x2080, 0xe041,
    0xa001, 0x60c0, 0x6180, 0xa141, 0x6300, 0xa3c1, 0xa281, 0x6240,
    0x6600, 0xa6c1, 0xa781, 0x6740, 0xa501, 0x65c0, 0x6480, 0xa441,
    0x6c00, 0xacc1, 0xad81, 0x6d40, 0xaf01, 0x6fc0, 0x6e80, 0xae41,
    0xaa01, 0x6ac0, 0x6b80, 0xab41, 0x6900, 0xa9c1, 0xa881, 0x6840,
    0x7800, 0xb8c1, 0xb981, 0x7940, 0xbb01, 0x7bc0, 0x7a80, 0xba41,
    0xbe01, 0x7ec0, 0x7f80, 0xbf41, 0x7d00, 0xbdc1, 0xbc81, 0x7c40,
    0xb401, 0x74c0, 0x7580, 0xb541, 0x7700, 0xb7c1, 0xb681, 0x7640,
    0x7200, 0xb2c1, 0xb381, 0x7340, 0xb101, 0x71c0, 0x7080, 0xb041,
    0x5000, 0x90c1, 0x9181, 0x5140, 0x9301, 0x53c0, 0x5280, 0x9241,
    0x9601, 0x56c0, 0x5780, 0x9741, 0x5500, 0x95c1, 0x9481, 0x5440,
    0x9c01, 0x5cc0, 0x5d80, 0x9d41, 0x5f00, 0x9fc1, 0x9e81, 0x5e40,
    0x5a00, 0x9ac1, 0x9b81, 0x5b40, 0x9901, 0x59c0, 0x5880, 0x9841,
    0x8801, 0x48c0, 0x4980, 0x8941, 0x4b00, 0x8bc1, 0x8a81, 0x4a40,
    0x4e00, 0x8ec1, 0x8f81, 0x4f40, 0x8d01, 0x4dc0, 0x4c80, 0x8c41,
    0x4400, 0x84c1, 0x8581, 0x4540, 0x8701, 0x47c0, 0x4680, 0x8641,
    0x8201, 0x42c0, 0x4380, 0x8341, 0x4100, 0x81c1, 0x8081, 0x4040
};

// CRC-16-CCITT lookup table, source: https://crccalc.com/
const uint16_t crc16_ccitt_tab[] = {
    0x0000, 0x1189, 0x2312, 0x329B, 0x4624, 0x57AD, 0x6536, 0x74BF,
    0x8C48, 0x9DC1, 0xAF5A, 0xBED3, 0xCA6C, 0xDBE5, 0xE97E, 0xF8F7,
    0x1081, 0x0108, 0x3393, 0x221A, 0x56A5, 0x472C, 0x75B7, 0x643E,
    0x9CC9, 0x8D40, 0xBFDB, 0xAE52, 0xDAED, 0xCB64, 0xF9FF, 0xE876,
    0x2102, 0x308B, 0x0210, 0x1399, 0x6726, 0x76AF, 0x4434, 0x55BD,
    0xAD4A, 0xBCC3, 0x8E58, 0x9FD1, 0xEB6E, 0xFAE7, 0xC87C, 0xD9F5,
    0x3183, 0x200A, 0x1291, 0x0318, 0x77A7, 0x662E, 0x54B5, 0x453C,
    0xBDCB, 0xAC42, 0x9ED9, 0x8F50, 0xFBEF, 0xEA66, 0xD8FD, 0xC974,
    0x4204, 0x538D, 0x6116, 0x709F, 0x0420, 0x15A9, 0x2732, 0x36BB,
    0xCE4C, 0xDFC5, 0xED5E, 0xFCD7, 0x8868, 0x99E1, 0xAB7A, 0xBAF3,
    0x5285, 0x430C, 0x7197, 0x601E, 0x14A1, 0x0528, 0x37B3, 0x263A,
    0xDECD, 0xCF44, 0xFDDF, 0xEC56, 0x98E9, 0x8960, 0xBBFB, 0xAA72,
    0x6306, 0x728F, 0x4014, 0x519D, 0x2522, 0x34AB, 0x0630, 0x17B9,
    0xEF4E, 0xFEC7, 0xCC5C, 0xDDD5, 0xA96A, 0xB8E3, 0x8A78, 0x9BF1,
    0x7387, 0x620E, 0x5095, 0x411C, 0x35A3, 0x242A, 0x16B1, 0x0738,
    0xFFCF, 0xEE46, 0xDCDD, 0xCD54, 0xB9EB, 0xA862, 0x9AF9, 0x8B70,
    0x8408, 0x9581, 0xA71A, 0xB693, 0xC22C, 0xD3A5, 0xE13E, 0xF0B7,
    0x0840, 0x19C9, 0x2B52, 0x3ADB, 0x4E64, 0x5FED, 0x6D76, 0x7CFF,
    0x9489, 0x8500, 0xB79B, 0xA612, 0xD2AD, 0xC324, 0xF1BF, 0xE036,
    0x18C1, 0x0948, 0x3BD3, 0x2A5A, 0x5EE5, 0x4F6C, 0x7DF7, 0x6C7E,
    0xA50A, 0xB483, 0x8618, 0x9791, 0xE32E, 0xF2A7, 0xC03C, 0xD1B5,
    0x2942, 0x38CB, 0x0A50, 0x1BD9, 0x6F66, 0x7EEF, 0x4C74, 0x5DFD,
    0xB58B, 0xA402, 0x9699, 0x8710, 0xF3AF, 0xE226, 0xD0BD, 0xC134,
    0x39C3, 0x284A, 0x1AD1, 0x0B58, 0x7FE7, 0x6E6E, 0x5CF5, 0x4D7C,
    0xC60C, 0xD785, 0xE51E, 0xF497, 0x8028, 0x91A1, 0xA33A, 0xB2B3,
    0x4A44, 0x5BCD, 0x6956, 0x78DF, 0x0C60, 0x1DE9, 0x2F72, 0x3EFB,
    0xD68D, 0xC704, 0xF59F, 0xE416, 0x90A9, 0x8120, 0xB3BB, 0xA232,
    0x5AC5, 0x4B4C, 0x79D7, 0x685E, 0x1CE1, 0x0D68, 0x3FF3, 0x2E7A,
    0xE70E, 0xF687, 0xC41C, 0xD595, 0xA12A, 0xB0A3, 0x8238, 0x93B1,
    0x6B46, 0x7ACF, 0x4854, 0x59DD, 0x2D62, 0x3CEB, 0x0E70, 0x1FF9,
    0xF78F, 0xE606, 0xD49D, 0xC514, 0xB1AB, 0xA022, 0x92B9, 0x8330,
    0x7BC7, 0x6A4E, 0x58D5, 0x495C, 0x3DE3, 0x2C6A, 0x1EF1, 0x0F78
};

uint16_t internetChecksum(const uint8_t *addr, size_t count, uint32_t sum)
{
    while (count > 1) {
        sum += (addr[0] << 8) | addr[1];
        addr += 2;
        if (sum & 0x80000000)
            sum = (sum & 0xFFFF) + (sum >> 16);
        count -= 2;
    }

    if (count)
        sum += addr[0] << 8;

    while (sum >> 16)
        sum = (sum & 0xFFFF) + (sum >> 16);

    uint16_t sum16 = (uint16_t)sum;
    return ~sum16;
}

inline uint32_t swapBytes(uint32_t crc)
{
    return (crc >> 24) | ((crc >> 8) & 0x0000FF00) | ((crc << 8) & 0x00FF0000) | (crc << 24);
}

uint32_t ethernetFcs(const uint8_t *buf, size_t bufsize, uint32_t crc)
{
    crc = swapBytes(crc);  // undo byte order reversal for previous, partial CRC
    crc = crc32_iso_hdlc(buf, bufsize, crc);
    return swapBytes(crc);
}

uint32_t crc32_iso_hdlc(const uint8_t *buf, size_t bufsize, uint32_t crc)
{
    crc = crc ^ ~0U;
    const uint8_t *p = buf;
    while (bufsize--)
        crc = crc32_tab[(crc ^ *p++) & 0xFF] ^ (crc >> 8);
    crc = crc ^ ~0U;
    return crc;
}

uint32_t crc32c(const uint8_t *buf, size_t bufsize, uint32_t crc)
{
    crc = crc ^ ~0U;
    const uint8_t *p = buf;
    while (bufsize--)
        crc = crc32c_tab[(crc ^ *p++) & 0xFF] ^ (crc >> 8);
    crc = crc ^ ~0U;
    return crc;
}

uint16_t crc16_ibm(const uint8_t *buf, size_t bufsize, uint16_t crc)
{
    const uint8_t *p = buf;
    while (bufsize--)
        crc = (crc >> 8) ^ crc16_ibm_tab[(crc ^ *p++) & 0xFF];
    return crc;
}

uint16_t crc16_ccitt(const uint8_t *buf, size_t bufsize, uint16_t crc)
{
    const uint8_t *p = buf;
    while (bufsize--)
        crc = (crc >> 8) ^ crc16_ccitt_tab[(crc ^ *p++) & 0xFF];
    return crc;
}

// generic CRC implementations

static inline uint32_t reverse32(uint32_t x)
{
    x = ((x & 0x55555555) <<  1) | ((x & 0xAAAAAAAA) >>  1);
    x = ((x & 0x33333333) <<  2) | ((x & 0xCCCCCCCC) >>  2);
    x = ((x & 0x0F0F0F0F) <<  4) | ((x & 0xF0F0F0F0) >>  4);
    x = ((x & 0x00FF00FF) <<  8) | ((x & 0xFF00FF00) >>  8);
    x = ((x & 0x0000FFFF) << 16) | ((x & 0xFFFF0000) >> 16);
    return x;
}

static inline uint16_t reverse16(uint16_t x)
{
    return reverse32(x) >> 16;
}

static inline uint8_t reverse8(uint8_t x)
{
    return reverse32(x) >> 24;
}

uint32_t generic_crc32(const uint8_t *buf, size_t bufsize,
            uint32_t poly, uint32_t init, bool reflectIn, bool reflectOut, uint32_t xorOut)
{
    uint32_t crc = init;

    if (reflectIn) {
        // In reflected mode, use the reversed polynomial.
        uint32_t rpoly = reverse32(poly);
        for (unsigned int i = 0; i < bufsize; ++i) {
            // For reflected algorithms, process the byte as is.
            crc ^= (uint32_t)buf[i];
            for (int j = 0; j < 8; ++j) {
                if (crc & 1)
                    crc = (crc >> 1) ^ rpoly;
                else
                    crc >>= 1;
            }
        }
        // In this common scenario, reflectOut=true means the final CRC is already
        // in the proper bit order.
        if (!reflectOut)
            crc = reverse32(crc);
    }
    else {
        // Non-reflected mode: XOR the byte into the high 8 bits.
        for (unsigned int i = 0; i < bufsize; ++i) {
            crc ^= ((uint32_t)buf[i]) << 24;
            for (int j = 0; j < 8; ++j) {
                if (crc & 0x80000000UL)
                    crc = (crc << 1) ^ poly;
                else
                    crc <<= 1;
            }
        }
        if (reflectOut)
            crc = reverse32(crc);
    }
    return crc ^ xorOut;
}

uint16_t generic_crc16(const uint8_t *buf, size_t bufsize,
            uint16_t poly, uint16_t init, bool reflectIn, bool reflectOut, uint16_t xorOut)
{
    uint16_t crc = init;

    if (reflectIn) {
        // For reflected mode, reverse the polynomial.
        uint16_t rpoly = reverse16(poly);
        for (unsigned int i = 0; i < bufsize; ++i) {
            // In reflected mode, process the input byte as is.
            crc ^= (uint16_t)buf[i];
            for (int j = 0; j < 8; ++j) {
                if (crc & 1)
                    crc = (crc >> 1) ^ rpoly;
                else
                    crc >>= 1;
            }
        }
        // When using reflected mode, if reflectOut is false then we reverse the final result.
        if (!reflectOut)
            crc = reverse16(crc);
    }
    else {
        // Non-reflected mode: XOR the input byte into the upper 8 bits.
        for (unsigned int i = 0; i < bufsize; ++i) {
            crc ^= ((uint16_t)buf[i]) << 8;
            for (int j = 0; j < 8; ++j) {
                if (crc & 0x8000U)
                    crc = (crc << 1) ^ poly;
                else
                    crc <<= 1;
            }
        }
        if (reflectOut)
            crc = reverse16(crc);
    }

    return crc ^ xorOut;
}

uint8_t generic_crc8(const uint8_t *buf, size_t bufsize,
            uint8_t poly, uint8_t init, bool reflectIn, bool reflectOut, uint8_t xorOut)
{
    uint8_t crc = init;

    if (reflectIn) {
        // Use the reversed polynomial for reflected mode.
        uint8_t rpoly = reverse8(poly);
        for (unsigned int i = 0; i < bufsize; ++i) {
            // In reflected mode, process the byte as is.
            crc ^= buf[i];
            for (int j = 0; j < 8; ++j) {
                if (crc & 1)
                    crc = (crc >> 1) ^ rpoly;
                else
                    crc >>= 1;
            }
        }
        // If reflectOut is false, reverse the final CRC.
        if (!reflectOut)
            crc = reverse8(crc);
    }
    else {
        // Non-reflected mode: The byte is XORed directly (shift by 0) and the CRC is shifted left.
        for (unsigned int i = 0; i < bufsize; ++i) {
            crc ^= buf[i];
            for (int j = 0; j < 8; ++j) {
                if (crc & 0x80)  // Check the most-significant bit (0x80 for 8-bit).
                    crc = (crc << 1) ^ poly;
                else
                    crc <<= 1;
            }
        }
        // If reflectOut is true, reverse the final CRC.
        if (reflectOut)
            crc = reverse8(crc);
    }

    return crc ^ xorOut;
}

} // namespace inet
