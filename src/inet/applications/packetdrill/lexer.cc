#line 2 "lexer.cc"

#line 4 "lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 137
#define YY_END_OF_BUFFER 138
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[950] =
    {   0,
        0,    0,  138,  131,  132,  131,  131,  131,  131,  131,
      126,  126,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  131,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  132,    0,  129,    0,    0,    0,    0,
      126,    0,  125,    0,    0,  126,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,   12,    0,    0,  130,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,   53,
      128,  128,  128,  128,  128,   54,  128,  128,  128,  128,

      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,    0,  129,    0,    0,  124,  123,    0,    0,
        0,  133,  127,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,    0,    0,  130,  128,    5,  128,  128,  128,    7,
        6,  128,  128,  128,  128,  128,   50,    8,    9,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,   56,
      128,  128,  128,  128,   57,  128,   51,   55,  128,    1,
       13,   16,  128,    0,  134,  128,  128,  128,  128,   20,
      128,  128,  128,   21,  128,   45,   46,  128,  128,   23,

      128,  128,  128,  128,  128,  128,  128,   61,   49,   60,
      128,  128,  128,  128,   58,  128,  128,  128,  128,  128,
       10,  128,  128,   18,  128,  118,  128,  128,  128,  128,
      128,  128,  128,   48,  128,    0,   26,  128,  128,   19,
      128,   29,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,   15,   14,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,   47,  128,
        0,  128,  128,  128,  128,  128,  128,  128,  128,  128,

      128,  128,  128,  128,   52,  128,  128,  128,  128,  128,
      128,  115,  128,  122,  128,   11,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,   17,    0,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,   59,
      128,  128,  128,  128,  116,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,

      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
        0,    0,  128,  128,  128,  128,  128,  128,   22,  128,
      128,   37,   27,  128,  128,  128,   73,  128,  128,  117,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,    4,    3,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,   81,  128,  128,  128,  128,  128,  128,  128,  128,
      128,   66,   67,  128,  128,  128,  128,  128,  128,  128,
      128,  128,    0,    0,  128,  128,  128,  128,   24,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  114,  128,

      128,    2,  128,  128,   64,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,   83,  128,  128,   88,  128,  128,  128,  128,   79,
      128,  128,  128,  128,  102,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,    0,    0,  128,
      128,   31,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,   63,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,   85,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,

      128,  128,  128,  128,   94,  128,  128,    0,    0,  128,
      128,   30,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,   72,  128,  128,  128,  128,  112,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,   84,  128,  128,  128,  128,  128,  128,   75,  128,
      128,  128,  128,   78,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,   93,  128,    0,    0,  128,  128,
      128,  128,  128,  128,  128,  128,   28,  128,  128,   33,
      128,  128,  128,  128,  128,  111,  113,  128,  128,  128,
      128,  128,  128,  128,  128,  128,   89,  128,   82,  128,

      128,  128,  128,   74,  128,  128,  128,  101,  128,  128,
       65,  128,  128,  128,  128,  128,  128,  128,    0,    0,
        0,  128,  128,   25,  128,  128,  128,  128,  128,  128,
       40,  128,  128,  128,  128,   62,  128,  128,  128,  128,
      128,  128,  128,  128,   86,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,   97,  128,
      128,  100,  128,    0,    0,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  105,  128,
      128,  128,  128,  128,   90,   91,  128,  128,  128,  128,
      128,   76,  128,   77,  128,  128,   92,  128,   98,   96,

      128,    0,    0,    0,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      108,  119,  128,  128,  128,  128,  128,  128,  128,  104,
      128,   95,    0,    0,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  106,  128,  109,  128,
       87,  128,  128,  128,  128,  128,  128,  128,    0,    0,
      128,  128,  128,  128,  128,  128,   44,   32,  128,  128,
      128,  120,  110,  128,  128,  128,  128,  128,  128,  128,
      128,    0,  136,  128,  128,  128,   39,  128,   38,  128,
      128,  128,  128,   70,  128,  128,   68,   80,  103,  128,

        0,  128,  128,  128,  128,  128,  128,  128,  128,  128,
       69,  128,  135,   42,   41,  128,  128,  128,   35,  128,
      128,   71,  128,   34,  128,  128,  121,  128,  128,  128,
      128,  128,  128,  128,   36,  128,  128,  128,  128,  128,
       43,  128,   99,  128,  128,  128,  128,  107,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    1,    1,    1,    1,
        1,    7,    1,    1,    8,    9,   10,   11,   12,   12,
       12,   13,   12,   14,   12,   12,   12,    1,    1,    1,
        1,    1,    1,    1,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       24,   31,   32,   33,   34,   35,   36,   37,   38,   24,
        1,   39,    1,    1,   40,   41,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   24,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   24,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[66] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    1,    3,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3
    } ;

static yyconst flex_uint16_t yy_base[960] =
    {   0,
        0,    0, 1951, 1952,   64,   64, 1900,   62,   68,   76,
       76,   82,   83, 1940,   75,   63,   89,   91,   93,   96,
       97,  100,   99,   72,   98,  103,  105,  108,  109,  116,
      110,  115,  126,  117,  118,  119,  127,  134,  140,  135,
      120,  139,  138,  151,  132, 1952,  136, 1901,    0,  190,
      196, 1938,  200, 1939, 1942,  206, 1935,  212,  158,  141,
      151,  207,  213,  229,  136,  226,  180,  230,  224,  228,
      231,  225,  147,  238, 1934,  152,  241, 1952,  137,  197,
      241,  242,  243,  253,  255,  257,  258,  260,  262, 1933,
      261,  263,  264,  265,  266, 1932,  268,  269,  272,  267,

      270,  280,  274,  276,  278,  281,  279,  283,  284,  285,
      287,  300,  317,  337,  340, 1895,    0, 1952, 1932, 1928,
     1934, 1952,    0,  275,  337,  282,  277,  288,  338,  339,
      340,  341,  289,  344,  342,  343,  346,  345,  350,  351,
      352,  323,  362,  327,  364, 1927,  366,  371,  372, 1926,
     1925,  374,  376,  378,  377,  379, 1924, 1923, 1922,  380,
      383,  384,  382,  385,  387,  389,  396,  386,  393,  388,
      403,  404,  405,  397, 1921,  406, 1920, 1919,  408, 1918,
     1917, 1916,  407, 1878, 1952,  391,  446,  395,  447, 1914,
      398,  448,  399,  449,  450, 1913, 1912,  390,  451, 1911,

      400,  452,  453,  454,  455,  456,  457, 1910, 1909, 1908,
      459,  458,  462,  464, 1907,  465,  468,  473,  469,  477,
      483,  478,  481, 1906,  484, 1905,  482,  471,  475,  487,
      497,  505,  486,  488,  479, 1866, 1903,  494,  507, 1902,
      485, 1901,  492,  531,  490,  539,  540,  533,  541,  543,
      546,  548,  549,  550,  551, 1900, 1899,  555,  552,  556,
      557,  559,  558,  560,  562,  563,  564,  565,  567,  568,
      576,  569,  573,  571,  582,  583,  580,  572,  578,  589,
      584,  586,  574,  590,  575,  587,  591,  594, 1898,  592,
     1902,  626,  628,  636,  637,  639,  640,  641,  642,  643,

      644,  645,  646,  649, 1896,  651,  653,  655,  656,  659,
      660, 1895,  662, 1894,  668, 1893,  663,  665,  666,  669,
      670,  672,  679,  674,  675,  676,  683,  684,  681,  677,
      696,  699,  694,  685,  686,  689,  703,  700,  693,  695,
      708,  710, 1892,  734,  746,  752,  755,  593,  758,  747,
      750,  767,  771,  682,  753,  768,  678,  769,  773, 1891,
      774,  775,  776,  777, 1890,  778,  782,  785,  786,  787,
      789,  791,  792,  790,  793,  794,  797,  798,  795,  796,
      799,  802,  807,  804,  808,  811,  812,  803,  813,  814,
      809,  818,  819,  824,  825,  817,  827,  801,  800,  830,

      815,  831,  838,  867,  868,  869,  873,  872,  874,  875,
      855,  861,  878,  880,  881,  882,  883,  884, 1889,  885,
      886,  887,  892,  897,  891,  893, 1888,  894,  895, 1887,
      898,  899,  901,  903,  906,  912,  924,  909,  914,  927,
      928,  929,  931,  932,  933, 1886, 1885,  934,  935,  938,
      943,  940,  941,  942,  945,  946,  947,  948,  951,  952,
      950, 1884,  954,  955,  962,  953,  956,  961,  963,  966,
      967, 1883, 1882,  971,  968,  978,  979,  986,  983,  988,
      996, 1002,  988,  989, 1005, 1009, 1010, 1007, 1012, 1013,
     1014, 1016, 1015, 1040, 1017, 1041, 1022, 1032, 1881, 1042,

     1044, 1880, 1045, 1047, 1879, 1050, 1049, 1051, 1052, 1055,
     1054, 1058, 1056, 1059, 1060, 1061, 1062, 1063, 1065, 1066,
     1064, 1878, 1068, 1069, 1877, 1067, 1078, 1070, 1079, 1876,
     1074, 1083, 1085, 1088, 1875, 1075, 1072, 1071, 1076, 1086,
     1077, 1082, 1094, 1095, 1097, 1092, 1099, 1113, 1116, 1127,
     1129, 1874, 1131, 1135, 1137, 1140, 1138, 1142, 1147, 1144,
     1145, 1156, 1157, 1154, 1158, 1159, 1166, 1873, 1165, 1169,
     1171, 1172, 1173, 1176, 1175, 1174, 1178, 1177, 1179, 1183,
     1180, 1181, 1872, 1188, 1189, 1182, 1193, 1186, 1185, 1184,
     1187, 1194, 1190, 1192, 1198, 1207, 1210, 1213, 1205, 1199,

     1200, 1201, 1212, 1223, 1871, 1224, 1227, 1195, 1223, 1242,
     1250, 1870, 1251, 1253, 1257, 1255, 1258, 1260, 1263, 1264,
     1268, 1270, 1195, 1266, 1869, 1267, 1271, 1273, 1275, 1868,
     1281, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292,
     1295, 1867, 1293, 1297, 1296, 1298, 1299, 1300, 1866, 1303,
     1301, 1302, 1306, 1865, 1307, 1308, 1309, 1310, 1315, 1319,
     1313, 1312, 1327, 1320, 1864, 1328, 1282, 1866, 1334, 1335,
     1329, 1351, 1359, 1324, 1363, 1367, 1862, 1368, 1371, 1861,
     1370, 1372, 1333, 1325, 1373, 1860, 1859, 1374, 1375, 1377,
     1378, 1380, 1381, 1382, 1383, 1385, 1858, 1386, 1857, 1391,

     1392, 1398, 1393, 1856, 1384, 1397, 1399, 1855, 1401, 1400,
     1854, 1404, 1402, 1403, 1405, 1406, 1407, 1413, 1401, 1856,
     1815, 1419, 1432, 1851, 1420, 1428, 1412, 1456, 1459, 1414,
     1850, 1458, 1415, 1460, 1461, 1849, 1418, 1426, 1421, 1422,
     1423, 1465, 1466, 1468, 1848, 1469, 1471, 1472, 1473, 1474,
     1477, 1475, 1484, 1481, 1482, 1483, 1485, 1486, 1847, 1488,
     1487, 1846, 1489, 1848, 1799, 1490, 1493, 1497, 1495, 1498,
     1501, 1494, 1534, 1535, 1496, 1499, 1500, 1502, 1843, 1507,
     1508, 1522, 1503, 1523, 1842, 1814, 1528, 1530, 1536, 1541,
     1542, 1813, 1543, 1812, 1546, 1547, 1811, 1552, 1808, 1805,

     1554, 1807, 1766, 1766, 1550, 1555, 1560, 1561, 1556, 1563,
     1565, 1558, 1566, 1569, 1562, 1564, 1571, 1573, 1580, 1575,
     1800, 1799, 1591, 1593, 1594, 1595, 1596, 1597, 1600, 1798,
     1599, 1795, 1749, 1752, 1605, 1607, 1602, 1609, 1601, 1620,
     1624, 1625, 1603, 1604, 1606, 1621, 1792, 1623, 1791, 1627,
     1789, 1636, 1637, 1638, 1639, 1642, 1641, 1643, 1750, 1747,
     1646, 1647, 1644, 1648, 1649, 1651, 1782, 1781, 1657, 1654,
     1656, 1780, 1778, 1658, 1661, 1662, 1663, 1664, 1665, 1667,
     1669, 1733, 1952, 1673, 1677, 1680, 1773, 1681, 1772, 1686,
     1682, 1670, 1690, 1771, 1692, 1696, 1770, 1769, 1768, 1697,

     1729, 1698, 1699, 1704, 1709, 1702, 1705, 1712, 1713, 1716,
     1766, 1718, 1952,  816,  687, 1719, 1720, 1723,  680, 1725,
     1727,  598, 1732,  596, 1730, 1735,  595, 1736, 1737, 1739,
     1740, 1743, 1747, 1748,  498, 1751, 1752, 1754, 1757, 1755,
      416, 1759,  401, 1760, 1761, 1764, 1765,  292, 1952, 1824,
     1826, 1829, 1832,  189, 1835, 1838, 1841, 1844, 1847
    } ;

static yyconst flex_int16_t yy_def[960] =
    {   0,
      949,    1,  949,  949,  949,  950,  949,  949,  949,  949,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  952,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  949,  950,  949,  953,  949,  954,  949,
      949,  949,  949,  955,  956,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  952,  957,  949,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,

      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  950,  950,  953,  949,  954,  949,  955,  955,
      956,  949,   58,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  952,  957,  952,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  949,  949,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,

      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  949,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      949,  951,  951,  951,  951,  951,  951,  951,  951,  951,

      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  949,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,

      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      949,  949,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  949,  949,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,

      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  949,  949,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,

      951,  951,  951,  951,  951,  951,  951,  949,  949,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  949,  958,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,

      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  949,  958,
      958,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  959,  958,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,

      951,  959,  959,  958,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  959,  958,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  959,  958,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  959,  949,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,

      959,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  949,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,    0,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949
    } ;

static yyconst flex_uint16_t yy_nxt[2018] =
    {   0,
        4,    5,    5,    5,    6,    7,    4,    8,    9,   10,
       11,   12,   12,   12,   13,   14,   15,   16,   17,   14,
       14,   18,   19,   14,   14,   14,   14,   14,   20,   14,
       21,   22,   23,   14,   14,   14,   14,   14,    4,   14,
       24,   25,   14,   26,   27,   28,   29,   30,   31,   32,
       14,   33,   34,   35,   36,   37,   14,   38,   39,   40,
       41,   42,   43,   14,   14,   44,   44,   44,   46,   49,
       50,  949,   51,   51,   51,   51,   52,   63,   53,   53,
       53,   53,   54,  949,   50,   55,   56,   56,   56,   56,
       50,  949,   56,   56,   56,   56,   61,  949,   59,  949,

       60,  949,   47,   62,  949,  949,  949,  949,  949,   65,
       77,  949,   78,  949,   70,   69,  949,  949,  949,   64,
       66,   71,   67,  949,  949,  949,  949,  949,  949,   68,
       75,   72,   73,   74,  949,  949,   46,   79,   45,   58,
      114,   80,  949,  949,  949,  949,  949,  949,  949,  949,
      130,   84,   44,   44,   44,  949,   81,   87,  125,  949,
       86,  140,   85,   82,  109,   83,  949,   91,   89,   88,
       47,   92,   94,   90,  115,   93,  106,   96,   95,   98,
      110,   99,   97,  100,  126,  101,  124,  111,  949,  102,
       77,  117,   78,  107,  145,  103,  112,  104,  105,  108,

       53,   53,   53,   53,   50,  949,   51,   51,   51,   51,
       53,   53,   53,   53,   50,  949,   56,   56,   56,   56,
      949,  949,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  949,  949,  949,  127,  949,  949,  949,  949,
      136,  134,  131,   76,  137,  128,  949,  146,  132,  949,
      949,  949,  139,  123,  123,  123,  123,  123,  123,  129,
      133,  949,  135,  949,  138,  949,  949,  141,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  143,
      949,  144,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  148,  949,  949,  949,  149,  147,

      949,  189,  190,  195,  152,  186,  151,  155,  949,  188,
      150,  165,  162,  153,  154,  166,  157,  161,  160,  156,
      159,   46,  158,  169,  170,  163,  168,  164,  177,  172,
      167,  175,  178,  171,  173,  174,  181,  176,  179,  180,
      182,   46,   45,  183,  114,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,   47,  196,  197,  949,  949,
      949,   77,  198,   78,   76,   77,  191,   78,  193,  192,
      200,  199,  949,  194,  949,   47,  187,  201,  115,  949,
      949,  204,  949,  203,  949,  949,  949,  949,  949,  202,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,

      143,  949,  144,  949,  949,  949,  949,  949,  949,  949,
      207,  949,  949,  949,  949,  949,  949,  249,  247,  240,
      206,  217,  214,  237,  949,  244,  205,  215,  242,  216,
      208,  211,  209,  220,  210,  222,  212,  225,  213,  221,
      218,  224,  227,  230,  231,  219,  226,  233,  235,  228,
      223,  232,  229,  234,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  238,  241,
      949,  251,  949,  949,  239,  246,  949,  949,  248,  949,
      243,  949,  252,  949,  250,  949,  949,  949,  245,  949,
      949,  949,  949,  949,  949,  949,  949,  258,  949,  254,

      949,  259,  949,  294,  297,  949,  949,  295,  253,  260,
      256,  266,  263,  949,  261,  949,  255,  257,  265,  268,
      264,  292,  267,  273,  271,  275,  262,  269,  277,  272,
      290,  278,  270,  279,  276,  280,  281,  274,  283,  949,
      293,  949,  282,  284,  287,  288,  289,  949,  949,  949,
      285,  949,  300,  296,  949,  286,  949,  949,  949,  949,
      949,  298,  299,  949,  949,  949,  949,  949,  949,  301,
      949,  949,  949,  949,  302,  949,  949,  949,  304,  949,
      949,  949,  949,  949,  949,  303,  949,  316,  949,  306,
      949,  949,  949,  305,  949,  949,  308,  949,  949,  949,

      949,  949,  949,  949,  949,  317,  949,  417,  318,  307,
      319,  309,  312,  310,  315,  323,  313,  325,  311,  314,
      321,  327,  328,  320,  329,  326,  324,  335,  322,  332,
      331,  333,  336,  342,  949,  338,  949,  343,  330,  334,
      340,  337,  345,  341,  949,  949,  339,  949,  949,  949,
      949,  949,  949,  949,  949,  348,  350,  949,  351,  949,
      346,  949,  356,  949,  949,  353,  349,  949,  949,  352,
      949,  949,  355,  949,  949,  347,  949,  949,  949,  354,
      949,  357,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  426,  949,  363,  361,

      358,  949,  949,  949,  949,  364,  360,  949,  949,  423,
      368,  949,  359,  378,  362,  365,  949,  366,  949,  379,
      373,  367,  374,  369,  381,  389,  382,  370,  371,  383,
      375,  372,  376,  380,  377,  390,  387,  388,  384,  391,
      392,  385,  386,  393,  397,  395,  394,  396,  400,  401,
      399,  403,  398,  411,  949,  949,  404,  402,  949,  405,
      949,  949,  412,  949,  406,  407,  949,  408,  409,  415,
      410,  419,  414,  416,  413,  949,  949,  949,  418,  949,
      411,  949,  949,  949,  949,  949,  949,  421,  412,  420,
      949,  422,  424,  949,  949,  949,  425,  949,  949,  949,

      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  427,  428,  949,  949,  949,  429,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  430,  433,
      431,  436,  949,  949,  432,  949,  435,  465,  949,  949,
      434,  437,  444,  469,  441,  470,  949,  442,  438,  439,
      440,  445,  446,  458,  443,  447,  449,  448,  451,  452,
      456,  453,  450,  459,  462,  463,  454,  455,  461,  457,
      460,  467,  464,  466,  468,  949,  949,  949,  472,  471,
      949,  949,  949,  949,  473,  483,  949,  484,  949,  949,
      949,  949,  949,  949,  949,  949,  474,  487,  488,  949,

      949,  949,  949,  949,  485,  949,  949,  949,  486,  949,
      497,  949,  483,  484,  949,  489,  491,  949,  478,  496,
      949,  476,  949,  490,  475,  492,  493,  495,  482,  477,
      479,  494,  949,  481,  480,  949,  949,  949,  501,  949,
      949,  949,  949,  949,  500,  498,  949,  504,  949,  949,
      949,  949,  499,  949,  949,  949,  949,  503,  949,  949,
      949,  949,  949,  949,  949,  502,  507,  506,  505,  949,
      949,  949,  512,  508,  949,  949,  949,  514,  515,  949,
      521,  509,  511,  513,  519,  510,  949,  949,  517,  520,
      518,  949,  516,  529,  949,  522,  949,  528,  524,  534,

      525,  532,  523,  527,  949,  533,  548,  537,  536,  540,
      949,  526,  530,  949,  531,  949,  549,  949,  949,  535,
      949,  949,  949,  949,  949,  949,  538,  550,  553,  539,
      949,  551,  544,  548,  552,  561,  541,  546,  542,  543,
      949,  545,  549,  547,  555,  558,  556,  557,  949,  949,
      949,  554,  949,  949,  559,  949,  560,  949,  949,  949,
      949,  563,  949,  949,  949,  562,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  565,  949,  949,  949,  949,  949,  949,  567,  569,
      949,  949,  564,  949,  949,  572,  949,  566,  576,  575,

      949,  570,  949,  949,  574,  949,  587,  949,  571,  573,
      583,  568,  582,  585,  586,  579,  577,  588,  590,  591,
      598,  580,  581,  578,  597,  584,  593,  595,  589,  592,
      599,  608,  596,  600,  609,  949,  601,  949,  603,  949,
      602,  605,  607,  949,  594,  949,  949,  604,  949,  613,
      949,  606,  949,  949,  610,  949,  611,  614,  608,  612,
      618,  609,  949,  619,  949,  949,  949,  949,  615,  617,
      616,  623,  620,  949,  949,  624,  621,  949,  622,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  625,

      949,  949,  949,  949,  627,  628,  949,  949,  949,  949,
      667,  626,  681,  949,  629,  949,  633,  637,  949,  636,
      949,  949,  639,  631,  632,  634,  635,  630,  640,  643,
      644,  949,  949,  650,  646,  949,  638,  667,  641,  642,
      648,  645,  647,  649,  651,  652,  656,  655,  659,  657,
      949,  660,  654,  653,  658,  668,  663,  661,  949,  949,
      662,  949,  669,  949,  664,  949,  949,  671,  949,  665,
      670,  949,  949,  674,  949,  949,  949,  666,  949,  949,
      672,  949,  668,  949,  673,  675,  679,  677,  680,  949,
      678,  676,  949,  949,  949,  949,  949,  949,  949,  949,

      949,  949,  682,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  683,  719,  949,  949,  949,  949,  949,  686,
      949,  949,  685,  949,  689,  688,  691,  949,  949,  694,
      695,  690,  949,  949,  684,  949,  949,  949,  727,  687,
      719,  949,  949,  949,  698,  692,  693,  704,  697,  699,
      700,  708,  702,  724,  712,  696,  706,  701,  703,  949,
      710,  711,  705,  707,  713,  714,  709,  949,  716,  715,
      725,  949,  718,  722,  723,  949,  949,  717,  949,  949,
      949,  949,  949,  949,  735,  949,  949,  732,  949,  949,
      949,  949,  949,  949,  949,  734,  729,  730,  726,  949,

      949,  949,  728,  731,  733,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  739,  736,  764,  741,
      949,  949,  949,  949,  738,  752,  949,  949,  949,  949,
      949,  949,  744,  775,  949,  740,  949,  737,  770,  773,
      949,  743,  747,  742,  745,  764,  746,  749,  768,  756,
      766,  748,  751,  757,  763,  758,  750,  760,  769,  753,
      755,  759,  754,  767,  949,  761,  949,  949,  949,  949,
      779,  762,  780,  949,  949,  778,  949,  949,  782,  949,
      949,  949,  949,  949,  781,  949,  771,  772,  774,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  776,

      777,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  785,  808,  786,  949,  949,  788,  783,  810,
      787,  811,  805,  814,  784,  806,  792,  807,  800,  797,
      949,  949,  789,  790,  791,  793,  949,  809,  949,  795,
      794,  796,  949,  949,  949,  798,  799,  821,  801,  949,
      949,  949,  812,  813,  949,  949,  818,  815,  949,  816,
      949,  819,  949,  949,  949,  817,  949,  820,  949,  949,
      949,  949,  949,  949,  949,  825,  822,  949,  839,  949,
      835,  949,  824,  949,  828,  836,  837,  827,  949,  823,
      842,  829,  838,  831,  840,  832,  841,  843,  826,  949,

      844,  949,  949,  949,  949,  949,  830,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  863,  949,  865,  848,
      850,  845,  846,  861,  849,  862,  870,  864,  949,  949,
      847,  949,  949,  949,  869,  949,  851,  855,  866,  856,
      854,  857,  867,  868,  949,  949,  949,  949,  852,  949,
      949,  949,  949,  853,  949,  949,  949,  949,  858,  949,
      884,  885,  949,  871,  949,  949,  949,  888,  873,  949,
      949,  949,  949,  949,  872,  949,  886,  949,  949,  877,
      887,  949,  891,  889,  874,  949,  876,  879,  949,  949,
      949,  878,  881,  880,  949,  875,  890,  893,  949,  902,

      949,  892,  904,  903,  949,  949,  949,  949,  905,  907,
      949,  908,  949,  949,  895,  896,  898,  949,  906,  894,
      949,  949,  897,  900,  949,  899,  949,  949,  949,  914,
      915,  949,  916,  949,  909,  949,  919,  910,  949,  918,
      949,  917,  925,  949,  949,  949,  924,  949,  949,  930,
      912,  949,  926,  931,  911,  949,  949,  923,  921,  949,
      949,  934,  949,  949,  920,  949,  938,  949,  949,  949,
      922,  935,  949,  949,  949,  913,  949,  949,  949,  949,
      949,  949,  901,  927,  941,  928,  949,  929,  949,  949,
      949,  933,  936,  883,  882,  932,  937,  949,  942,  949,

      949,  860,  859,  949,  939,  940,  949,  949,  949,  945,
      834,  833,  803,  949,  943,  946,  949,  947,  944,  949,
      949,  949,  949,  948,   45,   45,   45,   57,   57,   76,
       76,   76,  113,  113,  113,  119,  119,  119,  121,  121,
      121,  142,  142,  142,  720,  720,  720,  802,  802,  802,
      949,  949,  804,  803,  949,  949,  949,  949,  949,  949,
      765,  721,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  721,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,

      949,  949,  949,  949,  949,  344,  949,  949,  949,  949,
      949,  949,  291,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  236,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  122,  185,  120,  184,
      949,  949,  949,  949,  122,  120,  118,  116,  949,   48,
      949,    3,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,

      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949
    } ;

static yyconst flex_int16_t yy_chk[2018] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    5,    5,    5,    6,    8,
        8,   16,    8,    8,    8,    8,    9,   16,    9,    9,
        9,    9,   10,   15,   11,   10,   11,   11,   11,   11,
       12,   13,   12,   12,   12,   12,   15,   17,   13,   18,

       13,   19,    6,   15,   20,   21,   25,   23,   22,   18,
       24,   26,   24,   27,   22,   21,   28,   29,   31,   17,
       19,   22,   19,   32,   30,   34,   35,   36,   41,   20,
       23,   22,   22,   22,   33,   37,   45,   25,   47,   11,
       47,   25,   38,   40,   65,   79,   43,   42,   39,   60,
       65,   28,   44,   44,   44,   73,   25,   30,   60,   61,
       29,   73,   28,   26,   41,   27,   59,   33,   32,   31,
       45,   33,   35,   32,   47,   34,   40,   36,   35,   38,
       42,   39,   37,   39,   61,   39,   59,   43,   67,   39,
       76,  954,   76,   40,   79,   39,   43,   39,   39,   40,

       50,   50,   50,   50,   51,   80,   51,   51,   51,   51,
       53,   53,   53,   53,   56,   62,   56,   56,   56,   56,
       58,   63,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   69,   72,   66,   62,   70,   64,   68,   71,
       69,   67,   66,   77,   70,   63,   74,   80,   66,   81,
       82,   83,   72,   58,   58,   58,   58,   58,   58,   64,
       66,   84,   68,   85,   71,   86,   87,   74,   88,   91,
       89,   92,   93,   94,   95,  100,   97,   98,  101,   77,
       99,   77,  103,  124,  104,  127,  105,  107,  102,  106,
      126,  108,  109,  110,   82,  111,  128,  133,   83,   81,

      948,  127,  128,  133,   86,  124,   85,   89,  112,  126,
       84,   99,   98,   87,   88,   99,   92,   97,   95,   91,
       94,  113,   93,  101,  102,   98,  100,   98,  106,  103,
       99,  105,  107,  102,  104,  104,  110,  105,  108,  109,
      111,  114,  115,  112,  115,  125,  129,  130,  131,  132,
      135,  136,  134,  138,  137,  113,  134,  134,  139,  140,
      141,  142,  135,  142,  143,  144,  129,  144,  131,  130,
      137,  136,  145,  132,  147,  114,  125,  138,  115,  148,
      149,  141,  152,  140,  153,  155,  154,  156,  160,  139,
      163,  161,  162,  164,  168,  165,  170,  166,  198,  186,

      143,  169,  143,  188,  167,  174,  191,  193,  201,  943,
      148,  171,  172,  173,  176,  183,  179,  201,  198,  188,
      147,  163,  160,  186,  941,  193,  145,  161,  191,  162,
      149,  154,  152,  165,  153,  167,  155,  169,  156,  166,
      164,  168,  171,  172,  173,  164,  170,  176,  183,  171,
      167,  174,  171,  179,  187,  189,  192,  194,  195,  199,
      202,  203,  204,  205,  206,  207,  212,  211,  187,  189,
      213,  203,  214,  216,  187,  195,  217,  219,  199,  228,
      192,  218,  204,  229,  202,  220,  222,  235,  194,  223,
      227,  221,  225,  241,  233,  230,  234,  212,  245,  206,

      243,  213,  238,  241,  245,  231,  935,  243,  205,  214,
      211,  221,  218,  232,  216,  239,  207,  211,  220,  222,
      219,  238,  221,  227,  223,  228,  217,  222,  230,  225,
      235,  230,  222,  230,  229,  230,  230,  227,  231,  244,
      239,  248,  230,  231,  232,  233,  234,  246,  247,  249,
      231,  250,  248,  244,  251,  231,  252,  253,  254,  255,
      259,  246,  247,  258,  260,  261,  263,  262,  264,  249,
      265,  266,  267,  268,  250,  269,  270,  272,  252,  274,
      278,  273,  283,  285,  271,  251,  279,  266,  277,  254,
      275,  276,  281,  253,  282,  286,  258,  280,  284,  287,

      290,  348,  288,  927,  924,  267,  922,  348,  267,  255,
      267,  259,  262,  260,  265,  271,  263,  273,  261,  264,
      269,  275,  276,  268,  277,  274,  272,  282,  270,  279,
      278,  280,  283,  288,  292,  285,  293,  290,  277,  281,
      287,  284,  292,  287,  294,  295,  286,  296,  297,  298,
      299,  300,  301,  302,  303,  295,  297,  304,  298,  306,
      293,  307,  303,  308,  309,  300,  296,  310,  311,  299,
      313,  317,  302,  318,  319,  294,  315,  320,  321,  301,
      322,  304,  324,  325,  326,  330,  357,  323,  919,  329,
      354,  327,  328,  334,  335,  915,  357,  336,  310,  308,

      306,  339,  333,  340,  331,  311,  307,  332,  338,  354,
      318,  337,  306,  324,  309,  313,  341,  315,  342,  325,
      323,  317,  323,  319,  327,  329,  327,  320,  321,  327,
      323,  322,  323,  326,  323,  330,  328,  328,  327,  331,
      332,  327,  327,  333,  337,  335,  334,  336,  340,  341,
      339,  342,  338,  344,  345,  350,  342,  341,  351,  342,
      346,  355,  344,  347,  342,  342,  349,  342,  342,  347,
      342,  350,  346,  347,  345,  352,  356,  358,  349,  353,
      344,  359,  361,  362,  363,  364,  366,  352,  344,  351,
      367,  353,  355,  368,  369,  370,  356,  371,  374,  372,

      373,  375,  376,  379,  380,  377,  378,  381,  399,  398,
      382,  388,  384,  358,  359,  383,  385,  391,  361,  386,
      387,  389,  390,  401,  914,  396,  392,  393,  362,  366,
      363,  369,  394,  395,  364,  397,  368,  394,  400,  402,
      367,  370,  377,  398,  374,  399,  403,  375,  371,  372,
      373,  378,  379,  387,  376,  380,  382,  381,  383,  384,
      386,  384,  382,  388,  391,  392,  385,  385,  390,  386,
      389,  396,  393,  395,  397,  404,  405,  406,  401,  400,
      408,  407,  409,  410,  402,  411,  413,  412,  414,  415,
      416,  417,  418,  420,  421,  422,  403,  415,  416,  425,

      423,  426,  428,  429,  413,  424,  431,  432,  414,  433,
      426,  434,  411,  412,  435,  417,  420,  438,  407,  425,
      436,  405,  439,  418,  404,  421,  422,  424,  410,  406,
      407,  423,  437,  409,  408,  440,  441,  442,  432,  443,
      444,  445,  448,  449,  431,  428,  450,  435,  452,  453,
      454,  451,  429,  455,  456,  457,  458,  434,  461,  459,
      460,  466,  463,  464,  467,  433,  438,  437,  436,  468,
      465,  469,  442,  439,  470,  471,  475,  444,  445,  474,
      453,  440,  441,  443,  451,  440,  476,  477,  449,  452,
      450,  479,  448,  461,  478,  454,  480,  460,  456,  467,

      457,  465,  455,  459,  481,  466,  483,  470,  469,  475,
      482,  458,  463,  485,  464,  488,  484,  486,  487,  468,
      489,  490,  491,  493,  492,  495,  471,  485,  488,  474,
      497,  486,  479,  483,  487,  495,  476,  481,  477,  478,
      498,  480,  484,  482,  490,  493,  491,  492,  494,  496,
      500,  489,  501,  503,  494,  504,  494,  507,  506,  508,
      509,  497,  511,  510,  513,  496,  512,  514,  515,  516,
      517,  518,  521,  519,  520,  526,  523,  524,  528,  538,
      537,  500,  531,  536,  539,  541,  527,  529,  503,  506,
      542,  532,  498,  533,  540,  509,  534,  501,  513,  512,

      546,  507,  543,  544,  511,  545,  526,  547,  508,  510,
      520,  504,  519,  523,  524,  516,  514,  527,  529,  531,
      538,  517,  518,  515,  537,  521,  533,  534,  528,  532,
      539,  548,  536,  540,  549,  550,  541,  551,  543,  553,
      542,  545,  547,  554,  533,  555,  557,  544,  556,  554,
      558,  546,  560,  561,  550,  559,  551,  554,  548,  553,
      558,  549,  564,  559,  562,  563,  565,  566,  555,  557,
      556,  563,  560,  569,  567,  563,  561,  570,  562,  571,
      572,  573,  576,  575,  574,  578,  577,  579,  581,  582,
      586,  580,  590,  589,  588,  591,  584,  585,  593,  564,

      594,  587,  592,  623,  566,  567,  595,  600,  601,  602,
      608,  565,  623,  599,  569,  596,  573,  577,  597,  576,
      603,  598,  579,  571,  572,  574,  575,  570,  580,  584,
      585,  604,  606,  590,  587,  607,  578,  608,  581,  582,
      588,  586,  587,  589,  591,  592,  596,  595,  599,  597,
      610,  600,  594,  593,  598,  609,  603,  601,  611,  613,
      602,  614,  610,  616,  604,  615,  617,  613,  618,  606,
      611,  619,  620,  616,  624,  626,  621,  607,  622,  627,
      614,  628,  609,  629,  615,  617,  621,  619,  622,  631,
      620,  618,  632,  633,  634,  635,  636,  637,  638,  639,

      640,  643,  624,  641,  645,  644,  646,  647,  648,  651,
      652,  650,  626,  667,  653,  655,  656,  657,  658,  629,
      662,  661,  628,  659,  633,  632,  635,  660,  664,  638,
      639,  634,  674,  684,  627,  663,  666,  671,  674,  631,
      667,  683,  669,  670,  643,  636,  637,  650,  641,  644,
      645,  655,  647,  671,  659,  640,  652,  646,  648,  672,
      657,  658,  651,  653,  660,  661,  656,  673,  663,  662,
      672,  675,  666,  669,  670,  676,  678,  664,  681,  679,
      682,  685,  688,  689,  684,  690,  691,  681,  692,  693,
      694,  695,  705,  696,  698,  683,  676,  678,  673,  700,

      701,  703,  675,  679,  682,  706,  702,  707,  710,  709,
      713,  714,  712,  715,  716,  717,  690,  685,  719,  692,
      727,  718,  730,  733,  689,  705,  737,  722,  725,  739,
      740,  741,  695,  733,  738,  691,  726,  688,  727,  730,
      723,  694,  700,  693,  696,  719,  698,  702,  725,  710,
      722,  701,  703,  712,  718,  713,  702,  715,  726,  706,
      709,  714,  707,  723,  728,  716,  732,  729,  734,  735,
      738,  717,  739,  742,  743,  737,  744,  746,  741,  747,
      748,  749,  750,  752,  740,  751,  728,  729,  732,  754,
      755,  756,  753,  757,  758,  761,  760,  763,  766,  734,

      735,  767,  772,  769,  775,  768,  770,  776,  777,  771,
      778,  783,  744,  769,  746,  780,  781,  748,  742,  771,
      747,  772,  766,  775,  743,  767,  752,  768,  761,  757,
      782,  784,  749,  750,  751,  753,  787,  770,  788,  755,
      754,  756,  773,  774,  789,  758,  760,  783,  763,  790,
      791,  793,  773,  774,  795,  796,  780,  776,  805,  777,
      798,  781,  801,  806,  809,  778,  812,  782,  807,  808,
      815,  810,  816,  811,  813,  789,  784,  814,  809,  817,
      805,  818,  788,  820,  793,  806,  807,  791,  819,  787,
      812,  795,  808,  798,  810,  801,  811,  813,  790,  823,

      814,  824,  825,  826,  827,  828,  796,  831,  829,  839,
      837,  843,  844,  835,  845,  836,  837,  838,  839,  818,
      820,  815,  816,  835,  819,  836,  844,  838,  840,  846,
      817,  848,  841,  842,  843,  850,  823,  827,  840,  828,
      826,  829,  841,  842,  852,  853,  854,  855,  824,  857,
      856,  858,  863,  825,  861,  862,  864,  865,  831,  866,
      861,  862,  870,  845,  871,  869,  874,  865,  848,  875,
      876,  877,  878,  879,  846,  880,  863,  881,  892,  854,
      864,  884,  870,  866,  850,  885,  853,  856,  886,  888,
      891,  855,  858,  857,  890,  852,  869,  874,  893,  884,

      895,  871,  886,  885,  896,  900,  902,  903,  888,  891,
      906,  892,  904,  907,  876,  877,  879,  905,  890,  875,
      908,  909,  878,  881,  910,  880,  912,  916,  917,  902,
      903,  918,  904,  920,  893,  921,  907,  895,  925,  906,
      923,  905,  917,  926,  928,  929,  916,  930,  931,  925,
      900,  932,  918,  926,  896,  933,  934,  912,  909,  936,
      937,  930,  938,  940,  908,  939,  934,  942,  944,  945,
      910,  931,  946,  947,  911,  901,  899,  898,  897,  894,
      889,  887,  882,  920,  938,  921,  873,  923,  872,  868,
      867,  929,  932,  860,  859,  928,  933,  851,  939,  849,

      847,  834,  833,  832,  936,  937,  830,  822,  821,  944,
      804,  803,  802,  800,  940,  945,  799,  946,  942,  797,
      794,  792,  786,  947,  950,  950,  950,  951,  951,  952,
      952,  952,  953,  953,  953,  955,  955,  955,  956,  956,
      956,  957,  957,  957,  958,  958,  958,  959,  959,  959,
      785,  779,  765,  764,  762,  759,  745,  736,  731,  724,
      721,  720,  711,  708,  704,  699,  697,  687,  686,  680,
      677,  668,  665,  654,  649,  642,  630,  625,  612,  605,
      583,  568,  552,  535,  530,  525,  522,  505,  502,  499,
      473,  472,  462,  447,  446,  430,  427,  419,  365,  360,

      343,  316,  314,  312,  305,  291,  289,  257,  256,  242,
      240,  237,  236,  226,  224,  215,  210,  209,  208,  200,
      197,  196,  190,  184,  182,  181,  180,  178,  177,  175,
      159,  158,  157,  151,  150,  146,  121,  120,  119,  116,
       96,   90,   75,   57,   55,   54,   52,   48,   14,    7,
        3,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,

      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[138] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#line 2 "lexer.l"
/*
 * Copyright 2013 Google Inc.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301, USA.
 */
/*
 * Author: ncardwell@google.com (Neal Cardwell)
 *
 * This is the specification for the lexical scanner for the packetdrill
 * script language. It is processed by the flex lexical scanner
 * generator.
 *
 * For full documentation see: http://flex.sourceforge.net/manual/
 *
 * Here is a quick and dirty tutorial on flex:
 *
 * A flex lexical scanner specification is basically a list of rules,
 * where each rule is a regular expressions for a lexical token to
 * match, followed by a C fragment to execute when the scanner sees
 * that pattern.
 *
 * The lexer feeds a stream of terminal symbols up to this parser,
 * passing up a FOO token for each "return FOO" in the lexer spec. The
 * lexer specifies what value to pass up to the parser by setting a
 * yylval.fooval field, where fooval is a field in the %union in the
 * .y file.
 *
 * TODO: detect overflow in numeric literals.
 */


#include "inet/common/INETDefs.h"

#if !defined(_WIN32) && !defined(__WIN32__) && !defined(WIN32) && !defined(__CYGWIN__) && !defined(_WIN64)
#include <netinet/in.h>
#endif
#include <stdlib.h>
#include <stdio.h>
#include "PacketDrillUtils.h"

using namespace inet;

/* This include of the bison-generated .h file must go last so that we
 * can first include all of the declarations on which it depends.
 */
#include "parser.h"

/* Suppress flex's generation of an uncalled static input() function, which
 * leads to a compiler warning:
 * warning: ‘input’ defined but not used
 */
#define YY_NO_INPUT

/* Copy the string name "foo" after the "--" of a "--foo" option. */
static char *option(const char *s) {
    const int dash_dash_len = 2;
    char *str = (char *)malloc (strlen(s) - dash_dash_len);
    strncpy(str, s + dash_dash_len, strlen(s) - dash_dash_len);
    return str;
}

/* Copy the string inside a quoted string. */
static char *quoted(const char *s) {
    const int delim_len = 1;
    char *str = (char *)malloc (strlen(s) - 2*delim_len);
    strncpy(str, s + delim_len, strlen(s) - 2*delim_len);
    return str;
}


/* Convert a hex string prefixed by "0x" to an integer value. */
static int64 hextol(const char *s) {
    return strtol(yytext + 2, NULL, 16);
}

enum ifdef_os {
    FreeBSD_IFDEF = 1, Omnet_IFDEF
};

#define MAX_IFDEF_DEPTH 1
YY_BUFFER_STATE ifdef_stack[MAX_IFDEF_DEPTH];
int ifdef_stack_ptr = 0;

static inline int get_os_name_length(enum ifdef_os os) {
    switch (os) {
    case FreeBSD_IFDEF:
        return strlen("FreeBSD");
    case Omnet_IFDEF:
        return strlen("Omnet");
    default:
        return -1;
    }
}

static inline bool ignore_ifdef(enum ifdef_os os) {
#ifdef __FreeBSD__
    if (os == FreeBSD_IFDEF) {
        return false;
    }
#endif
#ifdef OMNETPP_VERSION
    if (os == Omnet_IFDEF) {
        return false;
    }
#endif
    return true;
}

static inline char* remove_ifdef_start_and_endtag(char *code, int os_name_length) {
    unsigned int ifdef_length = strlen("#ifdef ");
    unsigned int endif_length = strlen("#endif");
    unsigned int newline_before_endif = 0;
    char *code_without_ifdef = NULL;

    code_without_ifdef = code + ifdef_length + os_name_length;
    printf("ifdef_length=%d os_name_length=%d code_without_ifdef=%zu\n", ifdef_length, os_name_length, strlen(code_without_ifdef));
    newline_before_endif = strlen(code_without_ifdef) - endif_length;
    code_without_ifdef[newline_before_endif] = (char) 0;
    return code_without_ifdef;
}


static void handle_ifdef(enum ifdef_os os, const char *s) {
    char *code = NULL;
    char *code_without_ifdef = NULL;
    int os_name_length = get_os_name_length(os);
printf("handle ifdef code=%s\n", code);
    if (os_name_length == -1) {
        fprintf(stderr, "handle_ifdef with unknown os called.\n");
        exit(1);
    }

    if (ignore_ifdef(os)) {
        return;
    }

    if (ifdef_stack_ptr >= MAX_IFDEF_DEPTH) {
        fprintf(stderr, "Ifdefs nested too deeply");
        exit(1);
    }

    code = strdup(s);

    code_without_ifdef = remove_ifdef_start_and_endtag(code, os_name_length);
    ifdef_stack[ifdef_stack_ptr++] = YY_CURRENT_BUFFER;
    yy_switch_to_buffer(yy_scan_string(code_without_ifdef));
printf("code_without_ifdef=%s\n", code_without_ifdef);
    free(code);
}

#line 168 "lexer.l"
#define YY_USER_ACTION yylloc.first_line = yylloc.last_line = yylineno;
/* A regexp for C++ comments: */
/* Here is a summary of the regexp for C comments:
 *   open-comment
 *   any number of:
 *     (non-stars) or (star then non-slash)
 *   close comment
 */
/* This matches the following platform specific #ifdef-forms:
 *   #ifdef FreeBSD => Code that only FreeBSD hosts should execute
 *   #ifdef Omnet   => Code that only Omnet hosts should execute
 *
 *   the pattern for using #ifdef is like this:
 *   #ifdef FreeBSD
 *   (specific code only for freebsd)
 *   #endif
 */
/* these are the tags that identify the start and ending of an ifdef block */
/* end_matcher actually matches everything except the "#endif" tag. */
/* The regexp for code snippets is analogous to that for C comments.
 * Here is a summary of the regexp for code snippets:
 *   %{
 *   any number of:
 *     (non-}) or (} then non-%)
 *   }%
 */
/* IPv4: a regular experssion for an IPv4 address */
/* IPv6: a regular experssion for an IPv6 address. The complexity is
 * unfortunate, but we can't use a super-simple approach because TCP
 * sequence number ranges like 1:1001 can look like IPv6 addresses if
 * we use a naive approach.
 */
/* IPv4-mapped IPv6 address: */
/* IPv4-translated IPv6 address: */
/* IPv4-embedded IPv6 addresses: */
#line 1458 "lexer.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * _in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * _out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 241 "lexer.l"

#line 1676 "lexer.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 950 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1952 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 242 "lexer.l"
return UDP;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 243 "lexer.l"
return SA_FAMILY;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 244 "lexer.l"
return SIN_PORT;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 245 "lexer.l"
return SIN_ADDR;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 246 "lexer.l"
return ACK;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 247 "lexer.l"
return EOL;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 248 "lexer.l"
return ECR;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 249 "lexer.l"
return MSS;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 250 "lexer.l"
return NOP;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 251 "lexer.l"
return TCPSACK;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 252 "lexer.l"
return SACKOK;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 253 "lexer.l"
return TIMESTAMP;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 254 "lexer.l"
return VAL;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 255 "lexer.l"
return _HTONS_;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 256 "lexer.l"
return _HTONL_;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 257 "lexer.l"
return WIN;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 258 "lexer.l"
return WSCALE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 259 "lexer.l"
return MYSCTP;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 260 "lexer.l"
return CHUNK;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 261 "lexer.l"
return MYDATA;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 262 "lexer.l"
return MYINIT;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 263 "lexer.l"
return MYINIT_ACK;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 264 "lexer.l"
return MYSACK;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 265 "lexer.l"
return MYHEARTBEAT;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 266 "lexer.l"
return MYHEARTBEAT_ACK;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 267 "lexer.l"
return MYABORT;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 268 "lexer.l"
return MYSHUTDOWN;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 269 "lexer.l"
return MYSHUTDOWN_ACK;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 270 "lexer.l"
return MYERROR;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 271 "lexer.l"
return MYCOOKIE_ECHO;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 272 "lexer.l"
return MYCOOKIE_ACK;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 273 "lexer.l"
return MYSHUTDOWN_COMPLETE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 274 "lexer.l"
return STATE_COOKIE;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 275 "lexer.l"
return HEARTBEAT_INFORMATION;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 276 "lexer.l"
return MYSUPPORTED_EXTENSIONS;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 277 "lexer.l"
return MYSUPPORTED_ADDRESS_TYPES;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 278 "lexer.l"
return RECONFIG;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 279 "lexer.l"
return OUTGOING_SSN_RESET;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 280 "lexer.l"
return INCOMING_SSN_RESET;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 281 "lexer.l"
return SSN_TSN_RESET;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 282 "lexer.l"
return ADD_OUTGOING_STREAMS;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 283 "lexer.l"
return ADD_INCOMING_STREAMS;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 284 "lexer.l"
return MYINVALID_STREAM_IDENTIFIER;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 285 "lexer.l"
return RECONFIG_RESPONSE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 286 "lexer.l"
return IPV4_TYPE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 287 "lexer.l"
return IPV6_TYPE;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 288 "lexer.l"
return TYPES;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 289 "lexer.l"
return TYPE;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 290 "lexer.l"
return FLAGS;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 291 "lexer.l"
return LEN;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 292 "lexer.l"
return TAG;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 293 "lexer.l"
return A_RWND;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 294 "lexer.l"
return IS;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 295 "lexer.l"
return OS;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 296 "lexer.l"
return TSN;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 297 "lexer.l"
return MYSID;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 298 "lexer.l"
return SSN;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 299 "lexer.l"
return PPID;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 300 "lexer.l"
return CUM_TSN;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 301 "lexer.l"
return GAPS;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 302 "lexer.l"
return DUPS;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 303 "lexer.l"
return SACK_ASSOC_ID;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 304 "lexer.l"
return MYSACK_DELAY;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 305 "lexer.l"
return SACK_FREQ;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 306 "lexer.l"
return SRTO_INITIAL;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 307 "lexer.l"
return SRTO_MAX;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 308 "lexer.l"
return SRTO_MIN;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 309 "lexer.l"
return SINIT_NUM_OSTREAMS;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 310 "lexer.l"
return SINIT_MAX_INSTREAMS;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 311 "lexer.l"
return SINIT_MAX_ATTEMPTS;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 312 "lexer.l"
return SINIT_MAX_INIT_TIMEO;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 313 "lexer.l"
return ASSOC_VALUE;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 314 "lexer.l"
return ASSOC_ID;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 315 "lexer.l"
return SPP_ASSOC_ID;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 316 "lexer.l"
return SPP_ADDRESS;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 317 "lexer.l"
return SPP_HBINTERVAL;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 318 "lexer.l"
return SPP_PATHMAXRXT;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 319 "lexer.l"
return SPP_PATHMTU;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 320 "lexer.l"
return SPP_FLAGS;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 321 "lexer.l"
return SPP_IPV6_FLOWLABEL_; /* avoid name clash */
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 322 "lexer.l"
return SPP_DSCP_; /* avoid name clash */
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 323 "lexer.l"
return SINFO_STREAM;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 324 "lexer.l"
return SINFO_SSN;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 325 "lexer.l"
return SINFO_FLAGS;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 326 "lexer.l"
return SINFO_PPID;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 327 "lexer.l"
return SINFO_CONTEXT;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 328 "lexer.l"
return SINFO_TIMETOLIVE;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 329 "lexer.l"
return SINFO_TSN;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 330 "lexer.l"
return SINFO_CUMTSN;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 331 "lexer.l"
return SINFO_ASSOC_ID;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 332 "lexer.l"
return SINFO_PR_VALUE;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 333 "lexer.l"
return SSTAT_ASSOC_ID;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 334 "lexer.l"
return SSTAT_STATE;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 335 "lexer.l"
return SSTAT_RWND;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 336 "lexer.l"
return SSTAT_UNACKDATA;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 337 "lexer.l"
return SSTAT_PENDDATA;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 338 "lexer.l"
return SSTAT_INSTRMS;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 339 "lexer.l"
return SSTAT_OUTSTRMS;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 340 "lexer.l"
return SSTAT_FRAGMENTATION_POINT;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 341 "lexer.l"
return SSTAT_PRIMARY;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 342 "lexer.l"
return SRS_ASSOC_ID;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 343 "lexer.l"
return SRS_FLAGS;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 344 "lexer.l"
return SRS_NUMBER_STREAMS;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 345 "lexer.l"
return SRS_STREAM_LIST;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 346 "lexer.l"
return SASOC_ASSOC_ID;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 347 "lexer.l"
return SASOC_ASOCMAXRXT;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 348 "lexer.l"
return SASOC_NUMBER_PEER_DESTINATIONS;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 349 "lexer.l"
return SASOC_PEER_RWND;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 350 "lexer.l"
return SASOC_LOCAL_RWND;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 351 "lexer.l"
return SASOC_COOKIE_LIFE;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 352 "lexer.l"
return SAS_ASSOC_ID;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 353 "lexer.l"
return SAS_INSTRMS;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 354 "lexer.l"
return SAS_OUTSTRMS;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 355 "lexer.l"
return INET_ADDR;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 356 "lexer.l"
return REQ_SN;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 357 "lexer.l"
return RESP_SN;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 358 "lexer.l"
return LAST_TSN;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 359 "lexer.l"
return SIDS;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 360 "lexer.l"
return SENDER_NEXT_TSN;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 361 "lexer.l"
return RECEIVER_NEXT_TSN;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 362 "lexer.l"
return NUMBER_OF_NEW_STREAMS;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 363 "lexer.l"
return RESULT;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 364 "lexer.l"
return ELLIPSIS;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 365 "lexer.l"
yylval.string = option(yytext); return OPTION;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 366 "lexer.l"
yylval.floating = atof(yytext);   return MYFLOAT;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 367 "lexer.l"
yylval.integer = atoll(yytext);  return INTEGER;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 368 "lexer.l"
yylval.integer = hextol(yytext); return HEX_INTEGER;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 369 "lexer.l"
yylval.string = strdup(yytext); return MYWORD;
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 370 "lexer.l"
yylval.string = quoted(yytext); return MYSTRING;
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 371 "lexer.l"
yylval.string = quoted(yytext); return BACK_QUOTED;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 372 "lexer.l"
return (int) yytext[0];
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 373 "lexer.l"
/* ignore whitespace */;
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 374 "lexer.l"
/* ignore C++-style comment */;
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 375 "lexer.l"
/* ignore C-style comment */;
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 376 "lexer.l"
handle_ifdef(FreeBSD_IFDEF, yytext);
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 377 "lexer.l"
handle_ifdef(Omnet_IFDEF, yytext);
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 378 "lexer.l"
{
                        if ( --ifdef_stack_ptr < 0 ) {
                            yyterminate();
                        } else {
                            yy_delete_buffer(YY_CURRENT_BUFFER);
                            yy_switch_to_buffer(ifdef_stack[ifdef_stack_ptr]);
                        }
                    }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 386 "lexer.l"
ECHO;
	YY_BREAK
#line 2446 "lexer.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 950 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 950 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 949);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 386 "lexer.l"




