/* A Bison parser, made by GNU Bison 3.0.4.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.4"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1




/* Copy the first part of user declarations.  */
#line 1 "parser.y" /* yacc.c:339  */

/*
 * Copyright 2013 Google Inc.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301, USA.
 */
/*
 * Author: Author: ncardwell@google.com (Neal Cardwell)
 *
 * This is the parser for the packetdrill script language. It is
 * processed by the bison parser generator.
 *
 * For full documentation see: http://www.gnu.org/software/bison/manual/
 *
 * Here is a quick and dirty tutorial on bison:
 *
 * A bison parser specification is basically a BNF grammar for the
 * language you are parsing. Each rule specifies a nonterminal symbol
 * on the left-hand side and a sequence of terminal symbols (lexical
 * tokens) and or nonterminal symbols on the right-hand side that can
 * "reduce" to the symbol on the left hand side. When the parser sees
 * the sequence of symbols on the right where it "wants" to see a
 * nonterminal on the left, the rule fires, executing the semantic
 * action code in curly {} braces as it reduces the right hand side to
 * the left hand side.
 *
 * The semantic action code for a rule produces an output, which it
 * can reference using the $$ token. The set of possible types
 * returned in output expressions is given in the %union section of
 * the .y file. The specific type of the output for a terminal or
 * nonterminal symbol (corresponding to a field in the %union) is
 * given by the %type directive in the .y file. The action code can
 * access the outputs of the symbols on the right hand side by using
 * the notation $1 for the first symbol, $2 for the second symbol, and
 * so on.
 *
 * The lexer (generated by flex from lexer.l) feeds a stream of
 * terminal symbols up to this parser. Parser semantic actions can
 * access the lexer output for a terminal symbol with the same
 * notation they use for nonterminals.
 *
 */

/* The first part of the .y file consists of C code that bison copies
 * directly into the top of the .c file it generates.
 */

#include "inet/common/INETDefs.h"

#if !defined(_WIN32) && !defined(__WIN32__) && !defined(WIN32) && !defined(__CYGWIN__) && !defined(_WIN64)
#include <arpa/inet.h>
#include <netinet/in.h>
#else
#include "winsock2.h"
#endif
#include <stdio.h>
#include <ctype.h>
#include <errno.h>
#include <fcntl.h>
#include <pthread.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

#include "PacketDrillUtils.h"
#include "PacketDrill.h"


using namespace inet;
using namespace inet::sctp;

/* This include of the bison-generated .h file must go last so that we
 * can first include all of the declarations on which it depends.
 */
#include "parser.h"

/* Change this YYDEBUG to 1 to get verbose debug output for parsing: */
#define YYDEBUG 0
#if YYDEBUG
extern int yydebug;
#endif

extern FILE *yyin;
extern int yylineno;
extern int yywrap(void);
extern char *yytext;
extern int yylex(void);
extern int yyparse(void);

/* The input to the parser: the path name of the script file to parse. */
static const char* current_script_path = NULL;

/* The starting line number of the input script statement that we're
 * currently parsing. This may be different than yylineno if bison had
 * to look ahead and lexically scan a token on the following line to
 * decide that the current statement is done.
 */
static int current_script_line = -1;

/*
 * We use this object to look up configuration info needed during
 * parsing.
 */
static PacketDrillConfig *in_config = NULL;

/* The output of the parser: an output script containing
 * 1) a linked list of options
 * 2) a linked list of events
 */
static PacketDrillScript *out_script = NULL;


/* The test invocation to pass back to parse_and_finalize_config(). */
Invocation *invocation;

/* This standard callback is invoked by flex when it encounters
 * the end of a file. We return 1 to tell flex to return EOF.
 */
int yywrap(void)
{
    return 1;
}


/* The public entry point for the script parser. Parses the
 * text script file with the given path name and fills in the script
 * object with the parsed representation.
 */
int parse_script(PacketDrillConfig *config, PacketDrillScript *script, Invocation *callback_invocation){
    /* This bison-generated parser is not multi-thread safe, so we
     * have a lock to prevent more than one thread using the
     * parser at the same time. This is useful in the wire server
     * context, where in general we may have more than one test
     * thread running at the same time.
     */

#if YYDEBUG
    yydebug = 1;
#endif

    /* Now parse the script from our buffer. */
    yyin = fopen(script->getScriptPath(), "r");
    if (!yyin)
        printf("fopen: parse error opening script buffer");
    current_script_path = config->getScriptPath();
    in_config = config;
    out_script = script;
    invocation = callback_invocation;

    /* We have to reset the line number here since the wire server
     * can do more than one yyparse().
     */
    yylineno = 1;
    int result = yyparse(); /* invoke bison-generated parser */
    current_script_path = NULL;
    if (fclose(yyin))
        printf("fclose: error closing script buffer");

    /* Unlock parser. */

    return result ? -1 : 0;
}

void parse_and_finalize_config(Invocation *invocation)
{
    invocation->config->parseScriptOptions(invocation->script->getOptionList());
}

/* Bison emits code to call this method when there's a parse-time error.
 * We print the line number and the error message.
 */
static void yyerror(const char *message) {
    fprintf(stderr, "%s:%d: parse error at '%s': %s\n",
        current_script_path, yylineno, yytext, message);
}

static void semantic_error(const char* message)
{
    printf("%s\n", message);
    throw cTerminationException("Packetdrill error: Script error");
}

/* Create and initalize a new integer expression with the given
 * literal value and format string.
 */
static PacketDrillExpression *new_integer_expression(int64 num, const char *format) {
    PacketDrillExpression *expression = new PacketDrillExpression(EXPR_INTEGER);
    expression->setNum(num);
    expression->setFormat(format);
    return expression;
}


/* Create and initialize a new option. */
/*static struct option_list *new_option(char *name, char *value)
{
    return NULL;
}*/


#line 282 "parser.cc" /* yacc.c:339  */

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "parser.h".  */
#ifndef YY_YY_PARSER_H_INCLUDED
# define YY_YY_PARSER_H_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int yydebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    ELLIPSIS = 258,
    UDP = 259,
    _HTONS_ = 260,
    _HTONL_ = 261,
    BACK_QUOTED = 262,
    SA_FAMILY = 263,
    SIN_PORT = 264,
    SIN_ADDR = 265,
    ACK = 266,
    WIN = 267,
    WSCALE = 268,
    MSS = 269,
    NOP = 270,
    TIMESTAMP = 271,
    ECR = 272,
    EOL = 273,
    TCPSACK = 274,
    VAL = 275,
    SACKOK = 276,
    OPTION = 277,
    IPV4_TYPE = 278,
    IPV6_TYPE = 279,
    INET_ADDR = 280,
    SPP_ASSOC_ID = 281,
    SPP_ADDRESS = 282,
    SPP_HBINTERVAL = 283,
    SPP_PATHMAXRXT = 284,
    SPP_PATHMTU = 285,
    SPP_FLAGS = 286,
    SPP_IPV6_FLOWLABEL_ = 287,
    SPP_DSCP_ = 288,
    SINFO_STREAM = 289,
    SINFO_SSN = 290,
    SINFO_FLAGS = 291,
    SINFO_PPID = 292,
    SINFO_CONTEXT = 293,
    SINFO_ASSOC_ID = 294,
    SINFO_TIMETOLIVE = 295,
    SINFO_TSN = 296,
    SINFO_CUMTSN = 297,
    SINFO_PR_VALUE = 298,
    CHUNK = 299,
    MYDATA = 300,
    MYINIT = 301,
    MYINIT_ACK = 302,
    MYHEARTBEAT = 303,
    MYHEARTBEAT_ACK = 304,
    MYABORT = 305,
    MYSHUTDOWN = 306,
    MYSHUTDOWN_ACK = 307,
    MYERROR = 308,
    MYCOOKIE_ECHO = 309,
    MYCOOKIE_ACK = 310,
    MYSHUTDOWN_COMPLETE = 311,
    PAD = 312,
    ERROR = 313,
    HEARTBEAT_INFORMATION = 314,
    CAUSE_INFO = 315,
    MYSACK = 316,
    STATE_COOKIE = 317,
    PARAMETER = 318,
    MYSCTP = 319,
    TYPE = 320,
    FLAGS = 321,
    LEN = 322,
    MYSUPPORTED_EXTENSIONS = 323,
    MYSUPPORTED_ADDRESS_TYPES = 324,
    TYPES = 325,
    CWR = 326,
    ECNE = 327,
    TAG = 328,
    A_RWND = 329,
    OS = 330,
    IS = 331,
    TSN = 332,
    MYSID = 333,
    SSN = 334,
    PPID = 335,
    CUM_TSN = 336,
    GAPS = 337,
    DUPS = 338,
    MID = 339,
    FSN = 340,
    SRTO_ASSOC_ID = 341,
    SRTO_INITIAL = 342,
    SRTO_MAX = 343,
    SRTO_MIN = 344,
    SINIT_NUM_OSTREAMS = 345,
    SINIT_MAX_INSTREAMS = 346,
    SINIT_MAX_ATTEMPTS = 347,
    SINIT_MAX_INIT_TIMEO = 348,
    MYSACK_DELAY = 349,
    SACK_FREQ = 350,
    ASSOC_VALUE = 351,
    ASSOC_ID = 352,
    SACK_ASSOC_ID = 353,
    RECONFIG = 354,
    OUTGOING_SSN_RESET = 355,
    REQ_SN = 356,
    RESP_SN = 357,
    LAST_TSN = 358,
    SIDS = 359,
    INCOMING_SSN_RESET = 360,
    RECONFIG_RESPONSE = 361,
    RESULT = 362,
    SENDER_NEXT_TSN = 363,
    RECEIVER_NEXT_TSN = 364,
    SSN_TSN_RESET = 365,
    ADD_INCOMING_STREAMS = 366,
    NUMBER_OF_NEW_STREAMS = 367,
    ADD_OUTGOING_STREAMS = 368,
    RECONFIG_REQUEST_GENERIC = 369,
    SRS_ASSOC_ID = 370,
    SRS_FLAGS = 371,
    SRS_NUMBER_STREAMS = 372,
    SRS_STREAM_LIST = 373,
    SSTAT_ASSOC_ID = 374,
    SSTAT_STATE = 375,
    SSTAT_RWND = 376,
    SSTAT_UNACKDATA = 377,
    SSTAT_PENDDATA = 378,
    SSTAT_INSTRMS = 379,
    SSTAT_OUTSTRMS = 380,
    SSTAT_FRAGMENTATION_POINT = 381,
    SSTAT_PRIMARY = 382,
    SASOC_ASOCMAXRXT = 383,
    SASOC_ASSOC_ID = 384,
    SASOC_NUMBER_PEER_DESTINATIONS = 385,
    SASOC_PEER_RWND = 386,
    SASOC_LOCAL_RWND = 387,
    SASOC_COOKIE_LIFE = 388,
    SAS_ASSOC_ID = 389,
    SAS_INSTRMS = 390,
    SAS_OUTSTRMS = 391,
    MYINVALID_STREAM_IDENTIFIER = 392,
    ISID = 393,
    MYFLOAT = 394,
    INTEGER = 395,
    HEX_INTEGER = 396,
    MYWORD = 397,
    MYSTRING = 398
  };
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED

union YYSTYPE
{
#line 222 "parser.y" /* yacc.c:355  */

    int64 integer;
    double floating;
    char *string;
    char *reserved;
    int64 time_usecs;
    enum direction_t direction;
    uint16 port;
    int32 window;
    uint32 sequence_number;
    struct {
        int protocol;    /* IPPROTO_TCP or IPPROTO_UDP */
        uint32 start_sequence;
        uint16 payload_bytes;
    } tcp_sequence_info;
    PacketDrillEvent *event;
    PacketDrillPacket *packet;
    struct syscall_spec *syscall;
    struct command_spec *command;
    PacketDrillStruct *sack_block;
    PacketDrillStruct *cause_item;
    PacketDrillExpression *expression;
    cQueue *expression_list;
    PacketDrillTcpOption *tcp_option;
    PacketDrillSctpParameter *sctp_parameter;
    PacketDrillOption *option;
    cQueue *tcp_options;
    struct errno_spec *errno_info;
    cQueue *sctp_chunk_list;
    cQueue *sctp_parameter_list;
    cQueue *address_types_list;
    cQueue *sack_block_list;
    cQueue *stream_list;
    cQueue *cause_list;
    PacketDrillBytes *byte_list;
    uint8 byte;
    PacketDrillSctpChunk *sctp_chunk;

#line 505 "parser.cc" /* yacc.c:355  */
};

typedef union YYSTYPE YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif

/* Location type.  */
#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
};
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif


extern YYSTYPE yylval;
extern YYLTYPE yylloc;
int yyparse (void);

#endif /* !YY_YY_PARSER_H_INCLUDED  */

/* Copy the second part of user declarations.  */

#line 536 "parser.cc" /* yacc.c:358  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  7
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   1206

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  162
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  161
/* YYNRULES -- Number of rules.  */
#define YYNRULES  370
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  957

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   398

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     148,   149,   146,   145,   154,   158,   157,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   150,   151,
     155,   144,   156,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   152,     2,   153,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   160,   159,   161,   147,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   365,   365,   371,   373,   380,   384,   391,   396,   400,
     401,   402,   407,   411,   418,   448,   454,   460,   465,   472,
     482,   488,   497,   504,   508,   515,   522,   525,   528,   534,
     560,   579,   599,   601,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,   618,   619,   620,   625,   626,
     632,   641,   642,   651,   652,   653,   657,   658,   663,   664,
     665,   670,   676,   685,   691,   697,   700,   703,   706,   709,
     712,   715,   718,   721,   724,   727,   730,   733,   736,   739,
     745,   746,   752,   758,   802,   803,   809,   815,   838,   839,
     845,   851,   874,   875,   884,   885,   894,   895,   904,   905,
     914,   915,   924,   925,   934,   935,   945,   946,   952,   961,
     962,   971,   972,   973,   978,   979,   980,   985,   994,   999,
    1004,  1009,  1015,  1021,  1026,  1031,  1036,  1052,  1057,  1058,
    1059,  1063,  1065,  1070,  1076,  1081,  1085,  1090,  1096,  1102,
    1106,  1112,  1116,  1122,  1126,  1132,  1136,  1142,  1148,  1152,
    1158,  1164,  1168,  1174,  1178,  1182,  1188,  1191,  1201,  1204,
    1210,  1213,  1219,  1225,  1228,  1234,  1240,  1252,  1258,  1259,
    1260,  1264,  1268,  1276,  1277,  1278,  1279,  1280,  1281,  1282,
    1283,  1284,  1285,  1290,  1293,  1309,  1312,  1317,  1319,  1322,
    1328,  1332,  1333,  1337,  1340,  1346,  1349,  1352,  1362,  1370,
    1374,  1381,  1384,  1387,  1391,  1397,  1417,  1420,  1429,  1432,
    1441,  1444,  1447,  1454,  1458,  1466,  1469,  1472,  1479,  1486,
    1489,  1493,  1510,  1514,  1520,  1521,  1525,  1531,  1543,  1544,
    1548,  1554,  1566,  1579,  1591,  1594,  1600,  1607,  1610,  1616,
    1620,  1627,  1630,  1632,  1635,  1641,  1647,  1653,  1657,  1662,
    1667,  1670,  1673,  1676,  1679,  1682,  1685,  1688,  1691,  1694,
    1697,  1700,  1703,  1711,  1717,  1723,  1734,  1738,  1745,  1751,
    1757,  1760,  1764,  1767,  1771,  1774,  1778,  1782,  1791,  1803,
    1809,  1813,  1819,  1823,  1829,  1833,  1839,  1843,  1849,  1853,
    1865,  1881,  1887,  1891,  1897,  1901,  1907,  1911,  1917,  1921,
    1934,  1948,  1949,  1953,  1959,  1963,  1969,  1973,  1979,  1983,
    1987,  1993,  1997,  2003,  2007,  2021,  2038,  2042,  2048,  2052,
    2058,  2062,  2068,  2072,  2078,  2082,  2088,  2092,  2098,  2102,
    2107,  2122,  2140,  2146,  2150,  2156,  2160,  2164,  2170,  2174,
    2180,  2184,  2190,  2194,  2200,  2204,  2210,  2215,  2230,  2247,
    2254,  2259,  2265,  2277,  2292,  2306,  2324,  2331,  2341,  2347,
    2352,  2358,  2361,  2369,  2380,  2383,  2391,  2394,  2400,  2406,
    2409
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ELLIPSIS", "UDP", "_HTONS_", "_HTONL_",
  "BACK_QUOTED", "SA_FAMILY", "SIN_PORT", "SIN_ADDR", "ACK", "WIN",
  "WSCALE", "MSS", "NOP", "TIMESTAMP", "ECR", "EOL", "TCPSACK", "VAL",
  "SACKOK", "OPTION", "IPV4_TYPE", "IPV6_TYPE", "INET_ADDR",
  "SPP_ASSOC_ID", "SPP_ADDRESS", "SPP_HBINTERVAL", "SPP_PATHMAXRXT",
  "SPP_PATHMTU", "SPP_FLAGS", "SPP_IPV6_FLOWLABEL_", "SPP_DSCP_",
  "SINFO_STREAM", "SINFO_SSN", "SINFO_FLAGS", "SINFO_PPID",
  "SINFO_CONTEXT", "SINFO_ASSOC_ID", "SINFO_TIMETOLIVE", "SINFO_TSN",
  "SINFO_CUMTSN", "SINFO_PR_VALUE", "CHUNK", "MYDATA", "MYINIT",
  "MYINIT_ACK", "MYHEARTBEAT", "MYHEARTBEAT_ACK", "MYABORT", "MYSHUTDOWN",
  "MYSHUTDOWN_ACK", "MYERROR", "MYCOOKIE_ECHO", "MYCOOKIE_ACK",
  "MYSHUTDOWN_COMPLETE", "PAD", "ERROR", "HEARTBEAT_INFORMATION",
  "CAUSE_INFO", "MYSACK", "STATE_COOKIE", "PARAMETER", "MYSCTP", "TYPE",
  "FLAGS", "LEN", "MYSUPPORTED_EXTENSIONS", "MYSUPPORTED_ADDRESS_TYPES",
  "TYPES", "CWR", "ECNE", "TAG", "A_RWND", "OS", "IS", "TSN", "MYSID",
  "SSN", "PPID", "CUM_TSN", "GAPS", "DUPS", "MID", "FSN", "SRTO_ASSOC_ID",
  "SRTO_INITIAL", "SRTO_MAX", "SRTO_MIN", "SINIT_NUM_OSTREAMS",
  "SINIT_MAX_INSTREAMS", "SINIT_MAX_ATTEMPTS", "SINIT_MAX_INIT_TIMEO",
  "MYSACK_DELAY", "SACK_FREQ", "ASSOC_VALUE", "ASSOC_ID", "SACK_ASSOC_ID",
  "RECONFIG", "OUTGOING_SSN_RESET", "REQ_SN", "RESP_SN", "LAST_TSN",
  "SIDS", "INCOMING_SSN_RESET", "RECONFIG_RESPONSE", "RESULT",
  "SENDER_NEXT_TSN", "RECEIVER_NEXT_TSN", "SSN_TSN_RESET",
  "ADD_INCOMING_STREAMS", "NUMBER_OF_NEW_STREAMS", "ADD_OUTGOING_STREAMS",
  "RECONFIG_REQUEST_GENERIC", "SRS_ASSOC_ID", "SRS_FLAGS",
  "SRS_NUMBER_STREAMS", "SRS_STREAM_LIST", "SSTAT_ASSOC_ID", "SSTAT_STATE",
  "SSTAT_RWND", "SSTAT_UNACKDATA", "SSTAT_PENDDATA", "SSTAT_INSTRMS",
  "SSTAT_OUTSTRMS", "SSTAT_FRAGMENTATION_POINT", "SSTAT_PRIMARY",
  "SASOC_ASOCMAXRXT", "SASOC_ASSOC_ID", "SASOC_NUMBER_PEER_DESTINATIONS",
  "SASOC_PEER_RWND", "SASOC_LOCAL_RWND", "SASOC_COOKIE_LIFE",
  "SAS_ASSOC_ID", "SAS_INSTRMS", "SAS_OUTSTRMS",
  "MYINVALID_STREAM_IDENTIFIER", "ISID", "MYFLOAT", "INTEGER",
  "HEX_INTEGER", "MYWORD", "MYSTRING", "'='", "'+'", "'*'", "'~'", "'('",
  "')'", "':'", "';'", "'['", "']'", "','", "'<'", "'>'", "'.'", "'-'",
  "'|'", "'{'", "'}'", "$accept", "script", "opt_options", "options",
  "option", "option_flag", "option_value", "events", "event", "event_time",
  "time", "action", "command_spec", "packet_spec", "tcp_packet_spec",
  "udp_packet_spec", "sctp_packet_spec", "sctp_chunk_list", "sctp_chunk",
  "opt_flags", "opt_len", "opt_val", "byte_list", "chunk_types_list",
  "byte", "chunk_type", "opt_data_flags", "opt_abort_flags",
  "opt_shutdown_complete_flags", "opt_tag", "opt_a_rwnd", "opt_os",
  "opt_is", "opt_tsn", "opt_sid", "opt_ssn", "opt_ppid", "opt_cum_tsn",
  "opt_gaps", "opt_dups", "sctp_data_chunk_spec", "sctp_init_chunk_spec",
  "sctp_init_ack_chunk_spec", "sctp_sack_chunk_spec",
  "sctp_heartbeat_chunk_spec", "sctp_heartbeat_ack_chunk_spec",
  "sctp_abort_chunk_spec", "sctp_shutdown_chunk_spec",
  "sctp_shutdown_ack_chunk_spec", "sctp_cookie_echo_chunk_spec",
  "sctp_cookie_ack_chunk_spec", "opt_cause_list", "sctp_cause_list",
  "sctp_invalid_stream_identifier_cause_spec", "sctp_cause_spec",
  "sctp_error_chunk_spec", "sctp_shutdown_complete_chunk_spec",
  "opt_req_sn", "opt_resp_sn", "opt_last_tsn", "opt_result",
  "opt_sender_next_tsn", "opt_receiver_next_tsn",
  "opt_number_of_new_streams", "stream_list", "stream",
  "outgoing_ssn_reset_request", "incoming_ssn_reset_request",
  "ssn_tsn_reset_request", "reconfig_response",
  "add_outgoing_streams_request", "add_incoming_streams_request",
  "sctp_reconfig_chunk_spec", "opt_parameter_list", "sctp_parameter_list",
  "sctp_parameter", "sctp_heartbeat_information_parameter",
  "sctp_supported_extensions_parameter", "address_types_list",
  "address_type", "sctp_supported_address_types_parameter",
  "sctp_state_cookie_parameter", "packet_prefix", "direction", "flags",
  "seq", "opt_ack", "opt_window", "opt_tcp_options", "tcp_option_list",
  "tcp_option", "sack_block_list", "gap_list", "gap", "dup_list", "dup",
  "sack_block", "syscall_spec", "opt_end_time", "function_name",
  "function_arguments", "expression_list", "expression", "decimal_integer",
  "hex_integer", "binary_expression", "array", "srto_initial", "srto_max",
  "srto_min", "sctp_assoc_id", "sctp_rtoinfo", "sasoc_asocmaxrxt",
  "sasoc_number_peer_destinations", "sasoc_peer_rwnd", "sasoc_local_rwnd",
  "sasoc_cookie_life", "sctp_assocparams", "sinit_num_ostreams",
  "sinit_max_instreams", "sinit_max_attempts", "sinit_max_init_timeo",
  "sctp_initmsg", "sockaddr", "spp_address", "spp_hbinterval",
  "spp_pathmtu", "spp_pathmaxrxt", "spp_flags", "spp_ipv6_flowlabel",
  "spp_dscp", "sctp_paddrparams", "sstat_state", "sstat_rwnd",
  "sstat_unackdata", "sstat_penddata", "sstat_instrms", "sstat_outstrms",
  "sstat_fragmentation_point", "sstat_primary", "sctp_status",
  "sinfo_stream", "sinfo_ssn", "sinfo_flags", "sinfo_ppid",
  "sinfo_context", "sinfo_timetolive", "sinfo_tsn", "sinfo_cumtsn",
  "sctp_sndrcvinfo", "srs_flags", "sctp_reset_streams", "sctp_add_streams",
  "sctp_assoc_value", "sack_delay", "sack_freq", "sctp_sackinfo",
  "opt_errno", "opt_note", "note", "word_list", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    61,    43,    42,   126,    40,    41,
      58,    59,    91,    93,    44,    60,    62,    46,    45,   124,
     123,   125
};
# endif

#define YYPACT_NINF -646

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-646)))

#define YYTABLE_NINF -352

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int16 yypact[] =
{
      36,  -646,   130,   126,    36,  -646,   -80,  -646,  -646,  -646,
     129,  -646,   126,  -646,    32,   -93,  -646,   -74,   -71,  -646,
     129,  -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,
      10,  -646,  -646,    -6,   129,  -646,  -646,  -646,  -646,    -5,
    -646,    -4,   133,    73,  -646,  -646,    11,  -646,    45,  -646,
     129,    94,   277,  -646,   152,   225,     5,   160,  -646,   168,
     187,   190,   195,   197,   209,   214,   219,   220,   223,   226,
     227,   228,   229,   234,   169,  -646,  -646,  -646,  -646,  -646,
    -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,
     124,   237,   375,  -646,   242,   243,  -646,  -646,  -646,   389,
    -646,    18,   254,   -89,   236,  -646,  -646,  -646,  -646,  -646,
    -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,
      39,  -646,   327,   330,   330,   330,   330,   331,   330,   330,
     330,   330,   330,   336,   330,   330,   277,   255,  -646,   266,
     263,   268,   -90,  -646,  -646,   125,   265,   280,   283,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   295,   296,
     297,   298,   299,   300,   301,   256,   284,   302,   303,   304,
     305,   306,   307,  -646,    39,    39,  -112,   308,   309,   310,
     311,   312,   313,   314,   318,   316,   317,   319,   320,   321,
     323,   326,   324,   325,   328,  -646,   315,  -646,   398,  -646,
     329,   332,   334,  -646,   322,    50,    12,    33,    50,    37,
      49,    54,    39,    50,    50,    50,    43,    50,    39,    74,
      50,    50,   333,   358,   350,   356,   420,   363,   414,   368,
     355,   236,   236,   338,   338,    22,   384,    15,   380,   380,
     428,   428,    56,  -646,   408,  -646,    13,   335,   384,  -646,
      64,  -646,   408,   208,   337,   342,   339,   352,   353,  -646,
     474,  -646,   357,  -646,  -113,  -646,  -646,  -646,  -646,   344,
    -646,  -646,  -646,   345,  -646,   488,  -646,  -646,  -646,   346,
    -646,  -646,  -646,  -646,  -646,  -646,   -88,   347,   348,   349,
     351,   354,   236,   359,   360,   236,  -646,  -646,   361,   362,
     364,   365,   366,   367,   369,   373,   370,   377,   371,   378,
     372,   383,   374,   385,   386,   343,   390,  -646,  -646,  -646,
    -646,  -646,  -646,  -646,   387,   379,  -646,  -646,  -646,   391,
     382,   388,   392,   381,   393,  -646,  -646,  -646,  -646,   394,
     395,  -646,   397,   396,  -646,  -646,  -646,   399,  -646,  -646,
    -646,  -646,   400,  -646,   403,   404,   405,   406,   409,   410,
     411,   412,   413,  -646,  -646,  -646,  -646,  -646,  -646,   415,
    -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,
     401,   402,   357,  -646,   407,  -646,   497,   480,   423,  -646,
     416,   425,   421,   419,   417,   424,   430,    75,   451,    76,
     429,    77,   455,    78,   514,    79,   445,    80,   515,   431,
      81,  -646,  -646,  -120,    82,   491,    83,   496,   496,    58,
    -646,  -646,    84,  -646,   494,   436,   554,   496,    59,   505,
     506,   476,   476,   477,   476,   476,   476,   294,   561,   440,
    -646,  -646,   437,   432,   433,   438,   434,   435,   439,   441,
     446,   447,  -646,  -646,   448,   422,  -646,  -646,   450,   442,
    -646,  -646,   453,   444,  -646,  -646,   456,   449,  -646,  -646,
     457,   452,  -646,  -646,   458,   454,   459,  -646,  -646,  -646,
    -646,  -646,  -646,   460,   461,  -646,  -646,   463,   462,   464,
     466,   467,  -646,  -646,   465,  -646,   468,   469,   470,   472,
     473,   479,   482,   483,   475,   132,   484,   478,   481,   485,
     486,  -646,   471,  -646,   579,   420,   358,    39,   355,   493,
     363,   350,   490,   495,    85,  -646,    86,   499,    87,   492,
      88,   569,    89,   510,    39,   568,   502,    91,   536,    92,
     562,   562,  -646,   554,    93,     1,  -646,   556,  -646,    95,
      14,    17,    97,   477,  -646,   532,    98,   534,  -646,   530,
     530,  -646,   500,   489,   498,   123,   501,   503,   504,   507,
     509,   508,  -646,  -646,  -646,  -646,   511,   512,  -646,  -646,
     513,   516,  -646,  -646,   520,   517,  -646,  -646,   521,   518,
     236,   523,   519,   524,  -646,  -646,   526,   522,  -646,  -646,
     531,   525,   527,   529,   533,   535,  -646,    60,   539,   537,
     538,   540,   542,   244,   543,     9,  -646,  -646,   544,   541,
    -646,  -646,   545,   153,   546,   547,   548,   553,   514,   451,
    -646,  -646,   557,   445,   429,   551,  -646,    99,   566,   100,
    -646,   101,   613,   102,   550,    31,   607,   528,   103,   570,
     104,   574,   574,  -646,  -646,  -646,   549,  -646,  -646,   156,
    -646,    23,   571,   631,   633,  -646,  -646,  -646,  -646,  -646,
    -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,
    -646,  -646,  -646,   158,  -646,  -646,  -646,  -646,  -646,   162,
    -646,   575,   552,   105,  -646,   576,   106,  -646,  -646,   558,
     555,   559,   560,   563,   564,   567,  -646,  -646,   572,   565,
    -646,  -646,  -646,  -646,   577,   573,  -646,  -646,   578,   580,
    -646,   581,   584,   582,   585,  -646,  -646,   586,   583,  -646,
    -646,   587,   588,   589,  -646,  -646,   134,  -646,   107,   591,
     592,   594,   595,   596,   244,   597,     9,   603,   181,   593,
    -646,  -646,   604,   598,  -646,  -646,   599,   569,  -646,   590,
     510,   499,   600,   108,  -646,    39,   624,   109,   616,   611,
     110,   619,  -646,   111,   623,   112,   491,   491,  -646,   601,
     605,   183,  -646,    24,  -646,   657,   702,  -646,  -646,  -646,
    -646,   113,  -646,   602,  -646,   192,  -646,    67,   606,   700,
     608,   612,   609,   610,   614,  -646,  -646,   236,   615,   617,
    -646,  -646,   621,   618,   620,  -646,  -646,   622,   625,  -646,
    -646,   626,   627,  -646,  -646,   328,   328,  -646,   628,  -646,
     634,  -646,   114,   629,   630,  -646,  -646,   632,   635,   593,
    -646,  -646,  -646,   637,   636,   640,   613,   528,   550,   566,
    -646,   115,   679,   116,   641,  -646,   117,   672,    69,  -646,
     638,   639,  -646,  -646,   642,   643,   201,  -646,  -646,  -646,
     644,  -646,  -646,    72,  -646,   694,   645,   646,   647,   648,
    -646,  -646,   650,   649,  -646,  -646,   653,   651,  -646,  -646,
     654,   652,  -646,  -646,  -646,  -646,  -646,  -646,   660,  -646,
     662,   593,  -646,  -646,  -646,   655,   624,  -646,   616,  -646,
     118,  -646,   119,   658,   120,   681,  -646,  -646,   204,   661,
     659,   663,  -646,  -646,  -646,  -646,   664,   665,  -646,  -646,
     667,  -123,   666,   669,   679,   641,   721,  -646,   121,   686,
    -646,  -646,   668,   670,   671,  -646,  -646,  -646,   676,  -646,
    -646,   658,    50,   673,   674,  -646,  -646
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       3,     8,     0,     0,     4,     5,     0,     1,    20,    21,
       0,    17,     2,    12,   234,    16,     6,     0,    15,    13,
       0,    25,   199,   200,    14,    24,    22,    26,    27,    28,
       0,   198,    23,     0,     0,     9,    10,    11,     7,     0,
     235,     0,     0,   201,   202,   204,     0,   236,     0,    18,
       0,     0,     0,   203,     0,   206,     0,     0,    19,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    31,    32,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    47,    45,    46,
       0,     0,   208,   241,     0,     0,   263,   264,   247,   248,
     237,     0,     0,     0,   239,   242,   243,   250,   252,   255,
     259,   253,   251,   258,   257,   260,   261,   262,   254,   256,
       0,    30,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   207,     0,
     210,     0,     0,   249,   266,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   238,     0,     0,   364,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   129,     0,
       0,     0,     0,     0,   169,    33,     0,   209,     0,    29,
       0,     0,     0,   267,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   240,   265,     0,   366,     0,     0,     0,     0,     0,
       0,     0,     0,   123,     0,   125,     0,     0,     0,   127,
       0,   137,     0,     0,     0,     0,     0,     0,     0,   215,
       0,   216,     0,   219,     0,   213,   246,   244,   245,     0,
     276,   274,   275,     0,   301,     0,   302,   333,   332,     0,
     269,   268,   292,   291,   359,   358,     0,     0,     0,     0,
     263,   247,     0,   250,     0,   316,   280,   279,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   365,   233,   367,
      80,    82,    81,    83,     0,     0,    48,    50,    49,     0,
       0,     0,     0,     0,     0,    84,    86,    85,    87,     0,
       0,   128,     0,   130,   135,   131,   136,     0,    88,    90,
      89,    91,     0,   168,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   177,   178,   179,   180,   181,   182,   170,
     171,   173,   175,   176,   174,   167,   205,   212,   218,   217,
       0,     0,   220,   222,     0,   211,     0,     0,     0,   357,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   363,   369,     0,     0,     0,     0,     0,     0,     0,
     121,   122,     0,   124,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     223,   214,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   271,   270,     0,     0,   282,   281,     0,     0,
     294,   293,     0,     0,   304,   303,     0,     0,   318,   317,
       0,     0,   335,   334,     0,     0,     0,   361,   360,   370,
     368,    51,    52,     0,     0,    92,    93,     0,     0,     0,
       0,     0,   109,   110,     0,   132,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   172,     0,   232,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   278,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   183,     0,     0,     0,   126,     0,   195,     0,
       0,     0,     0,     0,   160,     0,     0,     0,   162,     0,
       0,   221,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   273,   272,   284,   283,     0,     0,   296,   295,
       0,     0,   308,   307,     0,     0,   320,   319,     0,     0,
     336,     0,     0,     0,   100,   101,     0,     0,    94,    95,
       0,     0,     0,     0,     0,     0,    53,     0,     0,     0,
       0,     0,     0,    58,     0,   187,   139,   138,     0,     0,
     141,   140,     0,     0,     0,     0,     0,     0,     0,     0,
     356,   362,     0,     0,     0,     0,   355,     0,     0,     0,
     299,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   184,   134,   133,     0,    62,    61,     0,
      56,     0,     0,     0,     0,   185,    65,    66,    67,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    68,
      79,    64,    63,     0,    59,   193,   191,   192,   190,     0,
     188,     0,     0,     0,   163,     0,     0,   166,   165,     0,
       0,     0,     0,     0,     0,     0,   286,   285,     0,     0,
     298,   297,   306,   305,     0,     0,   322,   321,     0,     0,
     338,     0,     0,     0,     0,   102,   103,     0,     0,    96,
      97,     0,     0,     0,    54,    55,     0,   111,   224,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   156,
     145,   144,     0,     0,   153,   152,     0,     0,   277,     0,
       0,     0,     0,     0,   290,     0,     0,     0,     0,     0,
       0,     0,   353,     0,     0,     0,     0,     0,    57,     0,
       0,     0,   225,     0,   120,     0,     0,   186,    60,   194,
     189,     0,   158,     0,   157,     0,   154,     0,     0,     0,
       0,     0,     0,     0,     0,   288,   287,   309,     0,     0,
     324,   323,     0,     0,     0,   340,   339,     0,     0,   104,
     105,     0,     0,    98,    99,   169,   169,   112,     0,   113,
       0,   114,   228,     0,     0,   143,   142,     0,     0,   156,
     148,   146,   147,     0,     0,     0,     0,     0,     0,     0,
     354,     0,     0,     0,     0,   337,     0,     0,     0,   117,
       0,     0,   227,   226,     0,     0,     0,   229,   196,   197,
       0,   161,   155,     0,   164,     0,     0,     0,     0,     0,
     311,   310,     0,     0,   326,   325,     0,     0,   342,   341,
       0,     0,   106,   107,   108,   118,   119,   115,     0,   116,
       0,   156,   151,   149,   150,     0,     0,   352,     0,   289,
       0,   315,     0,     0,     0,     0,   231,   230,     0,     0,
       0,     0,   313,   312,   328,   327,     0,     0,   344,   343,
       0,     0,     0,     0,     0,     0,     0,   331,     0,     0,
     348,   159,     0,     0,     0,   329,   346,   345,     0,   300,
     314,     0,     0,     0,     0,   330,   347
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -646,  -646,  -646,  -646,   728,  -646,  -646,  -646,   745,  -646,
     253,  -646,  -646,  -646,  -646,  -646,  -646,  -646,   678,     3,
    -245,   215,  -646,  -646,    25,    16,  -646,  -646,  -646,   656,
    -399,   232,   135,  -417,  -646,  -646,  -646,   675,  -646,  -646,
    -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,
    -646,  -646,  -646,  -646,   418,  -646,  -646,  -293,   224,  -646,
    -646,  -646,  -646,   218,  -115,   -49,  -646,  -646,  -646,  -646,
    -646,  -646,  -646,  -461,  -646,   426,   127,  -646,  -646,    66,
    -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,
     443,  -646,  -646,   -15,  -646,   -84,   487,  -646,  -646,  -646,
    -646,   720,  -119,  -646,  -646,   677,  -645,   680,   340,   193,
    -208,  -646,   682,   341,   189,    63,   -21,  -646,  -646,  -646,
    -646,  -646,  -646,   683,   684,   376,    90,   202,   -14,   -73,
     -98,  -646,   685,   427,   205,   122,   -11,   -69,   -95,  -110,
    -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,  -646,
     687,  -646,  -646,  -646,   689,   688,  -646,  -646,  -646,   690,
    -646
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     2,     3,     4,     5,     6,    38,    12,    13,    14,
      15,    24,    25,    26,    27,    28,    29,    74,    75,   180,
     325,   497,   659,   683,   660,   684,   178,   185,   192,   330,
     488,   601,   732,   484,   597,   728,   822,   340,   609,   740,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,   247,   343,   344,   345,    87,    88,   504,   507,   748,
     623,   753,   844,   625,   795,   796,   363,   364,   365,   366,
     367,   368,    89,   254,   369,   370,   371,   372,   689,   690,
     373,   374,    30,    31,    46,    55,    92,   140,   199,   264,
     265,   382,   781,   782,   866,   867,   383,    32,    33,    48,
      57,   103,   104,   105,   106,   107,   108,   165,   302,   455,
     273,   109,   166,   304,   459,   577,   709,   110,   167,   306,
     463,   581,   111,   112,   168,   308,   585,   467,   715,   809,
     883,   113,   169,   310,   471,   589,   719,   813,   887,   927,
     114,   170,   312,   475,   592,   723,   818,   891,   931,   115,
     171,   116,   117,   118,   172,   315,   119,   234,   318,   317,
     413
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     279,   176,   724,   347,   606,   287,   288,   289,    93,   294,
      94,    95,   298,   299,    41,   274,   341,   612,   326,   489,
     614,    93,   479,    94,    95,   320,   737,   831,   498,   480,
     233,   939,   686,   687,   720,    20,   277,   721,   940,    21,
     280,   384,    93,   385,    94,    95,    93,   175,    94,    95,
     201,   202,   282,   270,    34,   231,   232,   284,     1,   335,
     173,   490,   499,   656,    17,   174,    35,   348,    36,    37,
     840,   175,   892,   389,    42,   902,    39,   296,   452,   456,
     460,   464,   468,   472,   477,   481,   485,   492,   572,   574,
     578,   582,   586,   286,   594,   598,   604,   292,   610,   295,
     616,   620,   706,   710,   712,   716,   725,   729,   750,   754,
     779,   805,   810,   815,   819,   823,   835,   864,   880,   884,
     888,   922,   924,   928,   946,   324,   500,   181,   182,   183,
       7,   186,   187,   188,   189,   190,    47,   193,   194,   505,
      50,   508,   509,   510,    51,    96,    97,    98,    99,   688,
     342,    54,    43,   607,   100,   327,   328,   101,    96,    97,
      98,    99,   321,   322,   323,   102,   613,    44,    45,   615,
     101,   144,   275,   278,   491,   738,   832,   281,   102,    96,
      97,    98,    99,   290,    97,   291,    99,    22,    23,   283,
     271,   101,   272,    56,   285,   101,   336,   337,   338,   102,
     657,   658,   877,   102,   349,   350,   351,   841,   842,   893,
     894,   353,   903,   904,   297,   453,   457,   461,   465,   469,
     473,   478,   482,   486,   493,   573,   575,   579,   583,   587,
      53,   595,   599,   605,    59,   611,    91,   617,   621,   707,
     711,   713,   717,   726,   730,   751,   755,   780,   806,   811,
     816,   820,   824,   836,   865,   881,   885,   889,   923,   925,
     929,   947,   146,    18,   137,     8,     9,   332,     8,     9,
     354,    10,    11,    40,   657,   658,   355,   356,   203,   174,
     147,   148,   175,    52,   630,   554,   555,    49,   149,   666,
     667,   668,   669,   670,   671,   672,   673,   674,   675,   676,
     677,   678,    90,    58,   120,   679,   694,   695,   357,   735,
     736,   743,   744,   358,   359,   745,   746,   121,   360,   361,
     136,   362,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,   792,   793,   829,   830,    72,   122,
     150,   151,   123,   680,   152,   838,   839,   124,   153,   125,
     154,   155,   156,   332,   899,   900,   354,   932,   839,   825,
     826,   126,   355,   356,   860,   861,   127,   333,   334,   157,
     158,   128,   129,   159,   160,   130,    73,   138,   131,   132,
     133,   134,   161,   162,   681,   682,   135,   139,   163,   164,
     141,   142,   143,   177,   357,   175,   179,   184,   565,   358,
     359,   256,   191,   196,   360,   361,   197,   362,   200,   204,
     223,   257,   258,   259,   260,   590,   261,   262,   198,   263,
     257,   258,   259,   260,   205,   261,   262,   206,   263,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   224,   216,
     217,   218,   219,   220,   221,   222,   301,   305,   307,   311,
     314,   324,   235,   329,   237,   255,   225,   226,   227,   228,
     229,   230,   242,   236,   269,   238,   239,   240,   241,   243,
     250,   244,   245,   300,   246,   248,   249,   251,   266,   252,
     303,   267,   253,   268,   309,   313,   316,   332,   346,   339,
     375,   376,   378,   379,   380,   377,   146,   381,   386,   387,
     388,   390,   391,   392,   411,  -349,   442,   148,  -350,   397,
     151,   399,   445,  -351,   393,   394,   395,   401,   396,   153,
     398,   403,   405,   400,   402,   404,   406,   407,   408,   409,
     410,   414,   412,   415,   420,   416,   417,   158,   422,   160,
     454,   438,   418,   466,   419,   161,   421,   462,   423,   424,
     425,   474,   439,   426,   427,   428,   429,   430,   431,   450,
     458,   432,   433,   434,   435,   436,   451,   470,   483,   437,
     487,   476,   494,   342,   496,   501,   502,   503,   512,   506,
     513,   514,   517,   525,   562,   580,   515,   516,   518,   519,
     522,   523,   524,   520,   526,   521,   527,   528,   529,   584,
     530,   532,   534,   531,   537,   591,   533,   539,   535,   544,
     567,   561,   545,   536,   596,   538,   540,   549,   541,   542,
     593,   543,   546,   550,   547,   548,   551,   552,   556,   553,
     570,   576,   557,   588,   558,   571,   619,   600,   608,   559,
     560,   622,   624,   628,   714,   722,   807,   632,   627,   727,
     731,   741,   629,   742,   739,   637,   808,   639,   633,   817,
     833,   634,   631,   635,   641,   643,   638,   645,   647,   636,
     648,   642,   644,   646,   718,   650,   649,   640,   747,   651,
     101,   652,   653,   661,   752,   692,   654,   705,   655,   693,
     696,   662,   663,   699,   664,   665,   685,   702,   691,   708,
     697,   698,   734,   821,   749,   834,   837,   756,   801,   757,
     845,   762,   882,   890,   759,   843,   763,   760,   761,   905,
     758,   765,   767,   930,   945,   948,   764,   766,   770,   769,
     773,   775,    16,   794,   768,   783,   771,   774,   785,   786,
     804,   812,   776,   777,   954,   784,   772,   791,   797,   787,
     789,   814,   798,   799,   827,   828,   847,    19,   603,   851,
     788,   778,   846,   848,   849,   853,   856,   886,   862,   855,
     858,   852,   854,   602,   780,   850,   870,   618,   626,   857,
     859,   873,   868,   869,   875,   926,   918,   733,   871,   874,
     872,   895,   896,   898,   910,   897,   901,   912,   914,   906,
     916,   908,   865,   919,   933,   913,   915,   907,   936,   909,
     911,   938,   790,   934,   195,   863,   917,   935,   942,   941,
     952,   145,   701,   704,   803,   951,   937,   441,   879,   949,
     700,   950,   876,   920,   955,   956,   943,   878,   703,   921,
     944,   953,     0,   495,     0,     0,     0,   800,     0,     0,
       0,     0,     0,     0,     0,     0,   564,     0,     0,     0,
       0,     0,   569,   511,     0,     0,     0,     0,     0,   440,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   802,     0,     0,     0,     0,     0,     0,   276,
       0,   563,     0,   293,     0,   331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   319,     0,     0,   352,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   568,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   444,     0,
       0,   443,     0,     0,     0,     0,   449,     0,   448,   447,
     446,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   566
};

static const yytype_int16 yycheck[] =
{
     208,   120,   647,   248,     3,   213,   214,   215,     3,   217,
       5,     6,   220,   221,     4,     3,     3,     3,     3,   418,
       3,     3,   142,     5,     6,     3,     3,     3,   427,   149,
     142,   154,    23,    24,     3,     3,     3,     6,   161,     7,
       3,   154,     3,   156,     5,     6,     3,   159,     5,     6,
     140,   141,     3,     3,   147,   174,   175,     3,    22,     3,
     149,     3,     3,     3,   144,   154,   140,     3,   142,   143,
       3,   159,     3,   161,    64,     3,   147,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,   212,     3,     3,     3,   216,     3,   218,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,    67,    67,   124,   125,   126,
       0,   128,   129,   130,   131,   132,   142,   134,   135,   432,
     145,   434,   435,   436,   148,   140,   141,   142,   143,   140,
     137,   140,   142,   152,   149,   140,   141,   152,   140,   141,
     142,   143,   140,   141,   142,   160,   152,   157,   158,   152,
     152,   153,   160,   140,   419,   152,   152,   140,   160,   140,
     141,   142,   143,   140,   141,   142,   143,   155,   156,   140,
     140,   152,   142,   148,   140,   152,   140,   141,   142,   160,
     140,   141,   847,   160,   140,   141,   142,   140,   141,   140,
     141,     3,   140,   141,   140,   140,   140,   140,   140,   140,
     140,   140,   140,   140,   140,   140,   140,   140,   140,   140,
     157,   140,   140,   140,   140,   140,    11,   140,   140,   140,
     140,   140,   140,   140,   140,   140,   140,   140,   140,   140,
     140,   140,   140,   140,   140,   140,   140,   140,   140,   140,
     140,   140,     8,    10,   140,   139,   140,    59,   139,   140,
      62,   145,   146,    20,   140,   141,    68,    69,   153,   154,
      26,    27,   159,   150,   161,   153,   154,    34,    34,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,   150,    50,   144,    61,   153,   154,   100,   153,
     154,   153,   154,   105,   106,   153,   154,   149,   110,   111,
     151,   113,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,   153,   154,   153,   154,    61,   152,
      86,    87,   152,    99,    90,   153,   154,   152,    94,   152,
      96,    97,    98,    59,   153,   154,    62,   153,   154,   776,
     777,   152,    68,    69,   825,   826,   152,   240,   241,   115,
     116,   152,   152,   119,   120,   152,    99,   140,   152,   152,
     152,   152,   128,   129,   140,   141,   152,    12,   134,   135,
     148,   148,     3,    66,   100,   159,    66,    66,   517,   105,
     106,     3,    66,   148,   110,   111,   140,   113,   140,   144,
     154,    13,    14,    15,    16,   534,    18,    19,   155,    21,
      13,    14,    15,    16,   144,    18,    19,   144,    21,   144,
     144,   144,   144,   144,   144,   144,   144,   144,   154,   144,
     144,   144,   144,   144,   144,   144,    88,    91,    28,    35,
      95,    67,   144,    73,   144,   140,   154,   154,   154,   154,
     154,   154,   144,   154,   142,   154,   154,   154,   154,   153,
     144,   154,   153,   140,   154,   154,   153,   153,   149,   154,
     130,   149,   154,   149,   121,   117,   148,    59,   153,    81,
     153,   149,   140,   140,    20,   156,     8,   140,   154,   154,
     154,   154,   154,   154,   161,   154,     9,    27,   154,   144,
      87,   144,    96,   154,   154,   154,   154,   144,   154,    94,
     154,   144,   144,   154,   154,   154,   154,   144,   154,   144,
     144,   144,   142,   154,   153,   144,   154,   116,   144,   120,
      89,   140,   154,    29,   152,   128,   153,    92,   153,   152,
     154,    36,   150,   154,   154,   152,   152,   152,   152,   135,
     131,   152,   152,   152,   152,   152,   136,   122,    77,   154,
      74,   140,    78,   137,    20,    70,    70,   101,    17,   102,
     140,   144,   144,   161,     5,    93,   154,   154,   154,   154,
     144,   144,   144,   154,   144,   154,   154,   144,   154,    30,
     144,   144,   144,   154,   144,    37,   154,   144,   154,   144,
     117,   140,   144,   154,    78,   154,   154,   144,   154,   153,
     118,   154,   153,   144,   154,   153,   144,   144,   144,   154,
     140,   132,   154,   123,   153,   140,   104,    75,    82,   154,
     154,   107,   112,   154,    31,    38,   765,   144,   148,    79,
      76,    20,   154,    20,    83,   144,    32,   144,   154,    40,
       3,   154,   161,   154,   144,   144,   154,   144,   144,   161,
     144,   154,   154,   154,   124,   144,   154,   161,   103,   154,
     152,   154,   153,   144,   108,   144,   153,   136,   153,   144,
     144,   154,   154,   140,   154,   153,   153,   140,   154,   133,
     153,   153,   153,    80,   152,     3,   104,   149,   118,   154,
      10,   144,    33,    41,   154,   109,   144,   154,   154,    25,
     161,   144,   144,    42,     3,    39,   161,   154,   144,   148,
     144,   144,     4,   140,   154,   144,   154,   154,   144,   144,
     140,   125,   154,   154,   952,   153,   161,   144,   144,   153,
     153,   140,   154,   154,   153,   150,   144,    12,   543,   144,
     744,   736,   154,   154,   154,   144,   144,   126,   140,   149,
     144,   154,   154,   541,   140,   161,   144,   553,   560,   154,
     153,   144,   153,   153,   144,   127,   901,   652,   153,   153,
     839,   153,   153,   150,   144,   153,   152,   144,   144,   154,
     140,   154,   140,   148,   143,   154,   154,   161,   144,   161,
     161,   144,   746,   154,   136,   830,   900,   154,   149,   153,
     144,   101,   629,   634,   761,   154,   161,   384,   849,   161,
     628,   161,   846,   906,   161,   161,   934,   848,   633,   908,
     935,   951,    -1,   425,    -1,    -1,    -1,   757,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   516,    -1,    -1,    -1,
      -1,    -1,   521,   437,    -1,    -1,    -1,    -1,    -1,   382,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   760,    -1,    -1,    -1,    -1,    -1,    -1,   206,
      -1,   515,    -1,   216,    -1,   239,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   234,    -1,    -1,   252,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,    -1,
      -1,   387,    -1,    -1,    -1,    -1,   394,    -1,   393,   392,
     391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   518
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    22,   163,   164,   165,   166,   167,     0,   139,   140,
     145,   146,   169,   170,   171,   172,   166,   144,   172,   170,
       3,     7,   155,   156,   173,   174,   175,   176,   177,   178,
     244,   245,   259,   260,   147,   140,   142,   143,   168,   147,
     172,     4,    64,   142,   157,   158,   246,   142,   261,   172,
     145,   148,   150,   157,   140,   247,   148,   262,   172,   140,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    61,    99,   179,   180,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   217,   218,   234,
     150,    11,   248,     3,     5,     6,   140,   141,   142,   143,
     149,   152,   160,   263,   264,   265,   266,   267,   268,   273,
     279,   284,   285,   293,   302,   311,   313,   314,   315,   318,
     144,   149,   152,   152,   152,   152,   152,   152,   152,   152,
     152,   152,   152,   152,   152,   152,   151,   140,   140,    12,
     249,   148,   148,     3,   153,   263,     8,    26,    27,    34,
      86,    87,    90,    94,    96,    97,    98,   115,   116,   119,
     120,   128,   129,   134,   135,   269,   274,   280,   286,   294,
     303,   312,   316,   149,   154,   159,   264,    66,   188,    66,
     181,   181,   181,   181,    66,   189,   181,   181,   181,   181,
     181,    66,   190,   181,   181,   180,   148,   140,   155,   250,
     140,   140,   141,   153,   144,   144,   144,   144,   144,   144,
     144,   144,   144,   144,   144,   144,   144,   144,   144,   144,
     144,   144,   144,   154,   154,   154,   154,   154,   154,   154,
     154,   264,   264,   142,   319,   144,   154,   144,   154,   154,
     154,   154,   144,   153,   154,   153,   154,   213,   154,   153,
     144,   153,   154,   154,   235,   140,     3,    13,    14,    15,
      16,    18,    19,    21,   251,   252,   149,   149,   149,   142,
       3,   140,   142,   272,     3,   160,   285,     3,   140,   272,
       3,   140,     3,   140,     3,   140,   264,   272,   272,   272,
     140,   142,   264,   267,   272,   264,     3,   140,   272,   272,
     140,    88,   270,   130,   275,    91,   281,    28,   287,   121,
     295,    35,   304,   117,    95,   317,   148,   321,   320,   321,
       3,   140,   141,   142,    67,   182,     3,   140,   141,    73,
     191,   191,    59,   238,   238,     3,   140,   141,   142,    81,
     199,     3,   137,   214,   215,   216,   153,   182,     3,   140,
     141,   142,   199,     3,    62,    68,    69,   100,   105,   106,
     110,   111,   113,   228,   229,   230,   231,   232,   233,   236,
     237,   238,   239,   242,   243,   153,   149,   156,   140,   140,
      20,   140,   253,   258,   154,   156,   154,   154,   154,   161,
     154,   154,   154,   154,   154,   154,   154,   144,   154,   144,
     154,   144,   154,   144,   154,   144,   154,   144,   154,   144,
     144,   161,   142,   322,   144,   154,   144,   154,   154,   152,
     153,   153,   144,   153,   152,   154,   154,   154,   152,   152,
     152,   152,   152,   152,   152,   152,   152,   154,   140,   150,
     258,   252,     9,   286,   269,    96,   316,   312,   294,   274,
     135,   136,     3,   140,    89,   271,     3,   140,   131,   276,
       3,   140,    92,   282,     3,   140,    29,   289,     3,   140,
     122,   296,     3,   140,    36,   305,   140,     3,   140,   142,
     149,     3,   140,    77,   195,     3,   140,    74,   192,   192,
       3,   182,     3,   140,    78,   216,    20,   183,   192,     3,
      67,    70,    70,   101,   219,   219,   102,   220,   219,   219,
     219,   237,    17,   140,   144,   154,   154,   144,   154,   154,
     154,   154,   144,   144,   144,   161,   144,   154,   144,   154,
     144,   154,   144,   154,   144,   154,   154,   144,   154,   144,
     154,   154,   153,   154,   144,   144,   153,   154,   153,   144,
     144,   144,   144,   154,   153,   154,   144,   154,   153,   154,
     154,   140,     5,   287,   270,   264,   317,   117,   295,   275,
     140,   140,     3,   140,     3,   140,   132,   277,     3,   140,
      93,   283,     3,   140,    30,   288,     3,   140,   123,   297,
     264,    37,   306,   118,     3,   140,    78,   196,     3,   140,
      75,   193,   193,   183,     3,   140,     3,   152,    82,   200,
       3,   140,     3,   152,     3,   152,     3,   140,   220,   104,
       3,   140,   107,   222,   112,   225,   225,   148,   154,   154,
     161,   161,   144,   154,   154,   154,   161,   144,   154,   144,
     161,   144,   154,   144,   154,   144,   154,   144,   144,   154,
     144,   154,   154,   153,   153,   153,     3,   140,   141,   184,
     186,   144,   154,   154,   154,   153,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    61,
      99,   140,   141,   185,   187,   153,    23,    24,   140,   240,
     241,   154,   144,   144,   153,   154,   144,   153,   153,   140,
     289,   271,   140,   296,   276,   136,     3,   140,   133,   278,
       3,   140,     3,   140,    31,   290,     3,   140,   124,   298,
       3,     6,    38,   307,   268,     3,   140,    79,   197,     3,
     140,    76,   194,   194,   153,   153,   154,     3,   152,    83,
     201,    20,    20,   153,   154,   153,   154,   103,   221,   152,
       3,   140,   108,   223,     3,   140,   149,   154,   161,   154,
     154,   154,   144,   144,   161,   144,   154,   144,   154,   148,
     144,   154,   161,   144,   154,   144,   154,   154,   186,     3,
     140,   254,   255,   144,   153,   144,   144,   153,   187,   153,
     241,   144,   153,   154,   140,   226,   227,   144,   154,   154,
     288,   118,   297,   277,   140,     3,   140,   264,    32,   291,
       3,   140,   125,   299,   140,     3,   140,    40,   308,     3,
     140,    80,   198,     3,   140,   195,   195,   153,   150,   153,
     154,     3,   152,     3,     3,     3,   140,   104,   153,   154,
       3,   140,   141,   109,   224,    10,   154,   144,   154,   154,
     161,   144,   154,   144,   154,   149,   144,   154,   144,   153,
     235,   235,   140,   255,     3,   140,   256,   257,   153,   153,
     144,   153,   227,   144,   153,   144,   290,   268,   298,   278,
       3,   140,    33,   292,     3,   140,   126,   300,     3,   140,
      41,   309,     3,   140,   141,   153,   153,   153,   150,   153,
     154,   152,     3,   140,   141,    25,   154,   161,   154,   161,
     144,   161,   144,   154,   144,   154,   140,   257,   226,   148,
     291,   299,     3,   140,     3,   140,   127,   301,     3,   140,
      42,   310,   153,   143,   154,   154,   144,   161,   144,   154,
     161,   153,   149,   292,   300,     3,     3,   140,    39,   161,
     161,   154,   144,   301,   272,   161,   161
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   162,   163,   164,   164,   165,   165,   166,   167,   168,
     168,   168,   169,   169,   170,   171,   171,   171,   171,   171,
     172,   172,   173,   173,   173,   174,   175,   175,   175,   176,
     177,   178,   179,   179,   180,   180,   180,   180,   180,   180,
     180,   180,   180,   180,   180,   180,   180,   180,   181,   181,
     181,   182,   182,   183,   183,   183,   184,   184,   185,   185,
     185,   186,   186,   187,   187,   187,   187,   187,   187,   187,
     187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
     188,   188,   188,   188,   189,   189,   189,   189,   190,   190,
     190,   190,   191,   191,   192,   192,   193,   193,   194,   194,
     195,   195,   196,   196,   197,   197,   198,   198,   198,   199,
     199,   200,   200,   200,   201,   201,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   213,
     213,   214,   214,   215,   215,   216,   217,   218,   219,   219,
     220,   220,   221,   221,   222,   222,   223,   223,   223,   224,
     224,   224,   225,   225,   226,   226,   227,   227,   228,   228,
     229,   229,   230,   231,   231,   232,   233,   234,   235,   235,
     235,   236,   236,   237,   237,   237,   237,   237,   237,   237,
     237,   237,   237,   238,   238,   239,   239,   240,   240,   240,
     241,   241,   241,   242,   242,   243,   243,   243,   244,   245,
     245,   246,   246,   246,   246,   247,   248,   248,   249,   249,
     250,   250,   250,   251,   251,   252,   252,   252,   252,   252,
     252,   252,   253,   253,   254,   254,   254,   255,   256,   256,
     256,   257,   258,   259,   260,   260,   261,   262,   262,   263,
     263,   264,   264,   264,   264,   264,   264,   264,   264,   264,
     264,   264,   264,   264,   264,   264,   264,   264,   264,   264,
     264,   264,   264,   265,   266,   267,   268,   268,   269,   269,
     270,   270,   271,   271,   272,   272,   272,   273,   273,   274,
     274,   275,   275,   276,   276,   277,   277,   278,   278,   279,
     279,   280,   280,   281,   281,   282,   282,   283,   283,   284,
     285,   286,   286,   287,   287,   288,   288,   289,   289,   290,
     291,   291,   292,   292,   293,   293,   294,   295,   295,   296,
     296,   297,   297,   298,   298,   299,   299,   300,   300,   301,
     302,   302,   303,   303,   304,   304,   305,   306,   306,   307,
     307,   308,   308,   309,   309,   310,   310,   311,   311,   312,
     312,   312,   313,   313,   314,   314,   315,   315,   316,   316,
     317,   317,   318,   318,   319,   319,   320,   320,   321,   322,
     322
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     0,     1,     1,     2,     3,     1,     1,
       1,     1,     1,     2,     2,     2,     1,     1,     3,     5,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     6,
       5,     4,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     3,
       3,     3,     3,     3,     5,     5,     1,     3,     0,     1,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     5,     5,     3,     5,     5,    14,    15,    15,
      12,     6,     6,     4,     6,     4,     8,     4,     2,     0,
       2,     1,     3,     6,     6,     1,     5,     4,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     1,     3,     0,     1,     8,    14,
       4,    10,     4,     6,    10,     6,     6,     5,     2,     0,
       2,     1,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     4,     6,     6,     8,     0,     1,     3,
       1,     1,     1,     6,     8,     4,    10,    10,     1,     1,
       1,     1,     1,     2,     1,     6,     0,     2,     0,     2,
       0,     3,     3,     1,     3,     1,     1,     2,     2,     1,
       2,     5,     1,     2,     0,     1,     3,     3,     0,     1,
       3,     3,     3,     7,     0,     2,     1,     2,     3,     1,
       3,     1,     1,     1,     4,     4,     4,     1,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     2,     3,     3,     3,
       3,     3,     3,     3,     1,     1,     1,    11,     7,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,    15,
      11,     3,     3,     3,     3,     3,     3,     3,     3,     9,
      19,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,    19,    15,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
      21,    17,     3,     3,     3,     3,     3,     6,     3,     3,
       3,     3,     3,     3,     3,     3,     3,    21,    17,     3,
       3,     3,    15,    11,    13,     9,     9,     5,     3,     3,
       3,     3,     9,     5,     0,     2,     0,     1,     3,     1,
       2
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static unsigned
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  unsigned res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  YYUSE (yylocationp);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                       , &(yylsp[(yyi + 1) - (yynrhs)])                       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;
/* Location data for the lookahead symbol.  */
YYLTYPE yylloc
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
/* Number of syntax errors so far.  */
int yynerrs;


/*----------.
| yyparse.  |
`----------*/

int
yyparse (void)
{
    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.
       'yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yyls1, yysize * sizeof (*yylsp),
                    &yystacksize);

        yyls = yyls1;
        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex ();
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 365 "parser.y" /* yacc.c:1646  */
    {
    (yyval.string) = NULL;    /* The parser output is in out_script */
}
#line 2473 "parser.cc" /* yacc.c:1646  */
    break;

  case 3:
#line 371 "parser.y" /* yacc.c:1646  */
    { (yyval.option) = NULL;
    parse_and_finalize_config(invocation);}
#line 2480 "parser.cc" /* yacc.c:1646  */
    break;

  case 4:
#line 373 "parser.y" /* yacc.c:1646  */
    {
    (yyval.option) = (yyvsp[0].option);
    parse_and_finalize_config(invocation);
}
#line 2489 "parser.cc" /* yacc.c:1646  */
    break;

  case 5:
#line 380 "parser.y" /* yacc.c:1646  */
    {
    out_script->addOption((yyvsp[0].option));
    (yyval.option) = (yyvsp[0].option);    /* return the tail so we can append to it */
}
#line 2498 "parser.cc" /* yacc.c:1646  */
    break;

  case 6:
#line 384 "parser.y" /* yacc.c:1646  */
    {
    out_script->addOption((yyvsp[0].option));
    (yyval.option) = (yyvsp[0].option);    /* return the tail so we can append to it */
}
#line 2507 "parser.cc" /* yacc.c:1646  */
    break;

  case 7:
#line 391 "parser.y" /* yacc.c:1646  */
    {
    (yyval.option) = new PacketDrillOption((yyvsp[-2].string), (yyvsp[0].string));
}
#line 2515 "parser.cc" /* yacc.c:1646  */
    break;

  case 8:
#line 396 "parser.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].reserved); }
#line 2521 "parser.cc" /* yacc.c:1646  */
    break;

  case 9:
#line 400 "parser.y" /* yacc.c:1646  */
    { (yyval.string) = strdup(yytext); }
#line 2527 "parser.cc" /* yacc.c:1646  */
    break;

  case 10:
#line 401 "parser.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 2533 "parser.cc" /* yacc.c:1646  */
    break;

  case 11:
#line 402 "parser.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 2539 "parser.cc" /* yacc.c:1646  */
    break;

  case 12:
#line 407 "parser.y" /* yacc.c:1646  */
    {
    out_script->addEvent((yyvsp[0].event));    /* save pointer to event list as output of parser */
    (yyval.event) = (yyvsp[0].event);    /* return the tail so that we can append to it */
}
#line 2548 "parser.cc" /* yacc.c:1646  */
    break;

  case 13:
#line 411 "parser.y" /* yacc.c:1646  */
    {
    out_script->addEvent((yyvsp[0].event));
    (yyval.event) = (yyvsp[0].event);    /* return the tail so that we can append to it */
}
#line 2557 "parser.cc" /* yacc.c:1646  */
    break;

  case 14:
#line 418 "parser.y" /* yacc.c:1646  */
    {
    (yyval.event) = (yyvsp[0].event);
    (yyval.event)->setLineNumber((yyvsp[-1].event)->getLineNumber());    /* use timestamp's line */
    (yyval.event)->setEventTime((yyvsp[-1].event)->getEventTime());
    (yyval.event)->setEventTimeEnd((yyvsp[-1].event)->getEventTimeEnd());
    (yyval.event)->setTimeType((yyvsp[-1].event)->getTimeType());
    (yyvsp[-1].event)->getLineNumber(),
    (yyvsp[-1].event)->getEventTime().dbl(),
    (yyvsp[-1].event)->getEventTimeEnd().dbl(),
    (yyvsp[-1].event)->getTimeType();
    if ((yyval.event)->getEventTimeEnd() != NO_TIME_RANGE) {
        if ((yyval.event)->getEventTimeEnd() < (yyval.event)->getEventTime())
            semantic_error("time range is backwards");
    }
    if ((yyval.event)->getTimeType() == ANY_TIME &&  ((yyval.event)->getType() != PACKET_EVENT ||
        ((yyval.event)->getPacket())->getDirection() != DIRECTION_OUTBOUND)) {
        yylineno = (yyval.event)->getLineNumber();
        semantic_error("event time <star> can only be used with outbound packets");
    } else if (((yyval.event)->getTimeType() == ABSOLUTE_RANGE_TIME ||
        (yyval.event)->getTimeType() == RELATIVE_RANGE_TIME) &&
        ((yyval.event)->getType() != PACKET_EVENT ||
        ((yyval.event)->getPacket())->getDirection() != DIRECTION_OUTBOUND)) {
        yylineno = (yyval.event)->getLineNumber();
        semantic_error("event time range can only be used with outbound packets");
    }
    delete((yyvsp[-1].event));
}
#line 2589 "parser.cc" /* yacc.c:1646  */
    break;

  case 15:
#line 448 "parser.y" /* yacc.c:1646  */
    {
    (yyval.event) = new PacketDrillEvent(INVALID_EVENT);
    (yyval.event)->setLineNumber((yylsp[0]).first_line);
    (yyval.event)->setEventTime((yyvsp[0].time_usecs));
    (yyval.event)->setTimeType(RELATIVE_TIME);
}
#line 2600 "parser.cc" /* yacc.c:1646  */
    break;

  case 16:
#line 454 "parser.y" /* yacc.c:1646  */
    {
    (yyval.event) = new PacketDrillEvent(INVALID_EVENT);
    (yyval.event)->setLineNumber((yylsp[0]).first_line);
    (yyval.event)->setEventTime((yyvsp[0].time_usecs));
    (yyval.event)->setTimeType(ABSOLUTE_TIME);
}
#line 2611 "parser.cc" /* yacc.c:1646  */
    break;

  case 17:
#line 460 "parser.y" /* yacc.c:1646  */
    {
    (yyval.event) = new PacketDrillEvent(INVALID_EVENT);
    (yyval.event)->setLineNumber((yylsp[0]).first_line);
    (yyval.event)->setTimeType(ANY_TIME);
}
#line 2621 "parser.cc" /* yacc.c:1646  */
    break;

  case 18:
#line 465 "parser.y" /* yacc.c:1646  */
    {
    (yyval.event) = new PacketDrillEvent(INVALID_EVENT);
    (yyval.event)->setLineNumber((yylsp[-2]).first_line);
    (yyval.event)->setTimeType(ABSOLUTE_RANGE_TIME);
    (yyval.event)->setEventTime((yyvsp[-2].time_usecs));
    (yyval.event)->setEventTimeEnd((yyvsp[0].time_usecs));
}
#line 2633 "parser.cc" /* yacc.c:1646  */
    break;

  case 19:
#line 472 "parser.y" /* yacc.c:1646  */
    {
    (yyval.event) = new PacketDrillEvent(INVALID_EVENT);
    (yyval.event)->setLineNumber((yylsp[-4]).first_line);
    (yyval.event)->setTimeType(RELATIVE_RANGE_TIME);
    (yyval.event)->setEventTime((yyvsp[-3].time_usecs));
    (yyval.event)->setEventTimeEnd((yyvsp[0].time_usecs));
}
#line 2645 "parser.cc" /* yacc.c:1646  */
    break;

  case 20:
#line 482 "parser.y" /* yacc.c:1646  */
    {
    if ((yyvsp[0].floating) < 0) {
        semantic_error("negative time");
    }
    (yyval.time_usecs) = (int64)((yyvsp[0].floating) * 1.0e6); /* convert float secs to s64 microseconds */
}
#line 2656 "parser.cc" /* yacc.c:1646  */
    break;

  case 21:
#line 488 "parser.y" /* yacc.c:1646  */
    {
    if ((yyvsp[0].integer) < 0) {
        semantic_error("negative time");
    }
    (yyval.time_usecs) = (int64)((yyvsp[0].integer) * 1000000); /* convert int secs to s64 microseconds */
}
#line 2667 "parser.cc" /* yacc.c:1646  */
    break;

  case 22:
#line 497 "parser.y" /* yacc.c:1646  */
    {
    if ((yyvsp[0].packet)) {
        (yyval.event) = new PacketDrillEvent(PACKET_EVENT);  (yyval.event)->setPacket((yyvsp[0].packet));
    } else {
        (yyval.event) = NULL;
    }
}
#line 2679 "parser.cc" /* yacc.c:1646  */
    break;

  case 23:
#line 504 "parser.y" /* yacc.c:1646  */
    {
    (yyval.event) = new PacketDrillEvent(SYSCALL_EVENT);
    (yyval.event)->setSyscall((yyvsp[0].syscall));
}
#line 2688 "parser.cc" /* yacc.c:1646  */
    break;

  case 24:
#line 508 "parser.y" /* yacc.c:1646  */
    {
    (yyval.event) = new PacketDrillEvent(COMMAND_EVENT);
    (yyval.event)->setCommand((yyvsp[0].command));
}
#line 2697 "parser.cc" /* yacc.c:1646  */
    break;

  case 25:
#line 515 "parser.y" /* yacc.c:1646  */
    {
    (yyval.command) = (struct command_spec *)calloc(1, sizeof(struct command_spec));
    (yyval.command)->command_line = (yyvsp[0].reserved);
}
#line 2706 "parser.cc" /* yacc.c:1646  */
    break;

  case 26:
#line 522 "parser.y" /* yacc.c:1646  */
    {
    (yyval.packet) = (yyvsp[0].packet);
}
#line 2714 "parser.cc" /* yacc.c:1646  */
    break;

  case 27:
#line 525 "parser.y" /* yacc.c:1646  */
    {
    (yyval.packet) = (yyvsp[0].packet);
}
#line 2722 "parser.cc" /* yacc.c:1646  */
    break;

  case 28:
#line 528 "parser.y" /* yacc.c:1646  */
    {
    (yyval.packet) = (yyvsp[0].packet);
}
#line 2730 "parser.cc" /* yacc.c:1646  */
    break;

  case 29:
#line 534 "parser.y" /* yacc.c:1646  */
    {
    char *error = NULL;
    PacketDrillPacket *outer = (yyvsp[-5].packet), *inner = NULL;
    enum direction_t direction = outer->getDirection();

    if (((yyvsp[0].tcp_options) == NULL) && (direction != DIRECTION_OUTBOUND)) {
        yylineno = (yylsp[0]).first_line;
        printf("<...> for TCP options can only be used with outbound packets");
    }
    Packet *pkt = PacketDrill::buildTCPPacket(in_config->getWireProtocol(), direction,
                                               (yyvsp[-4].string),
                                               (yyvsp[-3].tcp_sequence_info).start_sequence, (yyvsp[-3].tcp_sequence_info).payload_bytes,
                                               (yyvsp[-2].sequence_number), (yyvsp[-1].window), (yyvsp[0].tcp_options), &error);

    free((yyvsp[-4].string));

    inner = new PacketDrillPacket();
    inner->setInetPacket(pkt);

    inner->setDirection(direction);

    (yyval.packet) = inner;
}
#line 2758 "parser.cc" /* yacc.c:1646  */
    break;

  case 30:
#line 560 "parser.y" /* yacc.c:1646  */
    {
    char *error = NULL;
    PacketDrillPacket *outer = (yyvsp[-4].packet), *inner = NULL;

    enum direction_t direction = outer->getDirection();
    Packet* pkt = PacketDrill::buildUDPPacket(in_config->getWireProtocol(), direction, (yyvsp[-1].integer), &error);
    if (direction == DIRECTION_INBOUND)
        pkt->setName("parserInbound");
    else
        pkt->setName("parserOutbound");
    inner = new PacketDrillPacket();
    inner->setInetPacket(pkt);
    inner->setDirection(direction);

    (yyval.packet) = inner;
}
#line 2779 "parser.cc" /* yacc.c:1646  */
    break;

  case 31:
#line 579 "parser.y" /* yacc.c:1646  */
    {
    PacketDrillPacket *inner = NULL;
    enum direction_t direction = (yyvsp[-3].packet)->getDirection();
    Packet* pkt = PacketDrill::buildSCTPPacket(in_config->getWireProtocol(), direction, (yyvsp[0].sctp_chunk_list));
    if (pkt) {
        if (direction == DIRECTION_INBOUND)
            pkt->setName("parserInbound");
        else
            pkt->setName("parserOutbound");
        inner = new PacketDrillPacket();
        inner->setInetPacket(pkt);
        inner->setDirection(direction);
    } else {
        semantic_error("inbound packets must be fully specified");
    }
    (yyval.packet) = inner;
}
#line 2801 "parser.cc" /* yacc.c:1646  */
    break;

  case 32:
#line 599 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk_list) = new cQueue("sctpChunkList");
                                   (yyval.sctp_chunk_list)->insert((cObject*)(yyvsp[0].sctp_chunk)); }
#line 2808 "parser.cc" /* yacc.c:1646  */
    break;

  case 33:
#line 601 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk_list) = (yyvsp[-2].sctp_chunk_list);
                                   (yyval.sctp_chunk_list)->insert((yyvsp[0].sctp_chunk)); }
#line 2815 "parser.cc" /* yacc.c:1646  */
    break;

  case 34:
#line 607 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2821 "parser.cc" /* yacc.c:1646  */
    break;

  case 35:
#line 608 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2827 "parser.cc" /* yacc.c:1646  */
    break;

  case 36:
#line 609 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2833 "parser.cc" /* yacc.c:1646  */
    break;

  case 37:
#line 610 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2839 "parser.cc" /* yacc.c:1646  */
    break;

  case 38:
#line 611 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2845 "parser.cc" /* yacc.c:1646  */
    break;

  case 39:
#line 612 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2851 "parser.cc" /* yacc.c:1646  */
    break;

  case 40:
#line 613 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2857 "parser.cc" /* yacc.c:1646  */
    break;

  case 41:
#line 614 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2863 "parser.cc" /* yacc.c:1646  */
    break;

  case 42:
#line 615 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2869 "parser.cc" /* yacc.c:1646  */
    break;

  case 43:
#line 616 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2875 "parser.cc" /* yacc.c:1646  */
    break;

  case 44:
#line 617 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2881 "parser.cc" /* yacc.c:1646  */
    break;

  case 45:
#line 618 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2887 "parser.cc" /* yacc.c:1646  */
    break;

  case 46:
#line 619 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2893 "parser.cc" /* yacc.c:1646  */
    break;

  case 47:
#line 620 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2899 "parser.cc" /* yacc.c:1646  */
    break;

  case 48:
#line 625 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 2905 "parser.cc" /* yacc.c:1646  */
    break;

  case 49:
#line 626 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        semantic_error("flags value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2916 "parser.cc" /* yacc.c:1646  */
    break;

  case 50:
#line 632 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        semantic_error("flags value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2927 "parser.cc" /* yacc.c:1646  */
    break;

  case 51:
#line 641 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 2933 "parser.cc" /* yacc.c:1646  */
    break;

  case 52:
#line 642 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("length value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2944 "parser.cc" /* yacc.c:1646  */
    break;

  case 53:
#line 651 "parser.y" /* yacc.c:1646  */
    { (yyval.byte_list) = NULL; }
#line 2950 "parser.cc" /* yacc.c:1646  */
    break;

  case 54:
#line 652 "parser.y" /* yacc.c:1646  */
    { (yyval.byte_list) = NULL; }
#line 2956 "parser.cc" /* yacc.c:1646  */
    break;

  case 55:
#line 653 "parser.y" /* yacc.c:1646  */
    { (yyval.byte_list) = (yyvsp[-1].byte_list); }
#line 2962 "parser.cc" /* yacc.c:1646  */
    break;

  case 56:
#line 657 "parser.y" /* yacc.c:1646  */
    { (yyval.byte_list) = new PacketDrillBytes((yyvsp[0].byte)); }
#line 2968 "parser.cc" /* yacc.c:1646  */
    break;

  case 57:
#line 658 "parser.y" /* yacc.c:1646  */
    { (yyval.byte_list) = (yyvsp[-2].byte_list);
                       (yyvsp[-2].byte_list)->appendByte((yyvsp[0].byte)); }
#line 2975 "parser.cc" /* yacc.c:1646  */
    break;

  case 58:
#line 663 "parser.y" /* yacc.c:1646  */
    { (yyval.byte_list) = new PacketDrillBytes();}
#line 2981 "parser.cc" /* yacc.c:1646  */
    break;

  case 59:
#line 664 "parser.y" /* yacc.c:1646  */
    { (yyval.byte_list) = new PacketDrillBytes((yyvsp[0].integer));}
#line 2987 "parser.cc" /* yacc.c:1646  */
    break;

  case 60:
#line 665 "parser.y" /* yacc.c:1646  */
    { (yyval.byte_list) = (yyvsp[-2].byte_list);
                       (yyvsp[-2].byte_list)->appendByte((yyvsp[0].integer)); }
#line 2994 "parser.cc" /* yacc.c:1646  */
    break;

  case 61:
#line 670 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        semantic_error("byte value out of range");
    }
    (yyval.byte) = (yyvsp[0].integer);
}
#line 3005 "parser.cc" /* yacc.c:1646  */
    break;

  case 62:
#line 676 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        semantic_error("byte value out of range");
    }
    (yyval.byte) = (yyvsp[0].integer);
}
#line 3016 "parser.cc" /* yacc.c:1646  */
    break;

  case 63:
#line 685 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        semantic_error("type value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3027 "parser.cc" /* yacc.c:1646  */
    break;

  case 64:
#line 691 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        semantic_error("type value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3038 "parser.cc" /* yacc.c:1646  */
    break;

  case 65:
#line 697 "parser.y" /* yacc.c:1646  */
    {
    (yyval.integer) = SCTP_DATA_CHUNK_TYPE;
}
#line 3046 "parser.cc" /* yacc.c:1646  */
    break;

  case 66:
#line 700 "parser.y" /* yacc.c:1646  */
    {
    (yyval.integer) = SCTP_INIT_CHUNK_TYPE;
}
#line 3054 "parser.cc" /* yacc.c:1646  */
    break;

  case 67:
#line 703 "parser.y" /* yacc.c:1646  */
    {
    (yyval.integer) = SCTP_INIT_ACK_CHUNK_TYPE;
}
#line 3062 "parser.cc" /* yacc.c:1646  */
    break;

  case 68:
#line 706 "parser.y" /* yacc.c:1646  */
    {
    (yyval.integer) = SCTP_SACK_CHUNK_TYPE;
}
#line 3070 "parser.cc" /* yacc.c:1646  */
    break;

  case 69:
#line 709 "parser.y" /* yacc.c:1646  */
    {
    (yyval.integer) = SCTP_HEARTBEAT_CHUNK_TYPE;
}
#line 3078 "parser.cc" /* yacc.c:1646  */
    break;

  case 70:
#line 712 "parser.y" /* yacc.c:1646  */
    {
    (yyval.integer) = SCTP_HEARTBEAT_ACK_CHUNK_TYPE;
}
#line 3086 "parser.cc" /* yacc.c:1646  */
    break;

  case 71:
#line 715 "parser.y" /* yacc.c:1646  */
    {
    (yyval.integer) = SCTP_ABORT_CHUNK_TYPE;
}
#line 3094 "parser.cc" /* yacc.c:1646  */
    break;

  case 72:
#line 718 "parser.y" /* yacc.c:1646  */
    {
    (yyval.integer) = SCTP_SHUTDOWN_CHUNK_TYPE;
}
#line 3102 "parser.cc" /* yacc.c:1646  */
    break;

  case 73:
#line 721 "parser.y" /* yacc.c:1646  */
    {
    (yyval.integer) = SCTP_SHUTDOWN_ACK_CHUNK_TYPE;
}
#line 3110 "parser.cc" /* yacc.c:1646  */
    break;

  case 74:
#line 724 "parser.y" /* yacc.c:1646  */
    {
    (yyval.integer) = SCTP_ERROR_CHUNK_TYPE;
}
#line 3118 "parser.cc" /* yacc.c:1646  */
    break;

  case 75:
#line 727 "parser.y" /* yacc.c:1646  */
    {
    (yyval.integer) = SCTP_COOKIE_ECHO_CHUNK_TYPE;
}
#line 3126 "parser.cc" /* yacc.c:1646  */
    break;

  case 76:
#line 730 "parser.y" /* yacc.c:1646  */
    {
    (yyval.integer) = SCTP_COOKIE_ACK_CHUNK_TYPE;
}
#line 3134 "parser.cc" /* yacc.c:1646  */
    break;

  case 77:
#line 733 "parser.y" /* yacc.c:1646  */
    {
    (yyval.integer) = SCTP_SHUTDOWN_COMPLETE_CHUNK_TYPE;
}
#line 3142 "parser.cc" /* yacc.c:1646  */
    break;

  case 78:
#line 736 "parser.y" /* yacc.c:1646  */
    {
    (yyval.integer) = SCTP_PAD_CHUNK_TYPE;
}
#line 3150 "parser.cc" /* yacc.c:1646  */
    break;

  case 79:
#line 739 "parser.y" /* yacc.c:1646  */
    {
    (yyval.integer) = SCTP_RECONFIG_CHUNK_TYPE;
}
#line 3158 "parser.cc" /* yacc.c:1646  */
    break;

  case 80:
#line 745 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 3164 "parser.cc" /* yacc.c:1646  */
    break;

  case 81:
#line 746 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        semantic_error("flags value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3175 "parser.cc" /* yacc.c:1646  */
    break;

  case 82:
#line 752 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        semantic_error("flags value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3186 "parser.cc" /* yacc.c:1646  */
    break;

  case 83:
#line 758 "parser.y" /* yacc.c:1646  */
    {
    uint64 flags;
    char *c;

    flags = 0;
    for (c = (yyvsp[0].string); *c != '\0'; c++) {
        switch (*c) {
        case 'I':
            if (flags & SCTP_DATA_CHUNK_I_BIT) {
                semantic_error("I-bit specified multiple times");
            } else {
                flags |= SCTP_DATA_CHUNK_I_BIT;
            }
            break;
        case 'U':
            if (flags & SCTP_DATA_CHUNK_U_BIT) {
                semantic_error("U-bit specified multiple times");
            } else {
                flags |= SCTP_DATA_CHUNK_U_BIT;
            }
            break;
        case 'B':
            if (flags & SCTP_DATA_CHUNK_B_BIT) {
                semantic_error("B-bit specified multiple times");
            } else {
                flags |= SCTP_DATA_CHUNK_B_BIT;
            }
            break;
        case 'E':
            if (flags & SCTP_DATA_CHUNK_E_BIT) {
                semantic_error("E-bit specified multiple times");
            } else {
                flags |= SCTP_DATA_CHUNK_E_BIT;
            }
            break;
        default:
            semantic_error("Only expecting IUBE as flags");
        }
    }
    (yyval.integer) = flags;
}
#line 3232 "parser.cc" /* yacc.c:1646  */
    break;

  case 84:
#line 802 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 3238 "parser.cc" /* yacc.c:1646  */
    break;

  case 85:
#line 803 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        semantic_error("flags value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3249 "parser.cc" /* yacc.c:1646  */
    break;

  case 86:
#line 809 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        semantic_error("flags value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3260 "parser.cc" /* yacc.c:1646  */
    break;

  case 87:
#line 815 "parser.y" /* yacc.c:1646  */
    {
    uint64 flags;
    char *c;

    flags = 0;
    for (c = (yyvsp[0].string); *c != '\0'; c++) {
        switch (*c) {
        case 'T':
            if (flags & SCTP_ABORT_CHUNK_T_BIT) {
                semantic_error("T-bit specified multiple times");
            } else {
                flags |= SCTP_ABORT_CHUNK_T_BIT;
            }
            break;
        default:
            semantic_error("Only expecting T as flags");
        }
    }
    (yyval.integer) = flags;
}
#line 3285 "parser.cc" /* yacc.c:1646  */
    break;

  case 88:
#line 838 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 3291 "parser.cc" /* yacc.c:1646  */
    break;

  case 89:
#line 839 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        semantic_error("flags value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3302 "parser.cc" /* yacc.c:1646  */
    break;

  case 90:
#line 845 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        semantic_error("flags value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3313 "parser.cc" /* yacc.c:1646  */
    break;

  case 91:
#line 851 "parser.y" /* yacc.c:1646  */
    {
    uint64 flags;
    char *c;

    flags = 0;
    for (c = (yyvsp[0].string); *c != '\0'; c++) {
        switch (*c) {
        case 'T':
            if (flags & SCTP_SHUTDOWN_COMPLETE_CHUNK_T_BIT) {
                semantic_error("T-bit specified multiple times");
            } else {
                flags |= SCTP_SHUTDOWN_COMPLETE_CHUNK_T_BIT;
            }
            break;
        default:
            semantic_error("Only expecting T as flags");
        }
    }
    (yyval.integer) = flags;
}
#line 3338 "parser.cc" /* yacc.c:1646  */
    break;

  case 92:
#line 874 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 3344 "parser.cc" /* yacc.c:1646  */
    break;

  case 93:
#line 875 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("tag value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3355 "parser.cc" /* yacc.c:1646  */
    break;

  case 94:
#line 884 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 3361 "parser.cc" /* yacc.c:1646  */
    break;

  case 95:
#line 885 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("a_rwnd value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3372 "parser.cc" /* yacc.c:1646  */
    break;

  case 96:
#line 894 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 3378 "parser.cc" /* yacc.c:1646  */
    break;

  case 97:
#line 895 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("os value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3389 "parser.cc" /* yacc.c:1646  */
    break;

  case 98:
#line 904 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 3395 "parser.cc" /* yacc.c:1646  */
    break;

  case 99:
#line 905 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("is value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3406 "parser.cc" /* yacc.c:1646  */
    break;

  case 100:
#line 914 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 3412 "parser.cc" /* yacc.c:1646  */
    break;

  case 101:
#line 915 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("tsn value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3423 "parser.cc" /* yacc.c:1646  */
    break;

  case 102:
#line 924 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 3429 "parser.cc" /* yacc.c:1646  */
    break;

  case 103:
#line 925 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("sid value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3440 "parser.cc" /* yacc.c:1646  */
    break;

  case 104:
#line 934 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 3446 "parser.cc" /* yacc.c:1646  */
    break;

  case 105:
#line 935 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("ssn value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3457 "parser.cc" /* yacc.c:1646  */
    break;

  case 106:
#line 945 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 3463 "parser.cc" /* yacc.c:1646  */
    break;

  case 107:
#line 946 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("ppid value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3474 "parser.cc" /* yacc.c:1646  */
    break;

  case 108:
#line 952 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("ppid value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3485 "parser.cc" /* yacc.c:1646  */
    break;

  case 109:
#line 961 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 3491 "parser.cc" /* yacc.c:1646  */
    break;

  case 110:
#line 962 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("cum_tsn value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3502 "parser.cc" /* yacc.c:1646  */
    break;

  case 111:
#line 971 "parser.y" /* yacc.c:1646  */
    { (yyval.sack_block_list) = NULL; }
#line 3508 "parser.cc" /* yacc.c:1646  */
    break;

  case 112:
#line 972 "parser.y" /* yacc.c:1646  */
    { (yyval.sack_block_list) = NULL; }
#line 3514 "parser.cc" /* yacc.c:1646  */
    break;

  case 113:
#line 973 "parser.y" /* yacc.c:1646  */
    { (yyval.sack_block_list) = (yyvsp[-1].sack_block_list); }
#line 3520 "parser.cc" /* yacc.c:1646  */
    break;

  case 114:
#line 978 "parser.y" /* yacc.c:1646  */
    { (yyval.sack_block_list) = NULL; }
#line 3526 "parser.cc" /* yacc.c:1646  */
    break;

  case 115:
#line 979 "parser.y" /* yacc.c:1646  */
    { (yyval.sack_block_list) = NULL; }
#line 3532 "parser.cc" /* yacc.c:1646  */
    break;

  case 116:
#line 980 "parser.y" /* yacc.c:1646  */
    { (yyval.sack_block_list) = (yyvsp[-1].sack_block_list); }
#line 3538 "parser.cc" /* yacc.c:1646  */
    break;

  case 117:
#line 985 "parser.y" /* yacc.c:1646  */
    {
    if (((yyvsp[-9].integer) != -1) &&
        (!is_valid_u16((yyvsp[-9].integer)) || ((yyvsp[-9].integer) < SCTP_DATA_CHUNK_LENGTH))) {
        semantic_error("length value out of range");
    }
    (yyval.sctp_chunk) = PacketDrill::buildDataChunk((yyvsp[-11].integer), (yyvsp[-9].integer), (yyvsp[-7].integer), (yyvsp[-5].integer), (yyvsp[-3].integer), (yyvsp[-1].integer));
}
#line 3550 "parser.cc" /* yacc.c:1646  */
    break;

  case 118:
#line 994 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_chunk) = PacketDrill::buildInitChunk((yyvsp[-12].integer), (yyvsp[-10].integer), (yyvsp[-8].integer), (yyvsp[-6].integer), (yyvsp[-4].integer), (yyvsp[-2].integer), (yyvsp[-1].expression_list));
}
#line 3558 "parser.cc" /* yacc.c:1646  */
    break;

  case 119:
#line 999 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_chunk) = PacketDrill::buildInitAckChunk((yyvsp[-12].integer), (yyvsp[-10].integer), (yyvsp[-8].integer), (yyvsp[-6].integer), (yyvsp[-4].integer), (yyvsp[-2].integer), (yyvsp[-1].expression_list));
}
#line 3566 "parser.cc" /* yacc.c:1646  */
    break;

  case 120:
#line 1004 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_chunk) = PacketDrill::buildSackChunk((yyvsp[-9].integer), (yyvsp[-7].integer), (yyvsp[-5].integer), (yyvsp[-3].sack_block_list), (yyvsp[-1].sack_block_list));
}
#line 3574 "parser.cc" /* yacc.c:1646  */
    break;

  case 121:
#line 1009 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_chunk) = PacketDrill::buildHeartbeatChunk((yyvsp[-3].integer), (yyvsp[-1].sctp_parameter));
}
#line 3582 "parser.cc" /* yacc.c:1646  */
    break;

  case 122:
#line 1015 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_chunk) = PacketDrill::buildHeartbeatAckChunk((yyvsp[-3].integer), (yyvsp[-1].sctp_parameter));
}
#line 3590 "parser.cc" /* yacc.c:1646  */
    break;

  case 123:
#line 1021 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_chunk) = PacketDrill::buildAbortChunk((yyvsp[-1].integer));
}
#line 3598 "parser.cc" /* yacc.c:1646  */
    break;

  case 124:
#line 1026 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_chunk) = PacketDrill::buildShutdownChunk((yyvsp[-3].integer), (yyvsp[-1].integer));
}
#line 3606 "parser.cc" /* yacc.c:1646  */
    break;

  case 125:
#line 1031 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_chunk) = PacketDrill::buildShutdownAckChunk((yyvsp[-1].integer));
}
#line 3614 "parser.cc" /* yacc.c:1646  */
    break;

  case 126:
#line 1036 "parser.y" /* yacc.c:1646  */
    {
    if (((yyvsp[-3].integer) != -1) &&
        (!is_valid_u16((yyvsp[-3].integer)) || ((yyvsp[-3].integer) < SCTP_COOKIE_ACK_LENGTH))) {
        semantic_error("length value out of range");
    }
    if (((yyvsp[-3].integer) != -1) && ((yyvsp[-1].byte_list) != NULL) &&
        ((yyvsp[-3].integer) != SCTP_COOKIE_ACK_LENGTH + (yyvsp[-1].byte_list)->getListLength())) {
        semantic_error("length value incompatible with val");
    }
    if (((yyvsp[-3].integer) == -1) && ((yyvsp[-1].byte_list) != NULL)) {
        semantic_error("length needs to be specified");
    }
    (yyval.sctp_chunk) = PacketDrill::buildCookieEchoChunk((yyvsp[-5].integer), (yyvsp[-3].integer), (yyvsp[-1].byte_list));
}
#line 3633 "parser.cc" /* yacc.c:1646  */
    break;

  case 127:
#line 1052 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_chunk) = PacketDrill::buildCookieAckChunk((yyvsp[-1].integer));
}
#line 3641 "parser.cc" /* yacc.c:1646  */
    break;

  case 128:
#line 1057 "parser.y" /* yacc.c:1646  */
    { (yyval.cause_list) = NULL; }
#line 3647 "parser.cc" /* yacc.c:1646  */
    break;

  case 129:
#line 1058 "parser.y" /* yacc.c:1646  */
    { (yyval.cause_list) = new cQueue("empty"); }
#line 3653 "parser.cc" /* yacc.c:1646  */
    break;

  case 130:
#line 1059 "parser.y" /* yacc.c:1646  */
    { (yyval.cause_list) = (yyvsp[0].cause_list); }
#line 3659 "parser.cc" /* yacc.c:1646  */
    break;

  case 131:
#line 1063 "parser.y" /* yacc.c:1646  */
    { (yyval.cause_list) = new cQueue("cause list");
                                             (yyval.cause_list)->insert((yyvsp[0].cause_item)); }
#line 3666 "parser.cc" /* yacc.c:1646  */
    break;

  case 132:
#line 1065 "parser.y" /* yacc.c:1646  */
    { (yyval.cause_list) = (yyvsp[-2].cause_list);
                                             (yyval.cause_list)->insert((yyvsp[0].cause_item)); }
#line 3673 "parser.cc" /* yacc.c:1646  */
    break;

  case 133:
#line 1070 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[-1].integer))) {
        semantic_error("stream identifier out of range");
    }
    (yyval.cause_item) = new PacketDrillStruct(INVALID_STREAM_IDENTIFIER, (yyvsp[-1].integer));
}
#line 3684 "parser.cc" /* yacc.c:1646  */
    break;

  case 134:
#line 1076 "parser.y" /* yacc.c:1646  */
    {
    (yyval.cause_item) = new PacketDrillStruct(INVALID_STREAM_IDENTIFIER, -1);
}
#line 3692 "parser.cc" /* yacc.c:1646  */
    break;

  case 135:
#line 1081 "parser.y" /* yacc.c:1646  */
    { (yyval.cause_item) = (yyvsp[0].cause_item); }
#line 3698 "parser.cc" /* yacc.c:1646  */
    break;

  case 136:
#line 1085 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_chunk) = PacketDrill::buildErrorChunk((yyvsp[-2].integer), (yyvsp[-1].cause_list));
}
#line 3706 "parser.cc" /* yacc.c:1646  */
    break;

  case 137:
#line 1090 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_chunk) = PacketDrill::buildShutdownCompleteChunk((yyvsp[-1].integer));
}
#line 3714 "parser.cc" /* yacc.c:1646  */
    break;

  case 138:
#line 1096 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("req_sn out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3725 "parser.cc" /* yacc.c:1646  */
    break;

  case 139:
#line 1102 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 3731 "parser.cc" /* yacc.c:1646  */
    break;

  case 140:
#line 1106 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("resp_sn out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3742 "parser.cc" /* yacc.c:1646  */
    break;

  case 141:
#line 1112 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 3748 "parser.cc" /* yacc.c:1646  */
    break;

  case 142:
#line 1116 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
    semantic_error("last_tsn out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3759 "parser.cc" /* yacc.c:1646  */
    break;

  case 143:
#line 1122 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 3765 "parser.cc" /* yacc.c:1646  */
    break;

  case 144:
#line 1126 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
    semantic_error("result out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3776 "parser.cc" /* yacc.c:1646  */
    break;

  case 145:
#line 1132 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 3782 "parser.cc" /* yacc.c:1646  */
    break;

  case 146:
#line 1136 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
    semantic_error("sender_next_tsn out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3793 "parser.cc" /* yacc.c:1646  */
    break;

  case 147:
#line 1142 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
    semantic_error("sender_next_tsn out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3804 "parser.cc" /* yacc.c:1646  */
    break;

  case 148:
#line 1148 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 3810 "parser.cc" /* yacc.c:1646  */
    break;

  case 149:
#line 1152 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
    semantic_error("receiver_next_tsn out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3821 "parser.cc" /* yacc.c:1646  */
    break;

  case 150:
#line 1158 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("receiver_next_tsn out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3832 "parser.cc" /* yacc.c:1646  */
    break;

  case 151:
#line 1164 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 3838 "parser.cc" /* yacc.c:1646  */
    break;

  case 152:
#line 1168 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("number_of_new_streams out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 3849 "parser.cc" /* yacc.c:1646  */
    break;

  case 153:
#line 1174 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 3855 "parser.cc" /* yacc.c:1646  */
    break;

  case 154:
#line 1178 "parser.y" /* yacc.c:1646  */
    {
    (yyval.stream_list) = new cQueue("stream_list");
    (yyval.stream_list)->insert((yyvsp[0].expression));
}
#line 3864 "parser.cc" /* yacc.c:1646  */
    break;

  case 155:
#line 1182 "parser.y" /* yacc.c:1646  */
    {
    (yyval.stream_list) = (yyvsp[-2].stream_list); (yyval.stream_list)->insert((yyvsp[0].expression));
}
#line 3872 "parser.cc" /* yacc.c:1646  */
    break;

  case 156:
#line 1188 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new_integer_expression(-1, "%d");
}
#line 3880 "parser.cc" /* yacc.c:1646  */
    break;

  case 157:
#line 1191 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("Stream number value out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 3891 "parser.cc" /* yacc.c:1646  */
    break;

  case 158:
#line 1201 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(OUTGOING_RESET_REQUEST_PARAMETER, 16, new PacketDrillStruct((yyvsp[-5].integer), (yyvsp[-3].integer), (yyvsp[-1].integer), -2, NULL));
}
#line 3899 "parser.cc" /* yacc.c:1646  */
    break;

  case 159:
#line 1204 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(OUTGOING_RESET_REQUEST_PARAMETER, 16, new PacketDrillStruct((yyvsp[-11].integer), (yyvsp[-9].integer), (yyvsp[-7].integer), -2, (yyvsp[-2].stream_list)));
}
#line 3907 "parser.cc" /* yacc.c:1646  */
    break;

  case 160:
#line 1210 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(INCOMING_RESET_REQUEST_PARAMETER, 8, new PacketDrillStruct((yyvsp[-1].integer), -2, -2, -2, NULL));
}
#line 3915 "parser.cc" /* yacc.c:1646  */
    break;

  case 161:
#line 1213 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(INCOMING_RESET_REQUEST_PARAMETER, 8, new PacketDrillStruct((yyvsp[-7].integer), -2, -2, -2, (yyvsp[-2].stream_list)));
}
#line 3923 "parser.cc" /* yacc.c:1646  */
    break;

  case 162:
#line 1219 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(SSN_TSN_RESET_REQUEST_PARAMETER, 8, new PacketDrillStruct((yyvsp[-1].integer), -2, -2, -2, NULL));
}
#line 3931 "parser.cc" /* yacc.c:1646  */
    break;

  case 163:
#line 1225 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(STREAM_RESET_RESPONSE_PARAMETER, 8, new PacketDrillStruct((yyvsp[-3].integer), (yyvsp[-1].integer), -2, -2, NULL));
}
#line 3939 "parser.cc" /* yacc.c:1646  */
    break;

  case 164:
#line 1228 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(STREAM_RESET_RESPONSE_PARAMETER, 12, new PacketDrillStruct((yyvsp[-7].integer), (yyvsp[-5].integer), (yyvsp[-3].integer), (yyvsp[-1].integer), NULL));
}
#line 3947 "parser.cc" /* yacc.c:1646  */
    break;

  case 165:
#line 1234 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(ADD_OUTGOING_STREAMS_REQUEST_PARAMETER, 12, new PacketDrillStruct((yyvsp[-3].integer), (yyvsp[-1].integer), -2, -2, NULL));
}
#line 3955 "parser.cc" /* yacc.c:1646  */
    break;

  case 166:
#line 1240 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(ADD_INCOMING_STREAMS_REQUEST_PARAMETER, 12, new PacketDrillStruct((yyvsp[-3].integer), (yyvsp[-1].integer), -2, -2, NULL));
}
#line 3963 "parser.cc" /* yacc.c:1646  */
    break;

  case 167:
#line 1252 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_chunk) = PacketDrill::buildReconfigChunk((yyvsp[-2].integer), (yyvsp[-1].expression_list));
}
#line 3971 "parser.cc" /* yacc.c:1646  */
    break;

  case 168:
#line 1258 "parser.y" /* yacc.c:1646  */
    { (yyval.expression_list) = NULL; }
#line 3977 "parser.cc" /* yacc.c:1646  */
    break;

  case 169:
#line 1259 "parser.y" /* yacc.c:1646  */
    { (yyval.expression_list) = new cQueue("empty"); }
#line 3983 "parser.cc" /* yacc.c:1646  */
    break;

  case 170:
#line 1260 "parser.y" /* yacc.c:1646  */
    { (yyval.expression_list) = (yyvsp[0].expression_list); }
#line 3989 "parser.cc" /* yacc.c:1646  */
    break;

  case 171:
#line 1264 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression_list) = new cQueue("sctp_parameter_list");
    (yyval.expression_list)->insert((yyvsp[0].sctp_parameter));
}
#line 3998 "parser.cc" /* yacc.c:1646  */
    break;

  case 172:
#line 1268 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression_list) = (yyvsp[-2].expression_list);
    (yyval.expression_list)->insert((yyvsp[0].sctp_parameter));
}
#line 4007 "parser.cc" /* yacc.c:1646  */
    break;

  case 173:
#line 1276 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_parameter) = (yyvsp[0].sctp_parameter); }
#line 4013 "parser.cc" /* yacc.c:1646  */
    break;

  case 174:
#line 1277 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_parameter) = (yyvsp[0].sctp_parameter); }
#line 4019 "parser.cc" /* yacc.c:1646  */
    break;

  case 175:
#line 1278 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_parameter) = (yyvsp[0].sctp_parameter); }
#line 4025 "parser.cc" /* yacc.c:1646  */
    break;

  case 176:
#line 1279 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_parameter) = (yyvsp[0].sctp_parameter); }
#line 4031 "parser.cc" /* yacc.c:1646  */
    break;

  case 177:
#line 1280 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_parameter) = (yyvsp[0].sctp_parameter); }
#line 4037 "parser.cc" /* yacc.c:1646  */
    break;

  case 178:
#line 1281 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_parameter) = (yyvsp[0].sctp_parameter); }
#line 4043 "parser.cc" /* yacc.c:1646  */
    break;

  case 179:
#line 1282 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_parameter) = (yyvsp[0].sctp_parameter); }
#line 4049 "parser.cc" /* yacc.c:1646  */
    break;

  case 180:
#line 1283 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_parameter) = (yyvsp[0].sctp_parameter); }
#line 4055 "parser.cc" /* yacc.c:1646  */
    break;

  case 181:
#line 1284 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_parameter) = (yyvsp[0].sctp_parameter); }
#line 4061 "parser.cc" /* yacc.c:1646  */
    break;

  case 182:
#line 1285 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_parameter) = (yyvsp[0].sctp_parameter); }
#line 4067 "parser.cc" /* yacc.c:1646  */
    break;

  case 183:
#line 1290 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(HEARTBEAT_INFORMATION, -1, NULL);
}
#line 4075 "parser.cc" /* yacc.c:1646  */
    break;

  case 184:
#line 1293 "parser.y" /* yacc.c:1646  */
    {
    if (((yyvsp[-3].integer) != -1) &&
        (!is_valid_u16((yyvsp[-3].integer)) || ((yyvsp[-3].integer) < 4))) {
        semantic_error("length value out of range");
    }
    if (((yyvsp[-3].integer) != -1) && ((yyvsp[-1].byte_list) != NULL) &&
        ((yyvsp[-3].integer) != 4 + (yyvsp[-1].byte_list)->getListLength())) {
        semantic_error("length value incompatible with val");
    }
    if (((yyvsp[-3].integer) == -1) && ((yyvsp[-1].byte_list) != NULL)) {
        semantic_error("length needs to be specified");
    }
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(HEARTBEAT_INFORMATION, (yyvsp[-3].integer), (yyvsp[-1].byte_list));
}
#line 4094 "parser.cc" /* yacc.c:1646  */
    break;

  case 185:
#line 1309 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(SUPPORTED_EXTENSIONS, -1, NULL);
}
#line 4102 "parser.cc" /* yacc.c:1646  */
    break;

  case 186:
#line 1312 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(SUPPORTED_EXTENSIONS, (yyvsp[-2].byte_list)->getListLength(), (yyvsp[-2].byte_list));
}
#line 4110 "parser.cc" /* yacc.c:1646  */
    break;

  case 187:
#line 1317 "parser.y" /* yacc.c:1646  */
    { (yyval.stream_list) = new cQueue("empty_address_types_list");
}
#line 4117 "parser.cc" /* yacc.c:1646  */
    break;

  case 188:
#line 1319 "parser.y" /* yacc.c:1646  */
    { (yyval.stream_list) = new cQueue("address_types_list");
                                        (yyval.stream_list)->insert((yyvsp[0].expression));
}
#line 4125 "parser.cc" /* yacc.c:1646  */
    break;

  case 189:
#line 1322 "parser.y" /* yacc.c:1646  */
    { (yyval.stream_list) = (yyvsp[-2].stream_list);
                                        (yyval.stream_list)->insert((yyvsp[0].expression));
}
#line 4133 "parser.cc" /* yacc.c:1646  */
    break;

  case 190:
#line 1328 "parser.y" /* yacc.c:1646  */
    { if (!is_valid_u16((yyvsp[0].integer))) {
                  semantic_error("address type value out of range");
                  }
                  (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u"); }
#line 4142 "parser.cc" /* yacc.c:1646  */
    break;

  case 191:
#line 1332 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new_integer_expression(SCTP_IPV4_ADDRESS_PARAMETER_TYPE, "%u"); }
#line 4148 "parser.cc" /* yacc.c:1646  */
    break;

  case 192:
#line 1333 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new_integer_expression(SCTP_IPV6_ADDRESS_PARAMETER_TYPE, "%u"); }
#line 4154 "parser.cc" /* yacc.c:1646  */
    break;

  case 193:
#line 1337 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(SUPPORTED_ADDRESS_TYPES, -1, NULL);
}
#line 4162 "parser.cc" /* yacc.c:1646  */
    break;

  case 194:
#line 1340 "parser.y" /* yacc.c:1646  */
    {
(yyvsp[-2].stream_list)->setName("SupportedAddressTypes");
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(SUPPORTED_ADDRESS_TYPES, (yyvsp[-2].stream_list)->getLength(), (yyvsp[-2].stream_list));
}
#line 4171 "parser.cc" /* yacc.c:1646  */
    break;

  case 195:
#line 1346 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(STATE_COOKIE, -1, NULL);
}
#line 4179 "parser.cc" /* yacc.c:1646  */
    break;

  case 196:
#line 1349 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(STATE_COOKIE, -1, NULL);
}
#line 4187 "parser.cc" /* yacc.c:1646  */
    break;

  case 197:
#line 1352 "parser.y" /* yacc.c:1646  */
    {
    if (((yyvsp[-5].integer) < 4) || !is_valid_u32((yyvsp[-5].integer))) {
        semantic_error("len value out of range");
    }
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(STATE_COOKIE, (yyvsp[-5].integer), NULL);
}
#line 4198 "parser.cc" /* yacc.c:1646  */
    break;

  case 198:
#line 1362 "parser.y" /* yacc.c:1646  */
    {
    (yyval.packet) = new PacketDrillPacket();
    (yyval.packet)->setDirection((yyvsp[0].direction));
}
#line 4207 "parser.cc" /* yacc.c:1646  */
    break;

  case 199:
#line 1370 "parser.y" /* yacc.c:1646  */
    {
    (yyval.direction) = DIRECTION_INBOUND;
    current_script_line = yylineno;
}
#line 4216 "parser.cc" /* yacc.c:1646  */
    break;

  case 200:
#line 1374 "parser.y" /* yacc.c:1646  */
    {
    (yyval.direction) = DIRECTION_OUTBOUND;
    current_script_line = yylineno;
}
#line 4225 "parser.cc" /* yacc.c:1646  */
    break;

  case 201:
#line 1381 "parser.y" /* yacc.c:1646  */
    {
    (yyval.string) = (yyvsp[0].string);
}
#line 4233 "parser.cc" /* yacc.c:1646  */
    break;

  case 202:
#line 1384 "parser.y" /* yacc.c:1646  */
    {
    (yyval.string) = strdup(".");
}
#line 4241 "parser.cc" /* yacc.c:1646  */
    break;

  case 203:
#line 1387 "parser.y" /* yacc.c:1646  */
    {
    asprintf(&((yyval.string)), "%s.", (yyvsp[-1].string));
    free((yyvsp[-1].string));
}
#line 4250 "parser.cc" /* yacc.c:1646  */
    break;

  case 204:
#line 1391 "parser.y" /* yacc.c:1646  */
    {
    (yyval.string) = strdup("");
}
#line 4258 "parser.cc" /* yacc.c:1646  */
    break;

  case 205:
#line 1397 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[-5].integer))) {
        semantic_error("TCP start sequence number out of range");
    }
    if (!is_valid_u32((yyvsp[-3].integer))) {
        semantic_error("TCP end sequence number out of range");
    }
    if (!is_valid_u16((yyvsp[-1].integer))) {
        semantic_error("TCP payload size out of range");
    }
    if ((yyvsp[-3].integer) != ((yyvsp[-5].integer) +(yyvsp[-1].integer))) {
        semantic_error("inconsistent TCP sequence numbers and payload size");
    }
    (yyval.tcp_sequence_info).start_sequence = (yyvsp[-5].integer);
    (yyval.tcp_sequence_info).payload_bytes = (yyvsp[-1].integer);
    (yyval.tcp_sequence_info).protocol = IPPROTO_TCP;
}
#line 4280 "parser.cc" /* yacc.c:1646  */
    break;

  case 206:
#line 1417 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sequence_number) = 0;
}
#line 4288 "parser.cc" /* yacc.c:1646  */
    break;

  case 207:
#line 1420 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("TCP ack sequence number out of range");
    }
    (yyval.sequence_number) = (yyvsp[0].integer);
}
#line 4299 "parser.cc" /* yacc.c:1646  */
    break;

  case 208:
#line 1429 "parser.y" /* yacc.c:1646  */
    {
    (yyval.window) = -1;
}
#line 4307 "parser.cc" /* yacc.c:1646  */
    break;

  case 209:
#line 1432 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("TCP window value out of range");
    }
    (yyval.window) = (yyvsp[0].integer);
}
#line 4318 "parser.cc" /* yacc.c:1646  */
    break;

  case 210:
#line 1441 "parser.y" /* yacc.c:1646  */
    {
    (yyval.tcp_options) = new cQueue("opt_tcp_options");
}
#line 4326 "parser.cc" /* yacc.c:1646  */
    break;

  case 211:
#line 1444 "parser.y" /* yacc.c:1646  */
    {
    (yyval.tcp_options) = (yyvsp[-1].tcp_options);
}
#line 4334 "parser.cc" /* yacc.c:1646  */
    break;

  case 212:
#line 1447 "parser.y" /* yacc.c:1646  */
    {
    (yyval.tcp_options) = NULL; /* FLAG_OPTIONS_NOCHECK */
}
#line 4342 "parser.cc" /* yacc.c:1646  */
    break;

  case 213:
#line 1454 "parser.y" /* yacc.c:1646  */
    {
    (yyval.tcp_options) = new cQueue("tcp_option");
    (yyval.tcp_options)->insert((yyvsp[0].tcp_option));
}
#line 4351 "parser.cc" /* yacc.c:1646  */
    break;

  case 214:
#line 1458 "parser.y" /* yacc.c:1646  */
    {
    (yyval.tcp_options) = (yyvsp[-2].tcp_options);
    (yyval.tcp_options)->insert((yyvsp[0].tcp_option));
}
#line 4360 "parser.cc" /* yacc.c:1646  */
    break;

  case 215:
#line 1466 "parser.y" /* yacc.c:1646  */
    {
    (yyval.tcp_option) = new PacketDrillTcpOption(TCPOPT_NOP, 1);
}
#line 4368 "parser.cc" /* yacc.c:1646  */
    break;

  case 216:
#line 1469 "parser.y" /* yacc.c:1646  */
    {
    (yyval.tcp_option) = new PacketDrillTcpOption(TCPOPT_EOL, 1);
}
#line 4376 "parser.cc" /* yacc.c:1646  */
    break;

  case 217:
#line 1472 "parser.y" /* yacc.c:1646  */
    {
    (yyval.tcp_option) = new PacketDrillTcpOption(TCPOPT_MAXSEG, TCPOLEN_MAXSEG);
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("mss value out of range");
    }
    (yyval.tcp_option)->setMss((yyvsp[0].integer));
}
#line 4388 "parser.cc" /* yacc.c:1646  */
    break;

  case 218:
#line 1479 "parser.y" /* yacc.c:1646  */
    {
    (yyval.tcp_option) = new PacketDrillTcpOption(TCPOPT_WINDOW, TCPOLEN_WINDOW);
    if (!is_valid_u8((yyvsp[0].integer))) {
        semantic_error("window scale shift count out of range");
    }
    (yyval.tcp_option)->setWindowScale((yyvsp[0].integer));
}
#line 4400 "parser.cc" /* yacc.c:1646  */
    break;

  case 219:
#line 1486 "parser.y" /* yacc.c:1646  */
    {
    (yyval.tcp_option) = new PacketDrillTcpOption(TCPOPT_SACK_PERMITTED, TCPOLEN_SACK_PERMITTED);
}
#line 4408 "parser.cc" /* yacc.c:1646  */
    break;

  case 220:
#line 1489 "parser.y" /* yacc.c:1646  */
    {
    (yyval.tcp_option) = new PacketDrillTcpOption(TCPOPT_SACK, 2+8*(yyvsp[0].sack_block_list)->getLength());
    (yyval.tcp_option)->setBlockList((yyvsp[0].sack_block_list));
}
#line 4417 "parser.cc" /* yacc.c:1646  */
    break;

  case 221:
#line 1493 "parser.y" /* yacc.c:1646  */
    {
    uint32 val, ecr;
    (yyval.tcp_option) = new PacketDrillTcpOption(TCPOPT_TIMESTAMP, TCPOLEN_TIMESTAMP);
    if (!is_valid_u32((yyvsp[-2].integer))) {
        semantic_error("ts val out of range");
    }
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("ecr val out of range");
    }
    val = (yyvsp[-2].integer);
    ecr = (yyvsp[0].integer);
    (yyval.tcp_option)->setVal(val);
    (yyval.tcp_option)->setEcr(ecr);
}
#line 4436 "parser.cc" /* yacc.c:1646  */
    break;

  case 222:
#line 1510 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sack_block_list) = new cQueue("sack_block_list");
    (yyval.sack_block_list)->insert((yyvsp[0].sack_block));
}
#line 4445 "parser.cc" /* yacc.c:1646  */
    break;

  case 223:
#line 1514 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sack_block_list) = (yyvsp[-1].sack_block_list); (yyval.sack_block_list)->insert((yyvsp[0].sack_block));
}
#line 4453 "parser.cc" /* yacc.c:1646  */
    break;

  case 224:
#line 1520 "parser.y" /* yacc.c:1646  */
    { (yyval.sack_block_list) = new cQueue("gap_list");}
#line 4459 "parser.cc" /* yacc.c:1646  */
    break;

  case 225:
#line 1521 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sack_block_list) = new cQueue("gap_list");
    (yyval.sack_block_list)->insert((yyvsp[0].sack_block));
}
#line 4468 "parser.cc" /* yacc.c:1646  */
    break;

  case 226:
#line 1525 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sack_block_list) = (yyvsp[-2].sack_block_list); (yyval.sack_block_list)->insert((yyvsp[0].sack_block));
}
#line 4476 "parser.cc" /* yacc.c:1646  */
    break;

  case 227:
#line 1531 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[-2].integer))) {
        semantic_error("start value out of range");
    }
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("end value out of range");
    }
    (yyval.sack_block) = new PacketDrillStruct((yyvsp[-2].integer), (yyvsp[0].integer));
}
#line 4490 "parser.cc" /* yacc.c:1646  */
    break;

  case 228:
#line 1543 "parser.y" /* yacc.c:1646  */
    { (yyval.sack_block_list) = new cQueue("dup_list");}
#line 4496 "parser.cc" /* yacc.c:1646  */
    break;

  case 229:
#line 1544 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sack_block_list) = new cQueue("dup_list");
    (yyval.sack_block_list)->insert((yyvsp[0].sack_block));
}
#line 4505 "parser.cc" /* yacc.c:1646  */
    break;

  case 230:
#line 1548 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sack_block_list) = (yyvsp[-2].sack_block_list); (yyval.sack_block_list)->insert((yyvsp[0].sack_block));
}
#line 4513 "parser.cc" /* yacc.c:1646  */
    break;

  case 231:
#line 1554 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[-2].integer))) {
        semantic_error("start value out of range");
    }
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("end value out of range");
    }
    (yyval.sack_block) = new PacketDrillStruct((yyvsp[-2].integer), (yyvsp[0].integer));
}
#line 4527 "parser.cc" /* yacc.c:1646  */
    break;

  case 232:
#line 1566 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[-2].integer))) {
        semantic_error("TCP SACK left sequence number out of range\n");
    }
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("TCP SACK right sequence number out of range");
    }
    PacketDrillStruct *block = new PacketDrillStruct((yyvsp[-2].integer), (yyvsp[0].integer));
    (yyval.sack_block) = block;
}
#line 4542 "parser.cc" /* yacc.c:1646  */
    break;

  case 233:
#line 1579 "parser.y" /* yacc.c:1646  */
    {
    (yyval.syscall) = (struct syscall_spec *)calloc(1, sizeof(struct syscall_spec));
    (yyval.syscall)->end_usecs = (yyvsp[-6].time_usecs);
    (yyval.syscall)->name = (yyvsp[-5].string);
    (yyval.syscall)->arguments = (yyvsp[-4].expression_list);
    (yyval.syscall)->result = (yyvsp[-2].expression);
    (yyval.syscall)->error = (yyvsp[-1].errno_info);
    (yyval.syscall)->note = (yyvsp[0].string);
}
#line 4556 "parser.cc" /* yacc.c:1646  */
    break;

  case 234:
#line 1591 "parser.y" /* yacc.c:1646  */
    {
    (yyval.time_usecs) = -1;
}
#line 4564 "parser.cc" /* yacc.c:1646  */
    break;

  case 235:
#line 1594 "parser.y" /* yacc.c:1646  */
    {
    (yyval.time_usecs) = (yyvsp[0].time_usecs);
}
#line 4572 "parser.cc" /* yacc.c:1646  */
    break;

  case 236:
#line 1600 "parser.y" /* yacc.c:1646  */
    {
    (yyval.string) = (yyvsp[0].string);
    current_script_line = yylineno;
}
#line 4581 "parser.cc" /* yacc.c:1646  */
    break;

  case 237:
#line 1607 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression_list) = NULL;
}
#line 4589 "parser.cc" /* yacc.c:1646  */
    break;

  case 238:
#line 1610 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression_list) = (yyvsp[-1].expression_list);
}
#line 4597 "parser.cc" /* yacc.c:1646  */
    break;

  case 239:
#line 1616 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression_list) = new cQueue("new_expressionList");
    (yyval.expression_list)->insert((cObject*)(yyvsp[0].expression));
}
#line 4606 "parser.cc" /* yacc.c:1646  */
    break;

  case 240:
#line 1620 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression_list) = (yyvsp[-2].expression_list);
    (yyval.expression_list)->insert((yyvsp[0].expression));
}
#line 4615 "parser.cc" /* yacc.c:1646  */
    break;

  case 241:
#line 1627 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS);
}
#line 4623 "parser.cc" /* yacc.c:1646  */
    break;

  case 242:
#line 1630 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = (yyvsp[0].expression); }
#line 4630 "parser.cc" /* yacc.c:1646  */
    break;

  case 243:
#line 1632 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 4638 "parser.cc" /* yacc.c:1646  */
    break;

  case 244:
#line 1635 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[-1].integer))) {
        semantic_error("number out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[-1].integer), "%lu");
}
#line 4649 "parser.cc" /* yacc.c:1646  */
    break;

  case 245:
#line 1641 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[-1].integer))) {
        semantic_error("number out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[-1].integer), "%lu");
}
#line 4660 "parser.cc" /* yacc.c:1646  */
    break;

  case 246:
#line 1647 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[-1].integer))) {
        semantic_error("number out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[-1].integer), "%lu");
}
#line 4671 "parser.cc" /* yacc.c:1646  */
    break;

  case 247:
#line 1653 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_WORD);
    (yyval.expression)->setString((yyvsp[0].string));
}
#line 4680 "parser.cc" /* yacc.c:1646  */
    break;

  case 248:
#line 1657 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_STRING);
    (yyval.expression)->setString((yyvsp[0].string));
    (yyval.expression)->setFormat("\"%s\"");
}
#line 4690 "parser.cc" /* yacc.c:1646  */
    break;

  case 249:
#line 1662 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_STRING);
    (yyval.expression)->setString((yyvsp[-1].string));
    (yyval.expression)->setFormat("\"%s\"...");
}
#line 4700 "parser.cc" /* yacc.c:1646  */
    break;

  case 250:
#line 1667 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 4708 "parser.cc" /* yacc.c:1646  */
    break;

  case 251:
#line 1670 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 4716 "parser.cc" /* yacc.c:1646  */
    break;

  case 252:
#line 1673 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 4724 "parser.cc" /* yacc.c:1646  */
    break;

  case 253:
#line 1676 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 4732 "parser.cc" /* yacc.c:1646  */
    break;

  case 254:
#line 1679 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 4740 "parser.cc" /* yacc.c:1646  */
    break;

  case 255:
#line 1682 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 4748 "parser.cc" /* yacc.c:1646  */
    break;

  case 256:
#line 1685 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 4756 "parser.cc" /* yacc.c:1646  */
    break;

  case 257:
#line 1688 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 4764 "parser.cc" /* yacc.c:1646  */
    break;

  case 258:
#line 1691 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 4772 "parser.cc" /* yacc.c:1646  */
    break;

  case 259:
#line 1694 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 4780 "parser.cc" /* yacc.c:1646  */
    break;

  case 260:
#line 1697 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 4788 "parser.cc" /* yacc.c:1646  */
    break;

  case 261:
#line 1700 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 4796 "parser.cc" /* yacc.c:1646  */
    break;

  case 262:
#line 1703 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 4804 "parser.cc" /* yacc.c:1646  */
    break;

  case 263:
#line 1711 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%ld");
}
#line 4812 "parser.cc" /* yacc.c:1646  */
    break;

  case 264:
#line 1717 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%#lx");
}
#line 4820 "parser.cc" /* yacc.c:1646  */
    break;

  case 265:
#line 1723 "parser.y" /* yacc.c:1646  */
    {    /* bitwise OR */
    (yyval.expression) = new PacketDrillExpression(EXPR_BINARY);
    struct binary_expression *binary = (struct binary_expression *) malloc(sizeof(struct binary_expression));
    binary->op = strdup("|");
    binary->lhs = (yyvsp[-2].expression);
    binary->rhs = (yyvsp[0].expression);
    (yyval.expression)->setBinary(binary);
}
#line 4833 "parser.cc" /* yacc.c:1646  */
    break;

  case 266:
#line 1734 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_LIST);
    (yyval.expression)->setList(NULL);
}
#line 4842 "parser.cc" /* yacc.c:1646  */
    break;

  case 267:
#line 1738 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_LIST);
    (yyval.expression)->setList((yyvsp[-1].expression_list));
}
#line 4851 "parser.cc" /* yacc.c:1646  */
    break;

  case 268:
#line 1745 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("srto_initial out of range\n");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 4862 "parser.cc" /* yacc.c:1646  */
    break;

  case 269:
#line 1751 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS);
}
#line 4870 "parser.cc" /* yacc.c:1646  */
    break;

  case 270:
#line 1757 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 4878 "parser.cc" /* yacc.c:1646  */
    break;

  case 271:
#line 1760 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 4884 "parser.cc" /* yacc.c:1646  */
    break;

  case 272:
#line 1764 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 4892 "parser.cc" /* yacc.c:1646  */
    break;

  case 273:
#line 1767 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 4898 "parser.cc" /* yacc.c:1646  */
    break;

  case 274:
#line 1771 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 4906 "parser.cc" /* yacc.c:1646  */
    break;

  case 275:
#line 1774 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_WORD);
    (yyval.expression)->setString((yyvsp[0].string));
}
#line 4915 "parser.cc" /* yacc.c:1646  */
    break;

  case 276:
#line 1778 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 4921 "parser.cc" /* yacc.c:1646  */
    break;

  case 277:
#line 1782 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_RTOINFO);
    struct sctp_rtoinfo_expr *rtoinfo = (struct sctp_rtoinfo_expr *) malloc(sizeof(struct sctp_rtoinfo_expr));
    rtoinfo->srto_assoc_id = (yyvsp[-7].expression);
    rtoinfo->srto_initial = (yyvsp[-5].expression);
    rtoinfo->srto_max = (yyvsp[-3].expression);
    rtoinfo->srto_min = (yyvsp[-1].expression);
    (yyval.expression)->setRtoinfo(rtoinfo);
}
#line 4935 "parser.cc" /* yacc.c:1646  */
    break;

  case 278:
#line 1791 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_RTOINFO);
    struct sctp_rtoinfo_expr *rtoinfo = (struct sctp_rtoinfo_expr *) malloc(sizeof(struct sctp_rtoinfo_expr));
    rtoinfo->srto_assoc_id = new PacketDrillExpression(EXPR_ELLIPSIS);
    rtoinfo->srto_initial = (yyvsp[-5].expression);
    rtoinfo->srto_max = (yyvsp[-3].expression);
    rtoinfo->srto_min = (yyvsp[-1].expression);
    (yyval.expression)->setRtoinfo(rtoinfo);
}
#line 4949 "parser.cc" /* yacc.c:1646  */
    break;

  case 279:
#line 1803 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("sasoc_asocmaxrxt out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%hu");
}
#line 4960 "parser.cc" /* yacc.c:1646  */
    break;

  case 280:
#line 1809 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 4966 "parser.cc" /* yacc.c:1646  */
    break;

  case 281:
#line 1813 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("sasoc_number_peer_destinations out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%hu");
}
#line 4977 "parser.cc" /* yacc.c:1646  */
    break;

  case 282:
#line 1819 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 4983 "parser.cc" /* yacc.c:1646  */
    break;

  case 283:
#line 1823 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("sasoc_peer_rwnd out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 4994 "parser.cc" /* yacc.c:1646  */
    break;

  case 284:
#line 1829 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5000 "parser.cc" /* yacc.c:1646  */
    break;

  case 285:
#line 1833 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("sasoc_local_rwnd out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 5011 "parser.cc" /* yacc.c:1646  */
    break;

  case 286:
#line 1839 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5017 "parser.cc" /* yacc.c:1646  */
    break;

  case 287:
#line 1843 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("sasoc_cookie_life out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 5028 "parser.cc" /* yacc.c:1646  */
    break;

  case 288:
#line 1849 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5034 "parser.cc" /* yacc.c:1646  */
    break;

  case 289:
#line 1854 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_ASSOCPARAMS);
    struct sctp_assocparams_expr *assocparams = (struct sctp_assocparams_expr *) malloc(sizeof(struct sctp_assocparams_expr));
    assocparams->sasoc_assoc_id = (yyvsp[-11].expression);
    assocparams->sasoc_asocmaxrxt = (yyvsp[-9].expression);
    assocparams->sasoc_number_peer_destinations = (yyvsp[-7].expression);
    assocparams->sasoc_peer_rwnd = (yyvsp[-5].expression);
    assocparams->sasoc_local_rwnd = (yyvsp[-3].expression);
    assocparams->sasoc_cookie_life = (yyvsp[-1].expression);
    (yyval.expression)->setAssocParams(assocparams);
}
#line 5050 "parser.cc" /* yacc.c:1646  */
    break;

  case 290:
#line 1866 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_ASSOCPARAMS);
    struct sctp_assocparams_expr *assocparams = (struct sctp_assocparams_expr *) malloc(sizeof(struct sctp_assocparams_expr));
    assocparams->sasoc_assoc_id = new PacketDrillExpression(EXPR_ELLIPSIS);
    assocparams->sasoc_asocmaxrxt = (yyvsp[-9].expression);
    assocparams->sasoc_number_peer_destinations = (yyvsp[-7].expression);
    assocparams->sasoc_peer_rwnd = (yyvsp[-5].expression);
    assocparams->sasoc_local_rwnd = (yyvsp[-3].expression);
    assocparams->sasoc_cookie_life = (yyvsp[-1].expression);
    (yyval.expression)->setAssocParams(assocparams);
}
#line 5066 "parser.cc" /* yacc.c:1646  */
    break;

  case 291:
#line 1881 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("sinit_num_ostreams out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%hu");
}
#line 5077 "parser.cc" /* yacc.c:1646  */
    break;

  case 292:
#line 1887 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5083 "parser.cc" /* yacc.c:1646  */
    break;

  case 293:
#line 1891 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("sinit_max_instreams out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%hu");
}
#line 5094 "parser.cc" /* yacc.c:1646  */
    break;

  case 294:
#line 1897 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5100 "parser.cc" /* yacc.c:1646  */
    break;

  case 295:
#line 1901 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("sinit_max_attempts out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%hu");
}
#line 5111 "parser.cc" /* yacc.c:1646  */
    break;

  case 296:
#line 1907 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5117 "parser.cc" /* yacc.c:1646  */
    break;

  case 297:
#line 1911 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("sinit_max_init_timeo out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%hu");
}
#line 5128 "parser.cc" /* yacc.c:1646  */
    break;

  case 298:
#line 1917 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5134 "parser.cc" /* yacc.c:1646  */
    break;

  case 299:
#line 1922 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_INITMSG);
    struct sctp_initmsg_expr *initmsg = (struct sctp_initmsg_expr *) malloc(sizeof(struct sctp_initmsg_expr));
    initmsg->sinit_num_ostreams = (yyvsp[-7].expression);
    initmsg->sinit_max_instreams = (yyvsp[-5].expression);
    initmsg->sinit_max_attempts = (yyvsp[-3].expression);
    initmsg->sinit_max_init_timeo = (yyvsp[-1].expression);
    (yyval.expression)->setInitmsg(initmsg);
}
#line 5148 "parser.cc" /* yacc.c:1646  */
    break;

  case 300:
#line 1936 "parser.y" /* yacc.c:1646  */
    {
    if (strcmp((yyvsp[-15].string), "AF_INET") == 0) {
        (yyval.expression) = new PacketDrillExpression(EXPR_SOCKET_ADDRESS_IPV4);
        (yyval.expression)->setIp(new L3Address(Ipv4Address()));
    } else if (strcmp((yyvsp[-15].string), "AF_INET6") == 0) {
        (yyval.expression) = new PacketDrillExpression(EXPR_SOCKET_ADDRESS_IPV6);
        (yyval.expression)->setIp(new L3Address(Ipv6Address()));
    }
}
#line 5162 "parser.cc" /* yacc.c:1646  */
    break;

  case 301:
#line 1948 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5168 "parser.cc" /* yacc.c:1646  */
    break;

  case 302:
#line 1949 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = (yyvsp[0].expression); }
#line 5174 "parser.cc" /* yacc.c:1646  */
    break;

  case 303:
#line 1953 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("spp_hbinterval out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 5185 "parser.cc" /* yacc.c:1646  */
    break;

  case 304:
#line 1959 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5191 "parser.cc" /* yacc.c:1646  */
    break;

  case 305:
#line 1963 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
         semantic_error("spp_pathmtu out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 5202 "parser.cc" /* yacc.c:1646  */
    break;

  case 306:
#line 1969 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5208 "parser.cc" /* yacc.c:1646  */
    break;

  case 307:
#line 1973 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("spp_pathmaxrxt out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%hu");
}
#line 5219 "parser.cc" /* yacc.c:1646  */
    break;

  case 308:
#line 1979 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5225 "parser.cc" /* yacc.c:1646  */
    break;

  case 309:
#line 1983 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = (yyvsp[0].expression); }
#line 5231 "parser.cc" /* yacc.c:1646  */
    break;

  case 310:
#line 1987 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("spp_ipv6_flowlabel out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 5242 "parser.cc" /* yacc.c:1646  */
    break;

  case 311:
#line 1993 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5248 "parser.cc" /* yacc.c:1646  */
    break;

  case 312:
#line 1997 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        semantic_error("spp_dscp out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%hhu");
}
#line 5259 "parser.cc" /* yacc.c:1646  */
    break;

  case 313:
#line 2003 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5265 "parser.cc" /* yacc.c:1646  */
    break;

  case 314:
#line 2008 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_PEER_ADDR_PARAMS);
    struct sctp_paddrparams_expr *params = (struct sctp_paddrparams_expr *) malloc(sizeof(struct sctp_paddrparams_expr));
    params->spp_assoc_id = (yyvsp[-15].expression);
    params->spp_address = (yyvsp[-13].expression);
    params->spp_hbinterval = (yyvsp[-11].expression);
    params->spp_pathmaxrxt = (yyvsp[-9].expression);
    params->spp_pathmtu = (yyvsp[-7].expression);
    params->spp_flags = (yyvsp[-5].expression);
    params->spp_ipv6_flowlabel = (yyvsp[-3].expression);
    params->spp_dscp = (yyvsp[-1].expression);
    (yyval.expression)->setPaddrParams(params);
}
#line 5283 "parser.cc" /* yacc.c:1646  */
    break;

  case 315:
#line 2022 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_PEER_ADDR_PARAMS);
    struct sctp_paddrparams_expr *params = (struct sctp_paddrparams_expr *) malloc(sizeof(struct sctp_paddrparams_expr));
    params->spp_assoc_id = new PacketDrillExpression(EXPR_ELLIPSIS);
    params->spp_address = (yyvsp[-13].expression);
    params->spp_hbinterval = (yyvsp[-11].expression);
    params->spp_pathmaxrxt = (yyvsp[-9].expression);
    params->spp_pathmtu = (yyvsp[-7].expression);
    params->spp_flags = (yyvsp[-5].expression);
    params->spp_ipv6_flowlabel = (yyvsp[-3].expression);
    params->spp_dscp = (yyvsp[-1].expression);
    (yyval.expression)->setPaddrParams(params);
}
#line 5301 "parser.cc" /* yacc.c:1646  */
    break;

  case 316:
#line 2038 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = (yyvsp[0].expression); }
#line 5307 "parser.cc" /* yacc.c:1646  */
    break;

  case 317:
#line 2042 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("sstat_rwnd out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 5318 "parser.cc" /* yacc.c:1646  */
    break;

  case 318:
#line 2048 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5324 "parser.cc" /* yacc.c:1646  */
    break;

  case 319:
#line 2052 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("sstat_unackdata out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%hu");
}
#line 5335 "parser.cc" /* yacc.c:1646  */
    break;

  case 320:
#line 2058 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5341 "parser.cc" /* yacc.c:1646  */
    break;

  case 321:
#line 2062 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("sstat_penddata out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%hu");
}
#line 5352 "parser.cc" /* yacc.c:1646  */
    break;

  case 322:
#line 2068 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5358 "parser.cc" /* yacc.c:1646  */
    break;

  case 323:
#line 2072 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("sstat_instrms out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%hu");
}
#line 5369 "parser.cc" /* yacc.c:1646  */
    break;

  case 324:
#line 2078 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5375 "parser.cc" /* yacc.c:1646  */
    break;

  case 325:
#line 2082 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("sstat_outstrms out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%hu");
}
#line 5386 "parser.cc" /* yacc.c:1646  */
    break;

  case 326:
#line 2088 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5392 "parser.cc" /* yacc.c:1646  */
    break;

  case 327:
#line 2092 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("sstat_fragmentation_point out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 5403 "parser.cc" /* yacc.c:1646  */
    break;

  case 328:
#line 2098 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5409 "parser.cc" /* yacc.c:1646  */
    break;

  case 329:
#line 2102 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5415 "parser.cc" /* yacc.c:1646  */
    break;

  case 330:
#line 2108 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_STATUS);
    struct sctp_status_expr *stat = (struct sctp_status_expr *) calloc(1, sizeof(struct sctp_status_expr));
    stat->sstat_assoc_id = (yyvsp[-17].expression);
    stat->sstat_state = (yyvsp[-15].expression);
    stat->sstat_rwnd = (yyvsp[-13].expression);
    stat->sstat_unackdata = (yyvsp[-11].expression);
    stat->sstat_penddata = (yyvsp[-9].expression);
    stat->sstat_instrms = (yyvsp[-7].expression);
    stat->sstat_outstrms = (yyvsp[-5].expression);
    stat->sstat_fragmentation_point = (yyvsp[-3].expression);
    stat->sstat_primary = (yyvsp[-1].expression);
    (yyval.expression)->setStatus(stat);
}
#line 5434 "parser.cc" /* yacc.c:1646  */
    break;

  case 331:
#line 2123 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_STATUS);
    struct sctp_status_expr *stat = (struct sctp_status_expr *) calloc(1, sizeof(struct sctp_status_expr));
    stat->sstat_assoc_id = new PacketDrillExpression(EXPR_ELLIPSIS);
    stat->sstat_state = (yyvsp[-15].expression);
    stat->sstat_rwnd = (yyvsp[-13].expression);
    stat->sstat_unackdata = (yyvsp[-11].expression);
    stat->sstat_penddata = (yyvsp[-9].expression);
    stat->sstat_instrms = (yyvsp[-7].expression);
    stat->sstat_outstrms = (yyvsp[-5].expression);
    stat->sstat_fragmentation_point = (yyvsp[-3].expression);
    stat->sstat_primary = (yyvsp[-1].expression);
    (yyval.expression)->setStatus(stat);
}
#line 5453 "parser.cc" /* yacc.c:1646  */
    break;

  case 332:
#line 2140 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("sinfo_stream out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 5464 "parser.cc" /* yacc.c:1646  */
    break;

  case 333:
#line 2146 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5470 "parser.cc" /* yacc.c:1646  */
    break;

  case 334:
#line 2150 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("sinfo_ssn out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 5481 "parser.cc" /* yacc.c:1646  */
    break;

  case 335:
#line 2156 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5487 "parser.cc" /* yacc.c:1646  */
    break;

  case 336:
#line 2160 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = (yyvsp[0].expression); }
#line 5493 "parser.cc" /* yacc.c:1646  */
    break;

  case 337:
#line 2164 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[-1].integer))) {
        semantic_error("sinfo_ppid out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[-1].integer), "%u");
}
#line 5504 "parser.cc" /* yacc.c:1646  */
    break;

  case 338:
#line 2170 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5510 "parser.cc" /* yacc.c:1646  */
    break;

  case 339:
#line 2174 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("sinfo_context out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 5521 "parser.cc" /* yacc.c:1646  */
    break;

  case 340:
#line 2180 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5527 "parser.cc" /* yacc.c:1646  */
    break;

  case 341:
#line 2184 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("sinfo_timetolive out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 5538 "parser.cc" /* yacc.c:1646  */
    break;

  case 342:
#line 2190 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5544 "parser.cc" /* yacc.c:1646  */
    break;

  case 343:
#line 2194 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("sinfo_tsn out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 5555 "parser.cc" /* yacc.c:1646  */
    break;

  case 344:
#line 2200 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5561 "parser.cc" /* yacc.c:1646  */
    break;

  case 345:
#line 2204 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("sinfo_cumtsn out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 5572 "parser.cc" /* yacc.c:1646  */
    break;

  case 346:
#line 2210 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5578 "parser.cc" /* yacc.c:1646  */
    break;

  case 347:
#line 2216 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_SNDRCVINFO);
    struct sctp_sndrcvinfo_expr *info = (struct sctp_sndrcvinfo_expr *) calloc(1, sizeof(struct sctp_sndrcvinfo_expr));
    info->sinfo_stream = (yyvsp[-19].expression);
    info->sinfo_ssn = (yyvsp[-17].expression);
    info->sinfo_flags = (yyvsp[-15].expression);
    info->sinfo_ppid = (yyvsp[-13].expression);
    info->sinfo_context = (yyvsp[-11].expression);
    info->sinfo_timetolive = (yyvsp[-9].expression);
    info->sinfo_tsn = (yyvsp[-7].expression);
    info->sinfo_cumtsn = (yyvsp[-5].expression);
    info->sinfo_assoc_id = (yyvsp[-1].expression);
    (yyval.expression)->setSndRcvInfo(info);
}
#line 5597 "parser.cc" /* yacc.c:1646  */
    break;

  case 348:
#line 2231 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_SNDRCVINFO);
    struct sctp_sndrcvinfo_expr *info = (struct sctp_sndrcvinfo_expr *) malloc(sizeof(struct sctp_sndrcvinfo_expr));
    info->sinfo_stream = (yyvsp[-15].expression);
    info->sinfo_ssn = (yyvsp[-13].expression);
    info->sinfo_flags = (yyvsp[-11].expression);
    info->sinfo_ppid = (yyvsp[-9].expression);
    info->sinfo_context = (yyvsp[-7].expression);
    info->sinfo_timetolive = (yyvsp[-5].expression);
    info->sinfo_tsn = (yyvsp[-3].expression);
    info->sinfo_cumtsn = (yyvsp[-1].expression);
    info->sinfo_assoc_id = new PacketDrillExpression(EXPR_ELLIPSIS);
    (yyval.expression)->setSndRcvInfo(info);
}
#line 5616 "parser.cc" /* yacc.c:1646  */
    break;

  case 349:
#line 2247 "parser.y" /* yacc.c:1646  */
    {
printf("SRS_FLAGS = INTEGER\n");
    if (!is_valid_u16((yyvsp[0].integer))) {
        semantic_error("srs_flags out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%hu");
}
#line 5628 "parser.cc" /* yacc.c:1646  */
    break;

  case 350:
#line 2254 "parser.y" /* yacc.c:1646  */
    {
printf("SRS_FLAGS = MYWORD\n");
    (yyval.expression) = new PacketDrillExpression(EXPR_WORD);
    (yyval.expression)->setString((yyvsp[0].string));
}
#line 5638 "parser.cc" /* yacc.c:1646  */
    break;

  case 351:
#line 2259 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 5646 "parser.cc" /* yacc.c:1646  */
    break;

  case 352:
#line 2265 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_RESET_STREAMS);
    struct sctp_reset_streams_expr *rs = (struct sctp_reset_streams_expr *) malloc(sizeof(struct sctp_reset_streams_expr));
    rs->srs_assoc_id = (yyvsp[-11].expression);
    rs->srs_flags = (yyvsp[-9].expression);
    if (!is_valid_u16((yyvsp[-5].integer))) {
        semantic_error("srs_number_streams out of range");
    }
    rs->srs_number_streams = new_integer_expression((yyvsp[-5].integer), "%hu");
    rs->srs_stream_list = (yyvsp[-1].expression);
    (yyval.expression)->setResetStreams(rs);
}
#line 5663 "parser.cc" /* yacc.c:1646  */
    break;

  case 353:
#line 2277 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_RESET_STREAMS);
    struct sctp_reset_streams_expr *rs = (struct sctp_reset_streams_expr *) malloc(sizeof(struct sctp_reset_streams_expr));
    rs->srs_assoc_id = new PacketDrillExpression(EXPR_ELLIPSIS);
    rs->srs_flags = (yyvsp[-9].expression);
    if (!is_valid_u16((yyvsp[-5].integer))) {
        semantic_error("srs_number_streams out of range");
    }
    rs->srs_number_streams = new_integer_expression((yyvsp[-5].integer), "%hu");
    rs->srs_stream_list = (yyvsp[-1].expression);
    (yyval.expression)->setResetStreams(rs);
}
#line 5680 "parser.cc" /* yacc.c:1646  */
    break;

  case 354:
#line 2292 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_ADD_STREAMS);
    struct sctp_add_streams_expr *rs = (struct sctp_add_streams_expr *) malloc(sizeof(struct sctp_add_streams_expr));
    rs->sas_assoc_id = (yyvsp[-9].expression);
    if (!is_valid_u16((yyvsp[-5].integer))) {
        semantic_error("sas_instrms out of range");
    }
    rs->sas_instrms = new_integer_expression((yyvsp[-5].integer), "%hu");
    if (!is_valid_u16((yyvsp[-1].integer))) {
        semantic_error("sas_outstrms out of range");
    }
    rs->sas_outstrms = new_integer_expression((yyvsp[-1].integer), "%hu");
    (yyval.expression)->setAddStreams(rs);
}
#line 5699 "parser.cc" /* yacc.c:1646  */
    break;

  case 355:
#line 2306 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_ADD_STREAMS);
    struct sctp_add_streams_expr *rs = (struct sctp_add_streams_expr *) malloc(sizeof(struct sctp_add_streams_expr));
    rs->sas_assoc_id = new PacketDrillExpression(EXPR_ELLIPSIS);
    if (!is_valid_u16((yyvsp[-5].integer))) {
        semantic_error("sas_instrms out of range");
    }
    rs->sas_instrms = new_integer_expression((yyvsp[-5].integer), "%hu");
    if (!is_valid_u16((yyvsp[-1].integer))) {
        semantic_error("sas_outstrms out of range");
    }
    rs->sas_outstrms = new_integer_expression((yyvsp[-1].integer), "%hu");
    (yyval.expression)->setAddStreams(rs);
}
#line 5718 "parser.cc" /* yacc.c:1646  */
    break;

  case 356:
#line 2324 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_ASSOCVAL);
    struct sctp_assoc_value_expr *assocval = (struct sctp_assoc_value_expr *) malloc(sizeof(struct sctp_assoc_value_expr));
    assocval->assoc_id = (yyvsp[-5].expression);
    assocval->assoc_value = (yyvsp[-1].expression);
    (yyval.expression)->setAssocval(assocval);
}
#line 5730 "parser.cc" /* yacc.c:1646  */
    break;

  case 357:
#line 2331 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_ASSOCVAL);
    struct sctp_assoc_value_expr *assocval = (struct sctp_assoc_value_expr *) malloc(sizeof(struct sctp_assoc_value_expr));
    assocval->assoc_id = new PacketDrillExpression(EXPR_ELLIPSIS);
    assocval->assoc_value = (yyvsp[-1].expression);
    (yyval.expression)->setAssocval(assocval);
}
#line 5742 "parser.cc" /* yacc.c:1646  */
    break;

  case 358:
#line 2341 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("sack_delay out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 5753 "parser.cc" /* yacc.c:1646  */
    break;

  case 359:
#line 2347 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS);
}
#line 5761 "parser.cc" /* yacc.c:1646  */
    break;

  case 360:
#line 2352 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        semantic_error("sack_freq out of range");
    }
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%u");
}
#line 5772 "parser.cc" /* yacc.c:1646  */
    break;

  case 361:
#line 2358 "parser.y" /* yacc.c:1646  */
    { (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS); }
#line 5778 "parser.cc" /* yacc.c:1646  */
    break;

  case 362:
#line 2361 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_SACKINFO);
    struct sctp_sack_info_expr *sackinfo = (struct sctp_sack_info_expr *) malloc(sizeof(struct sctp_sack_info_expr));
    sackinfo->sack_assoc_id = (yyvsp[-5].expression);
    sackinfo->sack_delay = (yyvsp[-3].expression);
    sackinfo->sack_freq = (yyvsp[-1].expression);
    (yyval.expression)->setSackinfo(sackinfo);
}
#line 5791 "parser.cc" /* yacc.c:1646  */
    break;

  case 363:
#line 2369 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_SCTP_SACKINFO);
    struct sctp_sack_info_expr *sackinfo = (struct sctp_sack_info_expr *) malloc(sizeof(struct sctp_sack_info_expr));
    sackinfo->sack_assoc_id = new PacketDrillExpression(EXPR_ELLIPSIS);
    sackinfo->sack_delay = (yyvsp[-3].expression);
    sackinfo->sack_freq = (yyvsp[-1].expression);
    (yyval.expression)->setSackinfo(sackinfo);
}
#line 5804 "parser.cc" /* yacc.c:1646  */
    break;

  case 364:
#line 2380 "parser.y" /* yacc.c:1646  */
    {
    (yyval.errno_info) = NULL;
}
#line 5812 "parser.cc" /* yacc.c:1646  */
    break;

  case 365:
#line 2383 "parser.y" /* yacc.c:1646  */
    {
    (yyval.errno_info) = (struct errno_spec*)malloc(sizeof(struct errno_spec));
    (yyval.errno_info)->errno_macro = (yyvsp[-1].string);
    (yyval.errno_info)->strerror = (yyvsp[0].string);
}
#line 5822 "parser.cc" /* yacc.c:1646  */
    break;

  case 366:
#line 2391 "parser.y" /* yacc.c:1646  */
    {
    (yyval.string) = NULL;
}
#line 5830 "parser.cc" /* yacc.c:1646  */
    break;

  case 367:
#line 2394 "parser.y" /* yacc.c:1646  */
    {
    (yyval.string) = (yyvsp[0].string);
}
#line 5838 "parser.cc" /* yacc.c:1646  */
    break;

  case 368:
#line 2400 "parser.y" /* yacc.c:1646  */
    {
    (yyval.string) = (yyvsp[-1].string);
}
#line 5846 "parser.cc" /* yacc.c:1646  */
    break;

  case 369:
#line 2406 "parser.y" /* yacc.c:1646  */
    {
    (yyval.string) = (yyvsp[0].string);
}
#line 5854 "parser.cc" /* yacc.c:1646  */
    break;

  case 370:
#line 2409 "parser.y" /* yacc.c:1646  */
    {
    asprintf(&((yyval.string)), "%s %s", (yyvsp[-1].string), (yyvsp[0].string));
    free((yyvsp[-1].string));
    free((yyvsp[0].string));
}
#line 5864 "parser.cc" /* yacc.c:1646  */
    break;


#line 5868 "parser.cc" /* yacc.c:1646  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[1] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
#line 2416 "parser.y" /* yacc.c:1906  */



