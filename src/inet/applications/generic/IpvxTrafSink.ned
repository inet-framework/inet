//
// Copyright (C) 2004 OpenSim Ltd.
// Copyright (C) 2000 Institut fuer Telematik, Universitaet Karlsruhe
//
// SPDX-License-Identifier: LGPL-3.0-or-later
//

package inet.applications.generic;

//
// Acts as a receiver endpoint for IP traffic generated by ~IpvxTrafGen modules,
// processing packets sent directly over IPv4 or IPv6. Designed to collect and
// analyze traffic statistics without the overhead of transport protocols like
// TCP or UDP, making it suitable for low-level network performance testing.
//
// Maintains comprehensive statistics on received packets, including count, size,
// and end-to-end delay measurements. These metrics are essential for evaluating
// network performance characteristics such as throughput, latency, and packet
// loss. The module is protocol-agnostic between IPv4 and IPv6, allowing for
// consistent testing across different IP network configurations.
//
// @see ~IpvxTrafGen, ~IIpvxTrafficGenerator
//
simple IpvxTrafSink like IIpvxTrafficGenerator
{
    parameters:
        int protocol; // Value for IPv4, IPv6 protocol field, accepts only values between 143 and 254
        @lifecycleSupport;
        @display("i=block/sink");
        @signal[packetReceived](type=inet::Packet);
        @statistic[packetReceived](title="packets received"; source=packetReceived; record=count,"sum(packetBytes)","vector(packetBytes)"; interpolationmode=none);
        @statistic[endToEndDelay](title="end-to-end delay"; source="dataAge(packetReceived)"; unit=s; record=histogram,vector; interpolationmode=none);
    gates:
        input ipIn @labels(Ipv4ControlInfo/up,Ipv6ControlInfo/up);
        output ipOut @labels(Ipv4ControlInfo/down,Ipv6ControlInfo/down);
}
