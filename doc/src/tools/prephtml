#!/usr/bin/env perl
#
# Tidy up a html document generated by ltoh. Adds page heading,
# table of contents etc.
#


# *** check settings below -- also ltoh.specs for \opp definition! ***
$product = "[PRODUCT]";
$productversion = "4.x";
$templatefile = "";
$doctitle = "[UNTITLED]";

$fname = "";
$outfnamebase = "";
$quiet = 0;
$singlePage = 1;
$isdraft = 0;
$ext = "html";
$linkext = "html";
$apidir = "../api";
$tagfile = ""; # ../../api/opptags.xml";

while (@ARGV)
{
    $arg = shift @ARGV;
    if ($arg eq "--split" || $arg eq "-s") {
        $singlePage = 0;
    }
    elsif ($arg eq "--draft") {
        $isdraft = 1;
    }
    elsif ($arg eq "--outfilenamebase") {
        $outfnamebase = shift @ARGV;
    }
    elsif ($arg eq "--apidir") {
        $apidir = shift @ARGV;
    }
    elsif ($arg eq "--tagfile") {
        $tagfile = shift @ARGV;
    }
    elsif ($arg eq "--template") {
        $templatefile = shift @ARGV;
    }
    elsif ($arg eq "--title") {
        $doctitle = shift @ARGV;
    }
    elsif ($arg eq "--ext") {
        $ext = shift @ARGV;
    }
    elsif ($arg eq "--product") {
        $product = shift @ARGV;
    }
    elsif ($arg eq "--productversion") {
        $productversion = shift @ARGV;
    }
    elsif ($arg eq "-q" || $arg eq "--quiet") {
        $quiet = 1;
    }
    elsif ($arg =~ /^-/) {
          die("unrecognized option: $arg");
    }
    else {
        $fname = $arg;
    }
}

if ($outfnamebase eq "") {
    $outfnamebase = $fname;
    $outfnamebase =~ s/\.[^.]*$//;
}

#
# read template file
#
print "reading template $templatefile\n" unless $quiet;
open(TEMPLATEFILE, $templatefile) || die "cannot open $templatefile";
$template = join("", <TEMPLATEFILE>);

#
# read file into variable
#
print "reading $fname\n" unless $quiet;
open( HTMLFILE, $fname ) || die "cannot open $fname";
$html = join("", <HTMLFILE>);

#
# kill unwanted formatting
#
print "removing unnecessary formatting and parts\n" unless $quiet;

if ($product ne "OMNEST") {
   while ($html =~ s/(.*)\@ifcommercial\@(.*?)\@fi\@/$1/sg) {}
} else {
   $html =~ s/\@ifcommercial\@//sg;
   $html =~ s/\@fi\@//sg;
}

if ($isdraft) {
   $html =~ s/\@ifdraft\@//sg;
   $html =~ s/\@fi\@//sg;
} else {
   while ($html =~ s/(.*)\@ifdraft\@(.*?)\@fi\@/$1/sg) {}
   die "unmatched \\fi" if ($html =~ /\@fi\@/);
   die "unmatched \\ifdraft" if ($html =~ /\@ifdraft\@/);
}


# replace product name in verbatim and listing sections (not affected by ltoh)
$html =~ s|`\\opp`|$product|seg;

#
# Do some more LaTeX formatting, not done by L2H
#
$html =~ s/\\'([AEOUaeuo])/&$1acute;/g;
$html =~ s/\\"([OUuo])/&$1uml;/g;
$html =~ s/\\-//g;
$html =~ s/\\\^/^/g;
$html =~ s/``(.*?)''/&#8220;$1&#8221;/sg; # unicode left/right double quotation marks
$html =~ s|<li>\[(.*?)\]|<li><b>$1</b> |sg;  # definition item, e.g. \item[Hierarchical]

#
# kill <p> inside <pre>
#
$html =~ s|(\<pre( .*?)?\>.*?\</pre\>)|kill_p_tag($1)|sgei;

sub kill_p_tag ()
{
      my $txt = shift @_;
      $txt =~ s/\<p\>//sgi;
      return $txt;
}

#
# add alpha numbering of appendices
#
$letter = ord('A');
$html =~ s/Appendix AAA/"Appendix ".chr($letter++)/sge;

#
# move chapter/section anchors into <h[0-9]> tag
#
$html =~ s|(<h[0-9]>)(.*?)(</h[0-9]>)\s*<a name="(.*?)"></a>|$1<a name="$4"></a>$2<a class="headerlink" href="#$4" title="Permalink to this headline">&para;</a>$3|gi;

#
# collect heading info from document
#
print "collecting headings\n" unless $quiet;
$scrap = $html;
$i = 0;
while ($scrap =~ s/\<h([0-9])\>(.*?)\<\/h[0-9]\>//si)
{
      $level[$i] = $1;
      my $hcontent = $2;

      # assume: <a name="LABEL"></a>TITLE<a...>
      unless ($hcontent =~ m|<a name="(.*?)"></a>(.*?)<a|si) { die "Error: missing label for heading \"$hcontent\""; }
      $label[$i] = $1;
      $title[$i] = $2;
      $aname2index{$1} = $i;
      # print "title: $title[$i]  label: $label[$i]\n";
      if ($i > 0 && $level[$i]-$level[$i-1] > 1) { die "Error: heading level skipped between section \"$title[$i-1]\" and \"$title[$i]\""; }
      $i++;
}
$nheadings = $i;

#
# calculate heading numbers
#
print "adding heading numbers\n" unless $quiet;
for ($l=1; $l<10; $l++) {$hnum[$l]=0;}
for ($i=0; $i<$nheadings; $i++)
{
      # advance numbering
      $hnum[$level[$i]]++;
      for ($j=$level[$i]+1; $j<10; $j++) {
         $hnum[$j] = 0;
      }

      # assemble current heading number, e.g. "1.4.2."
      $number[$i] = '';
      for ($j=1; $j<=$level[$i]; $j++) {
         $number[$i] .= $hnum[$j].'.';
      }
      $number[$i] =~ s/\.$//;

      # store chapter number
      $chapnum[$i] = $hnum[1];
}

#
# insert numbers into manual body
#
for ($i=0; $i<$nheadings; $i++)
{
      # search replace phrases like this: <a name="_Toc473901724">Expressions</a>
      $html =~ s!(<a name=\"$label[$i]\"\></a>)!\1$number[$i] !sgi;
}

#
# find cross-references and associate them with the section
#  1. set up mapping: xref labels to the sections containing them
#  2. modify xrefs accordingly
#
for ($i=0; $i<$nheadings; $i++)
{
      $label2name{$label[$i]} = $number[$i];
}

$scrap = $html;
$afilename = ""; #if singlePage
while ($scrap =~ s/\<a name="([^"]+)"//si)
{
      $aname = $1;
      if ($aname =~ /^sec:|^cha:/)  {
          $cursection = $aname;
          if (!$singlePage) {
              my $i = $aname2index{$aname};
              my $c = $chapnum[$i];
              $afilename = "chap$c.$linkext";
          }
      }
      if ($aname =~ /^fig/) {
          # leave figures alone
          $xref{$aname} = "$afilename#$aname";
          $xrefname{$aname} = "below";
      } else {
          # adjust other xrefs to point to the section containing them
          $xref{$aname} = "$afilename#$cursection";
          $xrefname{$aname} = "[$label2name{$cursection}]";
          if ($xrefname{$aname} eq '[]') {$xrefname{$aname} = "[click]";}
          # print "  $aname --> $cursection: $xrefname{$aname}\n";
      }
}
#foreach $aname (keys %xref) {
#      print "$aname    -->    $xref{$aname}      (txt:$xrefname{$aname})\n";
#}



$html =~ s|\<A HREF=\"#([^\"]+)\"\>\[click\]\</A\>|\<a href=\"$xref{$1}\"\>$xrefname{$1}\</a\>|sgi;

#
# create 'chapters' table
#
print "creating Topics and ToC tables\n" unless $quiet;
if ($singlePage) {
      $chapters = "<h1>Chapters</h1>\n<p>\n";
} else {
      $chapters = "<h1>Chapters</h1>\n<p>\n";
}
for ($i=0; $i<$nheadings; $i++)
{
      if ($level[$i]==1)
      {
           $link = $singlePage ? "#toc_$number[$i]" : "chap$chapnum[$i].$linkext";
           $entry = "<a href=\"$link\" class=\"toc\">$number[$i] $title[$i]</a><br>";
           $chapters .= "$entry\n";
      }
}
$chapters .= "</p>";

#
# create table of contents
#
if ($singlePage) {
      $toc = "<h1>Table of Contents</h1>\n";
} else {
      $toc = "<h1>Table of Contents</h1>\n";
}
for ($i=0; $i<$nheadings; $i++)
{
      if ($level[$i]==4) { next; }
      $link = $singlePage ? "#$label[$i]" : "chap$chapnum[$i].$linkext#$label[$i]";
      $entry = "<a name=\"toc_$number[$i]\"/><a href=\"$link\" class=\"toc\">$number[$i] $title[$i]</a>";
      for ($j=0; $j<$level[$i]; $j++) {$entry = "&nbsp;&nbsp;$entry";}
      if ($level[$i]==1)    {$entry = "<br>$entry";}
      elsif ($level[$i]==2) {$entry = "$entry";}
      $toc .= "$entry<br>\n";
}
$toc .= "</p>";

sub spaces($) {
    my $n = shift; my $s = '';
    for (my $i=0; $i<$n; $i++) {$s.=' ';}
    return $s;
}

#
# create eclipse-style table of contents (toc.xml)
#
$tocxml = '<?xml version="1.0" encoding="utf-8" standalone="no"?>
<toc label="' . $doctitle . '" topic="index.html">
';

$level[$nheadings] = 1; #sentry
for (my $i=0; $i<$nheadings; $i++)
{
      my $link = $singlePage ? "$outfnamebase.$linkext#$label[$i]" : "chap$chapnum[$i].$linkext#$label[$i]";
      my $title = $title[$i];
      $title =~ s|"|&quot;|g;
      $title =~ s|</?[a-z0-9]+>||gi;  # remove <b></b>, <tt></tt>
      # to limit the index depth to XX levels for eclipse, change 99 to the desired level
      if ($level[$i] <= 99)
      {
          $entry = spaces(2*$level[$i]) . "<topic label=\"$number[$i] $title\" href=\"$link\"";
          $entry .= ($i!=$nheadings-1 && $level[$i+1]>$level[$i]) ? ">" : "/>";
          $tocxml .= "$entry\n";
      }

      for (my $j=$level[$i]-1; $j>=$level[$i+1]; $j--) {
          $tocxml .= spaces(2*$j) . "</topic>\n";
      }
}
$tocxml .= "</toc>";


#
# load Doxygen tags.xml...
#
# <compound kind="class">
#    <name>cAccuracyDetection</name>
#    <filename>classcAccuracyDetection.html</filename>
# </compound>
#
if ($tagfile) {
      print "adding hyperlinks on class names (tagfile=$tagfile)\n" unless $quiet;
      open(INFILE, $tagfile) || die "cannot open $tagfile";
      $tags = join("", <INFILE>);
      $components = ();
      while ($tags =~ s|\<compound +kind="class".*?\>(.*?)\</compound\>||s)
      {
            $tag = $1;
            $tag =~ s|\<member .*?\>(.*?)\</member\>||sg;
            if ($tag =~ m|\<name\>(.*?)\</name\>|) {$name = $1; $name =~ s/^.*:://g; push(@components,$name);} else {next;}
            if ($tag =~ m|\<filename\>(.*?)\</filename\>|)  {$htmlfile{$name} = $1;}
            #print "DBG: $name, $htmlfile{$name}\n";
      }
      #print join(' ', @components);
}

#
# ...and put hyperlinks on class names
#
$names = join('|',@components);
$html =~ s!\b($names)\b!'<a href="'.$apidir.'/'.$htmlfile{$1}.'">'.$1.'</a>'!gse unless($names eq '');

#
# add </li>, because ltoh does not do it, and missing </li> causes problem with Jekyll
#
$html =~ s!(\s*<li>)!</li>\1!gs;
$html =~ s!(<ul>\s*)</li>!\1!gs;
$html =~ s!(<ol>\s*)</li>!\1!gs;
$html =~ s!(\s*</ul>)!</li>\1!gs;
$html =~ s!(\s*</ol>)!</li>\1!gs;

#
# remove LF just after <pre> and before </pre>, to eliminate extra blank lines; same for <code>
#
$html =~ s!(<code\b.*?>)\n!\1!gs;
$html =~ s!\n(</code>)!\1!gs;

$html =~ s!(<pre\b.*?>)\n!\1!gs;
$html =~ s!\n(</pre>)!\1!gs;


sub savepage($$$)
{
      my $filename = shift @_;
      my $body = shift @_;
      my $needtitlepage = shift @_;

      my $new_html = $template;
      $new_html =~ s/__TITLEPAGE_START__(.*)__TITLEPAGE_END__//s unless ($needtitlepage);
      $new_html =~ s/__TITLEPAGE_(START|END)__//sg;
      $new_html =~ s/__BODY__/$body/;
      
      my $prev_html = "";
      while ($prev_html ne $new_html) {
          $prev_html = $new_html;
          $new_html =~ s/__TITLE__/$doctitle/sg;
          $new_html =~ s/__PRODUCT__/$product/sg;
          $new_html =~ s/__VERSION__/$productversion/sg;
      }

      open(FILE,">$filename");
      print FILE $new_html;
      close FILE;
}


if ($singlePage)
{
      print "writing page\n" unless $quiet;
      savepage("$outfnamebase.$ext", $chapters . $toc . $html, 1);
}
else
{
      #
      # split up to chapters along H1 headings
      #
      print "splitting up to chapters\n" unless $quiet;
      $nchapters = 0;
      $scrap = $html;
      while ($scrap =~ s/(\<h1\>.*?)\<h1\>/\<h1\>/si)
      {
            $chapter[++$nchapters] = $1;
      }
      $chapter[++$nchapters] = $scrap;

      #
      # create navigation bars for each chapter
      #
      for ($i=1; $i<=$nchapters; $i++)
      {
            $navbar[$i] = "<div class='oppnavbar'>";
            my $sep = " &#8226; "; # bullet
            if ($i>1) {$t=$i-1; $navbar[$i] .= "<a href=\"chap$t.$linkext\">Prev</a>" . $sep;}
            if ($i<$nchapters) {$t=$i+1; $navbar[$i] .= "<a href=\"chap$t.$linkext\">Next</a>" . $sep;}
            $navbar[$i] .= "<a href=\"toc.$linkext#toc_$i\">ToC</a>" . $sep;
            $navbar[$i] .= "<a href=\"$outfnamebase.$linkext\">Chapters</a>";
            $navbar[$i] .= "</div>";
      }

      #
      # write each chapter into a separate file
      #
      print "writing chapter files\n" unless $quiet;
      for ($i=1; $i<=$nchapters; $i++)
      {
            savepage("chap$i.$ext", "<div>$doctitle<hr width='100%'></div>\n" . $navbar[$i] . $chapter[$i] . $navbar[$i], 0);
      }

      #
      # write chapters file (usman.html)
      #
      print "writing chapters file\n" unless $quiet;
      savepage("$outfnamebase.$ext", $chapters, 1);

      #
      # write toc file (toc.html)
      #
      print "writing toc file\n" unless $quiet;
      savepage("toc.$ext", $toc, 1);
}

#
# write eclipse toc file (toc.xml)
#
print "writing toc.xml\n" unless $quiet;
open(FILE,">toc.xml");
print FILE $tocxml;
close FILE;

print "done\n" unless $quiet;

