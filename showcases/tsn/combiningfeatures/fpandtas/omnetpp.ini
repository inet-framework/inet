[General]
network = inet.networks.tsn.TsnLinearNetwork
sim-time-limit = 10ms
record-eventlog = true

# enable preemption
*.*.eth[*].macLayer.typename = "EthernetPreemptingMacLayer"
*.*.eth[*].phyLayer.typename = "EthernetPreemptingPhyLayer"

# disable implicit guard bands
*.*.eth[*].macLayer.preemptableMacLayer.gate.enableImplicitGuardBand = false

# disable maclayer queue
*.client.eth[0].macLayer.queue.typename = ""

# enable sub-maclayer queue
*.client.eth[0].macLayer.expressMacLayer.queue.typename = "GatingQueue"
*.client.eth[0].macLayer.preemptableMacLayer.gate.typename = "PeriodicGate"

# classify packets by PCP value to sub-maclayers
*.client.eth[0].macLayer.outboundClassifier.typename = "PcpTrafficClassClassifier"
*.client.eth[0].macLayer.outboundClassifier.reverseOrder = true

# client applications
*.client.numApps = 2

# flow1 client -> switch -> server
*.client.app[0].typename = "UdpSourceApp"
*.client.app[0].display-name = "Flow1"
*.client.app[0].io.destAddress = "server"
*.client.app[0].io.destPort = 1000
*.client.app[0].source.packetNameFormat = "TT-%c"
*.client.app[0].source.packetLength = 937B # 937B => (937*8bit)/100Mbit/s = 75us duration
*.client.app[0].source.productionInterval = 400us
*.client.app[0].source.initialProductionOffset = 100us

# flow2 client -> switch -> server
*.client.app[1].typename = "UdpSourceApp"
*.client.app[1].display-name = "Flow2"
*.client.app[1].io.destAddress = "server"
*.client.app[1].io.destPort = 1001
*.client.app[1].source.packetNameFormat = "AVB_A-%c"
*.client.app[1].source.packetLength = 937B # 937B => (937*8bit)/100Mbit/s = 75us duration
*.client.app[1].source.productionInterval = 400us
*.client.app[1].source.initialProductionOffset = 50us

## configure all egress traffic as part of stream Flow1, start sequence numbering
*.client.bridging.streamIdentifier.identifier.mapping = [{packetFilter: expr(has(udp) && udp.destPort == 1000), stream: "TT"},
                                                         {packetFilter: expr(has(udp) && udp.destPort == 1001), stream: "AVB_A"}]

# enable outgoing streams
*.client.hasOutgoingStreams = true

# encode egress flows
*.client.bridging.streamCoder.encoder.mapping = [{stream: "TT", pcp: 4},
                                                 {stream: "AVB_A", pcp: 0}]

# enable traffic shaping
*.client.hasEgressTrafficShaping = true

# configure time-aware shaper
#*.client.eth[*].macLayer.*.queue.numTrafficClasses = 2
#*.client.eth[0].macLayer.*MacLayer.gate.offset = 0us
*.client.eth[0].macLayer.expressMacLayer.queue.gate.initiallyOpen = false # TT
*.client.eth[0].macLayer.expressMacLayer.queue.gate.durations = [100us,100us]
*.client.eth[0].macLayer.preemptableMacLayer.gate.initiallyOpen = true # AVB
*.client.eth[0].macLayer.preemptableMacLayer.gate.durations = [100us,100us]

# server applications
*.server.numApps = 2
*.server.app[0..1].typename = "UdpSinkApp"
*.server.app[0].display-name = "Sink of Flow1_TT"
*.server.app[0].io.localPort = 1000
*.server.app[1].display-name = "Sink of Flow2_AVB_A"
*.server.app[1].io.localPort = 1001

# enable incoming streams
*.server.hasIncomingStreams = true

# map destination MAC addresses to network interfaces
*.switch.macTable.forwardingTable = [{address: "server", interface: "eth1"}]

# enable traffic shaping
*.switch.hasEgressTrafficShaping = true

# disable maclayer queue
*.switch.eth[*].macLayer.queue.typename = ""

# enable sub-maclayer queue
*.switch.eth[1].macLayer.expressMacLayer.queue.typename = "GatingQueue"
*.switch.eth[1].macLayer.preemptableMacLayer.gate.typename = "PeriodicGate"

# classify packets by PCP value to sub-maclayers
*.switch.eth[1].macLayer.outboundClassifier.typename = "PcpTrafficClassClassifier"
*.switch.eth[1].macLayer.outboundClassifier.reverseOrder = true

# configure time-aware shaper
#*.switch.eth[*].macLayer.*.queue.numTrafficClasses = 2
#*.switch.eth[1].macLayer.*MacLayer.gate.offset = 0us
*.switch.eth[1].macLayer.expressMacLayer.queue.gate.initiallyOpen = true # TT
*.switch.eth[1].macLayer.expressMacLayer.queue.gate.durations = [100us,100us]
*.switch.eth[1].macLayer.preemptableMacLayer.gate.initiallyOpen = false # AVB
*.switch.eth[1].macLayer.preemptableMacLayer.gate.durations = [100us,100us]
