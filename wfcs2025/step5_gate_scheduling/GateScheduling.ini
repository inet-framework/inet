[General]
abstract = true
network = GateSchedulingShowcase
sim-time-limit = 10ms
record-eventlog = true
result-dir = "results/wip"

# configure Ethernet speed
*.*.eth[*].bitrate = 100Mbps

# configure client applications
*.client*.numApps = 2
*.client*.app[*].typename = "UdpSourceApp"
*.client*.app[0].display-name = "best-effort"
*.client*.app[1].display-name = "high-priority"
*.client*.app[0].io.destAddress = "server1"
*.client*.app[1].io.destAddress = "server2"
*.client1.app[0].io.destPort = 1000
*.client1.app[1].io.destPort = 1002
*.client2.app[0].io.destPort = 1001
*.client2.app[1].io.destPort = 1003
*.client1.app[0].io.displayStringTextFormat = "server1: {numSent} best-effort"
*.client1.app[1].io.displayStringTextFormat = "server1: {numSent} high-priority"
*.client2.app[0].io.displayStringTextFormat = "server2: {numSent} best-effort"
*.client2.app[1].io.displayStringTextFormat = "server2: {numSent} high-priority"
*.client*.app[*].source.packetNameFormat = "%M-%m-%c"
*.client*.app[0].source.packetLength = 1000B
*.client*.app[1].source.packetLength = 500B
*.client*.app[0].source.productionInterval = 500us # ~16Mbps
*.client*.app[1].source.productionInterval = 250us # ~16Mbps

# configure server applications
*.server*.numApps = 4
*.server*.app[*].typename = "UdpSinkApp"
*.server*.app[0..1].display-name = "best-effort"
*.server*.app[2..3].display-name = "high-priority"
*.server*.app[0].io.localPort = 1000
*.server*.app[1].io.localPort = 1001
*.server*.app[2].io.localPort = 1002
*.server*.app[3].io.localPort = 1003
*.server1.app[0].io.displayStringTextFormat = "client1: {numReceived} best-effort"
*.server1.app[1].io.displayStringTextFormat = "client2: {numReceived} best-effort"
*.server2.app[2].io.displayStringTextFormat = "client1: {numReceived} high-priority"
*.server2.app[3].io.displayStringTextFormat = "client2: {numReceived} high-priority"

# enable outgoing streams
*.client*.hasOutgoingStreams = true

# configure client stream identification
*.client*.bridging.streamIdentifier.identifier.mapping = [{stream: "best-effort", packetFilter: expr(udp.destPort == 1000)},
                                                          {stream: "high-priority", packetFilter: expr(udp.destPort == 1002)},
                                                          {stream: "best-effort", packetFilter: expr(udp.destPort == 1001)},
                                                          {stream: "high-priority", packetFilter: expr(udp.destPort == 1003)}]

# configure client stream encoding
*.client*.bridging.streamCoder.encoder.mapping = [{stream: "best-effort", pcp: 0},
                                                  {stream: "high-priority", pcp: 4}]

# enable streams
*.switch*.hasIncomingStreams = true
*.switch*.hasOutgoingStreams = true

*.switch*.bridging.streamCoder.decoder.mapping = [{pcp: 0, stream: "best-effort"},
                                                  {pcp: 4, stream: "high-priority"}]

*.switch*.bridging.streamCoder.encoder.mapping = [{stream: "best-effort", pcp: 0},
                                                  {stream: "high-priority", pcp: 4}]

# enable incoming streams
*.server*.hasIncomingStreams = true

# enable egress traffic shaping
*.switch*.hasEgressTrafficShaping = true

# configure time-aware traffic shaping with 2 queues
*.switch*.eth[*].macLayer.queue.numTrafficClasses = 2
*.switch*.eth[*].macLayer.queue.queue[0].display-name = "best-effort"
*.switch*.eth[*].macLayer.queue.queue[1].display-name = "high-priority"

# display number of packets sent and received on network nodes
*.visualizer.infoVisualizer.displayInfos = true
*.visualizer.infoVisualizer.placementHint = "top"
*.visualizer.infoVisualizer.modules = "*.client*.app[*].io OR *.server1.app[0..1].io OR *.server2.app[2..3].io"

*.visualizer.networkNodeVisualizer.annotationSpacing = 12

# configure gate scheduling visualization
*.visualizer.gateScheduleVisualizer.displayGateSchedules = true
*.visualizer.gateScheduleVisualizer.displayDuration = 200us
*.visualizer.gateScheduleVisualizer.gateFilter = "*.switch1.eth[2].** or *.switch2.eth[0].**.transmissionGate[0] or *.switch2.eth[1].**.transmissionGate[1]"
*.visualizer.gateScheduleVisualizer.height = 24
*.visualizer.gateScheduleVisualizer.width = 240
*.visualizer.gateScheduleVisualizer.placementHint = "top"

[ManualGateScheduling]
description = "Manual gate schedule configuration leads to larger end-to-end delays due to difficult calculation"

# configure switch1 manual gate scheduling
*.switch1.eth[2].macLayer.queue.transmissionGate[0].initiallyOpen = true
*.switch1.eth[2].macLayer.queue.transmissionGate[0].durations = [100us, 100us]
*.switch1.eth[2].macLayer.queue.transmissionGate[1].initiallyOpen = false
*.switch1.eth[2].macLayer.queue.transmissionGate[1].durations = [100us, 100us]

# configure switch2 manual gate scheduling
*.switch2.eth[0].macLayer.queue.transmissionGate[0].initiallyOpen = true
*.switch2.eth[0].macLayer.queue.transmissionGate[0].durations = [100us, 100us]
*.switch2.eth[1].macLayer.queue.transmissionGate[1].initiallyOpen = false
*.switch2.eth[1].macLayer.queue.transmissionGate[1].durations = [100us, 100us]

[AutomaticGateScheduling]
description = "Automatic gate schedule configuration leads to small (optimal) end-to-end delays"

*.gateScheduleConfigurator.typename = "Z3GateScheduleConfigurator"
# configure automatic gate scheduling
*.gateScheduleConfigurator.gateCycleDuration = 1ms
*.gateScheduleConfigurator.configuration =
   [{pcp: 0, gateIndex: 0, application: "app[0]", source: "client1", destination: "server1", packetLength: 1000B + 58B, packetInterval: 500us, maxLatency: 300us},
    {pcp: 4, gateIndex: 1, application: "app[1]", source: "client1", destination: "server2", packetLength: 500B + 58B, packetInterval: 250us, maxLatency: 150us},
    {pcp: 0, gateIndex: 0, application: "app[0]", source: "client2", destination: "server1", packetLength: 1000B + 58B, packetInterval: 500us, maxLatency: 300us},
    {pcp: 4, gateIndex: 1, application: "app[1]", source: "client2", destination: "server2", packetLength: 500B + 58B, packetInterval: 250us, maxLatency: 150us}]
