[General]
network = AsynchronousShaperValidation
sim-time-limit = 1s

####################
# Flow Configuration
#
# Name         Sender  Receiver  L2 Size (B)  Interval (us)  Filter data rate  Priority  Shaping
# Best Effort  S0      R         1518         125            ~95.744Mbps       -         -
# Medium       S5      R         322          250            ~9.6Mbps          5         CBS
# High         S6      R         322          125            ~19.2Mbps         6         CBS
# Critical     S7      R         1522         300            ~40Mbps           7         -
#
# Filter data rate = (L2 Size - 4 - 14 - 4) * 8 / Interval
#  4B (802.1Q)
#  14B (ETH MAC)
#  4B (ETH FCS)

########################
# Application Configuration
#
# port number: 100A
#   A = priority
#
# packet overhead:
#   50B = 8B (UDP) + 20B (IP) + 4B (802.1Q) + 14B (ETH MAC) + 4B (ETH FCS)
#   58B = 8B (UDP) + 20B (IP) + 4B (802.1Q) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)

*.S0.numApps = 1
*.S0.app[*].typename = "UdpSourceApp"
*.S0.app[0].display-name = "Best Effort"
*.S0.app[0].source.productionInterval = 125us
*.S0.app[0].source.packetLength = 1518B - 50B
*.S0.app[0].io.destAddress = "R"
*.S0.app[0].io.destPort = 1000

*.S5.numApps = 1
*.S5.app[*].typename = "UdpSourceApp"
*.S5.app[0].display-name = "Medium"
*.S5.app[0].source.initialProductionOffset = 1ns # to get behind the high priority even when the frames are generated at the same time
*.S5.app[0].source.productionInterval = 250us
*.S5.app[0].source.packetLength = 322B - 50B
*.S5.app[0].io.destAddress = "R"
*.S5.app[0].io.destPort = 1005

*.S6.numApps = 1
*.S6.app[*].typename = "UdpSourceApp"
*.S6.app[0].display-name = "High"
*.S6.app[0].source.productionInterval = 125us
*.S6.app[0].source.packetLength = 322B - 50B
*.S6.app[0].io.destAddress = "R"
*.S6.app[0].io.destPort = 1006

*.S7.numApps = 1
*.S7.app[*].typename = "UdpSourceApp"
*.S7.app[0].display-name = "Critical"
*.S7.app[0].source.productionInterval = 300us
*.S7.app[0].source.packetLength = 1522B - 50B
*.S7.app[0].io.destAddress = "R"
*.S7.app[0].io.destPort = 1007

*.R.numApps = 4
*.R.app[*].typename = "UdpSinkApp"
*.R.app[0].display-name = "Best Effort"
*.R.app[1].display-name = "Medium"
*.R.app[2].display-name = "High"
*.R.app[3].display-name = "Critical"
*.R.app[0].io.localPort = 1000
*.R.app[1].io.localPort = 1005
*.R.app[2].io.localPort = 1006
*.R.app[3].io.localPort = 1007

########################
# Ethernet Configuration

# all Ethernet links have the same data rate
*.*.eth[*].bitrate = 100Mbps

# packet processing delay
*.*.bridging.directionReverser.delayer.typename = "PacketDelayer"
*.*.bridging.directionReverser.delayer.delay = 8us

#############################
# Stream Coding Configuration

# enable outgoing TSN streams
*.S*.hasOutgoingStreams = true

# enable incoming TSN streams
*.R.hasIncomingStreams = true

# steering stream identification and coding
*.S0.bridging.streamIdentifier.identifier.mapping = [{stream: "Best Effort", packetFilter: "*"}]
*.S5.bridging.streamIdentifier.identifier.mapping = [{stream: "Medium", packetFilter: "*"}]
*.S6.bridging.streamIdentifier.identifier.mapping = [{stream: "High", packetFilter: "*"}]
*.S7.bridging.streamIdentifier.identifier.mapping = [{stream: "Critical", packetFilter: "*"}]

*.S0.bridging.streamCoder.encoder.mapping = [{stream: "Best Effort", pcp: 0}]
*.S5.bridging.streamCoder.encoder.mapping = [{stream: "Medium", pcp: 5}]
*.S6.bridging.streamCoder.encoder.mapping = [{stream: "High", pcp: 6}]
*.S7.bridging.streamCoder.encoder.mapping = [{stream: "Critical", pcp: 7}]


*.switch.bridging.streamCoder.encoder.mapping = [{stream: "Best Effort", pcp: 0},
                                                 {stream: "Medium", pcp: 5},
                                                 {stream: "High", pcp: 6},
                                                 {stream: "Critical", pcp: 7}]

*.switch.bridging.streamCoder.decoder.mapping = [{pcp: 7, stream: "Critical"},
                                                 {pcp: 6, stream: "High"},
                                                 {pcp: 5, stream: "Medium"},
                                                 {pcp: 0, stream: "Best Effort"}]

############################################
# Egress Per-stream Filtering Configuration

# enable ingerss per-stream filtering
*.switch.hasIngressTrafficFiltering = true

# asynchronous shaper traffic metering
*.switch.bridging.streamFilter.ingress.numStreams = 2
*.switch.bridging.streamFilter.ingress.classifier.mapping = {"Medium": 0, "High": 1}
*.switch.bridging.streamFilter.ingress.meter[*].typename = "EligibilityTimeMeter"
*.switch.bridging.streamFilter.ingress.filter[*].typename = "EligibilityTimeFilter"
*.switch.bridging.streamFilter.ingress.meter[0].committedInformationRate = 9.6Mbps
*.switch.bridging.streamFilter.ingress.meter[0].committedBurstSize = 322B - 22B # 4B (802.1Q) + 14B (ETH MAC) + 4B (ETH FCS)
*.switch.bridging.streamFilter.ingress.meter[1].committedInformationRate = 19.2Mbps
*.switch.bridging.streamFilter.ingress.meter[1].committedBurstSize = 322B - 22B # 4B (802.1Q) + 14B (ETH MAC) + 4B (ETH FCS)

*.switch.eth[*].macLayer.queue.queue[5..6].typename = "EligibilityTimeQueue"
*.switch.eth[*].macLayer.queue.transmissionSelectionAlgorithm[5..6].typename = "EligibilityTimeGate"

###############################
# Traffic Shaping Configuration

# enable egress traffic shaping
*.*.hasEgressTrafficShaping = true

# asynchronous shaper for AVB classes
*.switch.eth[*].macLayer.queue.queue[*].packetCapacity = 4
*.switch.eth[*].macLayer.queue.queue[*].dropperClass = "inet::queueing::PacketAtCollectionBeginDropper"
*.switch.eth[*].macLayer.queue.queue[5..6].typename = "EligibilityTimeQueue"
*.switch.eth[*].macLayer.queue.transmissionSelectionAlgorithm[5..6].typename = "EligibilityTimeGate"

##########################
# Visualizer Configuration

# enable multiple canvas visualizers
*.visualizer.typename = "IntegratedMultiCanvasVisualizer"

# network route activity visualization
*.visualizer.numNetworkRouteVisualizers = 4
*.visualizer.networkRouteVisualizer[*].displayRoutes = true
*.visualizer.networkRouteVisualizer[0].packetFilter = "\"Best Effort*\"" # TODO pcp filter
*.visualizer.networkRouteVisualizer[0].lineColor = "gray"
*.visualizer.networkRouteVisualizer[1].packetFilter = "Medium*" # TODO pcp filter
*.visualizer.networkRouteVisualizer[1].lineColor = "green4"
*.visualizer.networkRouteVisualizer[2].packetFilter = "High*" # TODO pcp filter
*.visualizer.networkRouteVisualizer[2].lineColor = "blue4"
*.visualizer.networkRouteVisualizer[3].packetFilter = "Critical*" # TODO pcp filter
*.visualizer.networkRouteVisualizer[3].lineColor = "red4"
