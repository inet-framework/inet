[General]
network = AsynchronousShaperValidation
sim-time-limit = 0.1s

######################################################################
# 2020 IEEE 20th International Conference on Communication Technology
#
# The Delay Bound Analysis Based on Network Calculus for Asynchronous
# Traffic Shaping under Parameter Inconsistency
#
# TODO refer to paper

####################
# Flow Configuration
#
# Path  Sender  Receiver  Class    PCP  Flows   Interval  Length  Data rate  Total rate
# 1     N1      N7        CDT      6    10      5ms       100B    160kbps    1.6Mbps
# 2     N2      N7        Class A  5    10      10ms      1000B   800kbps    8Mbps
# 3     N3      N7        Class B  4    10      20ms      1500B   600kbps    6Mbps
# 4     N4      N6        Class A  5    5       10ms      1000B   800kbps    4Mbps
# 5     N5      N6        Class B  4    5       20ms      1500B   600kbps    3Mbps
# 6     N8      N7        Class A  5    5       10ms      800B    640kbps    3.2Mbps
# 7     N8      N7        Class B  4    5       20ms      1200B   480kbps    2.4Mbps
# 8     N1      N7        BE       0    1       0.1ms     1518B   ~120Mbps    ~120Mbps

###########################
# Application Configuration
#
# port number: ABCD
#   A = always 1
#   B = end device index
#   C = flow index
#   D = application index
#
# packet overhead:
#   58B = 8B (UDP) + 20B (IP) + 4B (802.1Q) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)

*.N1.numApps = 11
*.N1.app[*].typename = "UdpSourceApp"
*.N1.app[0..9].display-name = "CDT" + string(index)
*.N1.app[0..9].source.initialProductionOffset = 5ms
*.N1.app[0..9].source.productionInterval = 5ms
*.N1.app[0..9].source.packetLength = 100B - 58B
*.N1.app[0..9].io.destAddress = "N7"
*.N1.app[0..9].io.destPort = 1110 + parent.index
*.N1.app[10].display-name = "BE"
*.N1.app[10].source.productionInterval = 0.1ms
*.N1.app[10].source.packetLength = 1518B - 58B
*.N1.app[10].io.destAddress = "N7"
*.N1.app[10].io.destPort = 1180

*.N2.numApps = 10
*.N2.app[*].typename = "UdpSourceApp"
*.N2.app[*].display-name = "Class A" + string(index)
*.N2.app[*].source.initialProductionOffset = 10ms
*.N2.app[*].source.productionInterval = 10ms
*.N2.app[*].source.packetLength = 1000B - 58B
*.N2.app[*].io.destAddress = "N7"
*.N2.app[*].io.destPort = 1220 + parent.index

*.N3.numApps = 10
*.N3.app[*].typename = "UdpSourceApp"
*.N3.app[*].display-name = "Class B" + string(index)
*.N3.app[*].source.initialProductionOffset = 20ms
*.N3.app[*].source.productionInterval = 20ms
*.N3.app[*].source.packetLength = 1500B - 58B
*.N3.app[*].io.destAddress = "N7"
*.N3.app[*].io.destPort = 1330 + parent.index

*.N4.numApps = 5
*.N4.app[*].typename = "UdpSourceApp"
*.N4.app[*].display-name = "Class A" + string(index)
*.N4.app[*].source.initialProductionOffset = 10ms
*.N4.app[*].source.productionInterval = 10ms
*.N4.app[*].source.packetLength = 1000B - 58B
*.N4.app[*].io.destAddress = "N6"
*.N4.app[*].io.destPort = 1440 + parent.index

*.N5.numApps = 5
*.N5.app[*].typename = "UdpSourceApp"
*.N5.app[*].display-name = "Class B" + string(index)
*.N5.app[*].source.initialProductionOffset = 20ms
*.N5.app[*].source.productionInterval = 20ms
*.N5.app[*].source.packetLength = 1500B - 58B
*.N5.app[*].io.destAddress = "N6"
*.N5.app[*].io.destPort = 1550 + parent.index

*.N6.numApps = 10
*.N6.app[*].typename = "UdpSinkApp"
*.N6.app[0..4].display-name = "N4 Class A" + string(index)
*.N6.app[5..9].display-name = "N5 Class B" + string(index - 5)
*.N6.app[0..4].io.localPort = 1440 + parent.index
*.N6.app[5..9].io.localPort = 1550 + parent.index - 5

*.N7.numApps = 41
*.N7.app[*].typename = "UdpSinkApp"
*.N7.app[0..9].display-name = "CDT" + string(index)
*.N7.app[10..19].display-name = "N2 Class A" + string(index - 10)
*.N7.app[20..29].display-name = "N3 Class B" + string(index - 20)
*.N7.app[30..34].display-name = "N8 Class A" + string(index - 30)
*.N7.app[35..39].display-name = "N8 Class B" + string(index - 35)
*.N7.app[40].display-name = "BE"
*.N7.app[0..9].io.localPort = 1110 + parent.index
*.N7.app[10..19].io.localPort = 1220 + parent.index - 10
*.N7.app[20..29].io.localPort = 1330 + parent.index - 20
*.N7.app[30..34].io.localPort = 1860 + parent.index - 30
*.N7.app[35..39].io.localPort = 1870 + parent.index - 35
*.N7.app[40].io.localPort = 1180

*.N8.numApps = 10
*.N8.app[*].typename = "UdpSourceApp"
*.N8.app[0..4].display-name = "Class A" + string(index)
*.N8.app[0..4].source.initialProductionOffset = 10ms
*.N8.app[0..4].source.productionInterval = 10ms
*.N8.app[0..4].source.packetLength = 800B - 58B
*.N8.app[0..4].io.destAddress = "N7"
*.N8.app[0..4].io.destPort = 1860 + parent.index
*.N8.app[5..9].display-name = "Class B" + string(index - 5)
*.N8.app[5..9].source.initialProductionOffset = 20ms
*.N8.app[5..9].source.productionInterval = 20ms
*.N8.app[5..9].source.packetLength = 1200B - 58B
*.N8.app[5..9].io.destAddress = "N7"
*.N8.app[5..9].io.destPort = 1870 + parent.index - 5

########################
# Ethernet Configuration

# all Ethernet links have the same data rate
*.*.eth[*].bitrate = 100Mbps

#############################
# Stream Coding Configuration

# enable outgoing TSN streams
*.N*.hasOutgoingStreams = true

# steering stream identification and coding
*.N1.bridging.streamIdentifier.identifier.mapping = [{stream: "BE", packetFilter: expr(udp.destPort == 1180)},
                                                     {stream: "CDT0", packetFilter: expr(udp.destPort == 1110)},
                                                     {stream: "CDT1", packetFilter: expr(udp.destPort == 1111)},
                                                     {stream: "CDT2", packetFilter: expr(udp.destPort == 1112)},
                                                     {stream: "CDT3", packetFilter: expr(udp.destPort == 1113)},
                                                     {stream: "CDT4", packetFilter: expr(udp.destPort == 1114)},
                                                     {stream: "CDT5", packetFilter: expr(udp.destPort == 1115)},
                                                     {stream: "CDT6", packetFilter: expr(udp.destPort == 1116)},
                                                     {stream: "CDT7", packetFilter: expr(udp.destPort == 1117)},
                                                     {stream: "CDT8", packetFilter: expr(udp.destPort == 1118)},
                                                     {stream: "CDT9", packetFilter: expr(udp.destPort == 1119)}]

*.N2.bridging.streamIdentifier.identifier.mapping = [{stream: "Class A0", packetFilter: expr(udp.destPort == 1220)},
                                                     {stream: "Class A1", packetFilter: expr(udp.destPort == 1221)},
                                                     {stream: "Class A2", packetFilter: expr(udp.destPort == 1222)},
                                                     {stream: "Class A3", packetFilter: expr(udp.destPort == 1223)},
                                                     {stream: "Class A4", packetFilter: expr(udp.destPort == 1224)},
                                                     {stream: "Class A5", packetFilter: expr(udp.destPort == 1225)},
                                                     {stream: "Class A6", packetFilter: expr(udp.destPort == 1226)},
                                                     {stream: "Class A7", packetFilter: expr(udp.destPort == 1227)},
                                                     {stream: "Class A8", packetFilter: expr(udp.destPort == 1228)},
                                                     {stream: "Class A9", packetFilter: expr(udp.destPort == 1229)}]

*.N3.bridging.streamIdentifier.identifier.mapping = [{stream: "Class B0", packetFilter: expr(udp.destPort == 1330)},
                                                     {stream: "Class B1", packetFilter: expr(udp.destPort == 1331)},
                                                     {stream: "Class B2", packetFilter: expr(udp.destPort == 1332)},
                                                     {stream: "Class B3", packetFilter: expr(udp.destPort == 1333)},
                                                     {stream: "Class B4", packetFilter: expr(udp.destPort == 1334)},
                                                     {stream: "Class B5", packetFilter: expr(udp.destPort == 1335)},
                                                     {stream: "Class B6", packetFilter: expr(udp.destPort == 1336)},
                                                     {stream: "Class B7", packetFilter: expr(udp.destPort == 1337)},
                                                     {stream: "Class B8", packetFilter: expr(udp.destPort == 1338)},
                                                     {stream: "Class B9", packetFilter: expr(udp.destPort == 1339)}]

*.N4.bridging.streamIdentifier.identifier.mapping = [{stream: "Class A0", packetFilter: expr(udp.destPort == 1440)},
                                                     {stream: "Class A1", packetFilter: expr(udp.destPort == 1441)},
                                                     {stream: "Class A2", packetFilter: expr(udp.destPort == 1442)},
                                                     {stream: "Class A3", packetFilter: expr(udp.destPort == 1443)},
                                                     {stream: "Class A4", packetFilter: expr(udp.destPort == 1444)}]

*.N5.bridging.streamIdentifier.identifier.mapping = [{stream: "Class B0", packetFilter: expr(udp.destPort == 1550)},
                                                     {stream: "Class B1", packetFilter: expr(udp.destPort == 1551)},
                                                     {stream: "Class B2", packetFilter: expr(udp.destPort == 1552)},
                                                     {stream: "Class B3", packetFilter: expr(udp.destPort == 1553)},
                                                     {stream: "Class B4", packetFilter: expr(udp.destPort == 1554)}]

*.N8.bridging.streamIdentifier.identifier.mapping = [{stream: "Class A0", packetFilter: expr(udp.destPort == 1860)},
                                                     {stream: "Class A1", packetFilter: expr(udp.destPort == 1861)},
                                                     {stream: "Class A2", packetFilter: expr(udp.destPort == 1862)},
                                                     {stream: "Class A3", packetFilter: expr(udp.destPort == 1863)},
                                                     {stream: "Class A4", packetFilter: expr(udp.destPort == 1864)},
                                                     {stream: "Class B0", packetFilter: expr(udp.destPort == 1870)},
                                                     {stream: "Class B1", packetFilter: expr(udp.destPort == 1871)},
                                                     {stream: "Class B2", packetFilter: expr(udp.destPort == 1872)},
                                                     {stream: "Class B3", packetFilter: expr(udp.destPort == 1873)},
                                                     {stream: "Class B4", packetFilter: expr(udp.destPort == 1874)}]

*.N1.bridging.streamCoder.encoder.mapping = [{stream: "CDT0", pcp: 6},
                                             {stream: "CDT1", pcp: 6},
                                             {stream: "CDT2", pcp: 6},
                                             {stream: "CDT3", pcp: 6},
                                             {stream: "CDT4", pcp: 6},
                                             {stream: "CDT5", pcp: 6},
                                             {stream: "CDT6", pcp: 6},
                                             {stream: "CDT7", pcp: 6},
                                             {stream: "CDT8", pcp: 6},
                                             {stream: "CDT9", pcp: 6},
                                             {stream: "BE", pcp: 0}]

*.N2.bridging.streamCoder.encoder.mapping = [{stream: "Class A0", pcp: 5},
                                             {stream: "Class A1", pcp: 5},
                                             {stream: "Class A2", pcp: 5},
                                             {stream: "Class A3", pcp: 5},
                                             {stream: "Class A4", pcp: 5},
                                             {stream: "Class A5", pcp: 5},
                                             {stream: "Class A6", pcp: 5},
                                             {stream: "Class A7", pcp: 5},
                                             {stream: "Class A8", pcp: 5},
                                             {stream: "Class A9", pcp: 5}]

*.N3.bridging.streamCoder.encoder.mapping = [{stream: "Class B0", pcp: 4},
                                             {stream: "Class B1", pcp: 4},
                                             {stream: "Class B2", pcp: 4},
                                             {stream: "Class B3", pcp: 4},
                                             {stream: "Class B4", pcp: 4},
                                             {stream: "Class B5", pcp: 4},
                                             {stream: "Class B6", pcp: 4},
                                             {stream: "Class B7", pcp: 4},
                                             {stream: "Class B8", pcp: 4},
                                             {stream: "Class B9", pcp: 4}]

*.N4.bridging.streamCoder.encoder.mapping = [{stream: "Class A0", pcp: 5},
                                             {stream: "Class A1", pcp: 5},
                                             {stream: "Class A2", pcp: 5},
                                             {stream: "Class A3", pcp: 5},
                                             {stream: "Class A4", pcp: 5}]

*.N5.bridging.streamCoder.encoder.mapping = [{stream: "Class B0", pcp: 4},
                                             {stream: "Class B1", pcp: 4},
                                             {stream: "Class B2", pcp: 4},
                                             {stream: "Class B3", pcp: 4},
                                             {stream: "Class B4", pcp: 4}]

*.N8.bridging.streamCoder.encoder.mapping = [{stream: "Class A0", pcp: 5},
                                             {stream: "Class A1", pcp: 5},
                                             {stream: "Class A2", pcp: 5},
                                             {stream: "Class A3", pcp: 5},
                                             {stream: "Class A4", pcp: 5},
                                             {stream: "Class B0", pcp: 4},
                                             {stream: "Class B1", pcp: 4},
                                             {stream: "Class B2", pcp: 4},
                                             {stream: "Class B3", pcp: 4},
                                             {stream: "Class B4", pcp: 4},
                                             {stream: "Class B5", pcp: 4}]

*.S*.bridging.streamCoder.encoder.mapping = [{stream: "CDT", pcp: 6},
                                             {stream: "Class A", pcp: 5},
                                             {stream: "Class B", pcp: 4},
                                             {stream: "BE", pcp: 0}]

*.S*.bridging.streamCoder.decoder.mapping = [{pcp: 6, stream: "CDT"},
                                             {pcp: 5, stream: "Class A"},
                                             {pcp: 4, stream: "Class B"},
                                             {pcp: 0, stream: "BE"}]

############################################
# Egress Per-stream Filtering Configuration

# enable egress per-stream filtering
*.N*.hasEgressTrafficFiltering = true

# egress per-stream filtering
*.N*.bridging.streamFilter.egress.meter[*].typename = "EligibilityTimeMeter"
*.N*.bridging.streamFilter.egress.filter[*].typename = "EligibilityTimeFilter"

*.N1.bridging.streamFilter.egress.numStreams = 10
*.N1.bridging.streamFilter.egress.hasDefaultPath = true # for BE traffic
*.N1.bridging.streamFilter.egress.classifier.mapping = {CDT0: 0, CDT1: 1, CDT2: 2, CDT3: 3, CDT4: 4, CDT5: 5, CDT6: 6, CDT7: 7, CDT8: 8, CDT9: 9}
*.N1.bridging.streamFilter.egress.meter[*].committedInformationRate = 160kbps
*.N1.bridging.streamFilter.egress.meter[*].committedBurstSize = 100B

*.N2.bridging.streamFilter.egress.numStreams = 10
*.N2.bridging.streamFilter.egress.hasDefaultPath = false
*.N2.bridging.streamFilter.egress.classifier.mapping = {"Class A0": 0, "Class A1": 1, "Class A2": 2, "Class A3": 3, "Class A4": 4,
                                                        "Class A5": 5, "Class A6": 6, "Class A7": 7, "Class A8": 8, "Class A9": 9}
*.N2.bridging.streamFilter.egress.meter[*].committedInformationRate = 800kbps
*.N2.bridging.streamFilter.egress.meter[*].committedBurstSize = 1000B

*.N3.bridging.streamFilter.egress.numStreams = 10
*.N3.bridging.streamFilter.egress.hasDefaultPath = false
*.N3.bridging.streamFilter.egress.classifier.mapping = {"Class B0": 0, "Class B1": 1, "Class B2": 2, "Class B3": 3, "Class B4": 4,
                                                        "Class B5": 5, "Class B6": 6, "Class B7": 7, "Class B8": 8, "Class B9": 9}
*.N3.bridging.streamFilter.egress.meter[*].committedInformationRate = 600kbps
*.N3.bridging.streamFilter.egress.meter[*].committedBurstSize = 1500B

*.N4.bridging.streamFilter.egress.numStreams = 5
*.N4.bridging.streamFilter.egress.hasDefaultPath = false
*.N4.bridging.streamFilter.egress.classifier.mapping = {"Class A0": 0, "Class A1": 1, "Class A2": 2, "Class A3": 3, "Class A4": 4, "Class A5": 5}
*.N4.bridging.streamFilter.egress.meter[*].committedInformationRate = 800kbps
*.N4.bridging.streamFilter.egress.meter[*].committedBurstSize = 1000B

*.N5.bridging.streamFilter.egress.numStreams = 5
*.N5.bridging.streamFilter.egress.hasDefaultPath = false
*.N5.bridging.streamFilter.egress.classifier.mapping = {"Class B0": 0, "Class B1": 1, "Class B2": 2, "Class B3": 3, "Class B4": 4, "Class B5": 5}
*.N5.bridging.streamFilter.egress.meter[*].committedInformationRate = 600kbps
*.N5.bridging.streamFilter.egress.meter[*].committedBurstSize = 1500B

*.N8.bridging.streamFilter.egress.numStreams = 10
*.N6.bridging.streamFilter.egress.hasDefaultPath = false
*.N8.bridging.streamFilter.egress.classifier.mapping = {"Class A0": 0, "Class A1": 1, "Class A2": 2, "Class A3": 3, "Class A4": 4,
                                                        "Class B0": 5, "Class B1": 6, "Class B2": 7, "Class B3": 8, "Class B4": 9}
*.N8.bridging.streamFilter.egress.meter[0..4].committedInformationRate = 640kbps
*.N8.bridging.streamFilter.egress.meter[0..4].committedBurstSize = 800B
*.N8.bridging.streamFilter.egress.meter[5..9].committedInformationRate = 480kbps
*.N8.bridging.streamFilter.egress.meter[5..9].committedBurstSize = 1200B

############################################
# Ingress Per-stream Filtering Configuration

# enable ingress per-stream filtering
*.S*.hasIngressTrafficFiltering = true

# ingress per-stream filtering
*.S*.bridging.streamFilter.ingress.numStreams = 2
*.S*.bridging.streamFilter.ingress.classifier.mapping = {"Class A": 0, "Class B": 1}
*.S*.bridging.streamFilter.ingress.meter[*].typename = "EligibilityTimeMeter"
*.S*.bridging.streamFilter.ingress.filter[*].typename = "EligibilityTimeFilter"

# flow 2 + flow 3
*.S1.bridging.streamFilter.ingress.meter[0].committedInformationRate = 800kbps * 10
*.S1.bridging.streamFilter.ingress.meter[0].committedBurstSize = 1000B * 10 # ${cbs = 50..100 step 5}kb
*.S1.bridging.streamFilter.ingress.meter[1].committedInformationRate = 600kbps * 10
*.S1.bridging.streamFilter.ingress.meter[1].committedBurstSize = 1500B * 10

# flow 2 + flow 3 + flow 4 + flow 5
*.S2.bridging.streamFilter.ingress.meter[0].committedInformationRate = 800kbps * 10 + 800kbps * 5
*.S2.bridging.streamFilter.ingress.meter[0].committedBurstSize = 1000B * 10 + 1000B * 5
*.S2.bridging.streamFilter.ingress.meter[1].committedInformationRate = 600kbps * 10 + 600kbps * 5
*.S2.bridging.streamFilter.ingress.meter[1].committedBurstSize = 1500B * 10 + 1000B * 5

# flow 2 + flow 3 + flow 4 + flow 5 + flow 6 + flow 7
*.S3.bridging.streamFilter.ingress.meter[0].committedInformationRate = 800kbps * 10 + 800kbps * 5 + 640kbps * 5
*.S3.bridging.streamFilter.ingress.meter[0].committedBurstSize = 1000B * 10 + 1000B * 5 + 800B * 5
*.S3.bridging.streamFilter.ingress.meter[1].committedInformationRate = 600kbps * 10 + 600kbps * 5 + 480kbps * 5
*.S3.bridging.streamFilter.ingress.meter[1].committedBurstSize = 1500B * 10 + 1000B * 5 + 1200B * 5

###############################
# Traffic Shaping Configuration

# enable egress traffic shaping
*.*.hasEgressTrafficShaping = true

# asynchronous shaper for AVB classes
*.N*.eth[*].macLayer.queue.queue[6].typename = "EligibilityTimeQueue"
*.N*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[6].typename = "EligibilityTimeGate"
*.*.eth[*].macLayer.queue.queue[4..5].typename = "EligibilityTimeQueue"
*.*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[4..5].typename = "EligibilityTimeGate"

##########################
# Visualizer Configuration

# enable multiple canvas visualizers
*.visualizer.typename = "IntegratedMultiCanvasVisualizer"

# network route activity visualization
*.visualizer.numNetworkRouteVisualizers = 4
*.visualizer.networkRouteVisualizer[*].displayRoutes = true
*.visualizer.networkRouteVisualizer[0].packetFilter = "CDT*" # TODO pcp filter
*.visualizer.networkRouteVisualizer[0].lineColor = "red4"
*.visualizer.networkRouteVisualizer[1].packetFilter = "\"Class A*\"" # TODO pcp filter
*.visualizer.networkRouteVisualizer[1].lineColor = "blue4"
*.visualizer.networkRouteVisualizer[2].packetFilter = "\"Class B*\"" # TODO pcp filter
*.visualizer.networkRouteVisualizer[2].lineColor = "green4"
*.visualizer.networkRouteVisualizer[3].packetFilter = "BE*" # TODO pcp filter
*.visualizer.networkRouteVisualizer[3].lineColor = "gray"
