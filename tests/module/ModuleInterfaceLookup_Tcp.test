%description:

Check module interface lookup of TCP module.

%file: TestNetwork.ned

import inet.common.MessageDispatcher;
import inet.queueing.sink.PassivePacketSink;
import inet.transportlayer.tcp.Tcp;

network TestNetwork
{
    submodules:
        messageDispatcher: MessageDispatcher;
        tcp: Tcp;
        upperSink: PassivePacketSink;
        lowerSink: PassivePacketSink;
        test: Test;
    connections:
        messageDispatcher.out++ --> tcp.appIn;
        messageDispatcher.out++ --> tcp.ipIn;
        tcp.appOut --> upperSink.in;
        tcp.ipOut --> lowerSink.in;
}

%inifile: omnetpp.ini

[General]
network = TestNetwork
ned-path = .;../../../../src
sim-time-limit = 0s

cmdenv-log-prefix = "%>"

%includes
#include "inet/common/IModuleInterfaceLookup.h"
#include "inet/common/ProtocolTag_m.h"
#include "inet/queueing/contract/IPassivePacketSink.h"

%activity:
using namespace inet;
using namespace inet::queueing;

#define CHECK(gate, argument) { std::cerr << "gate = " << #gate << ", " << printToStringIfPossible(argument, 0) << " --> " << (findModuleInterface(gate, typeid(IPassivePacketSink), &argument) != nullptr ? "found" : "not found") << std::endl; }

auto messageDispatcher = cSimulation::getActiveSimulation()->getSystemModule()->getModuleByPath("messageDispatcher");
auto appIn = messageDispatcher->gate("out", 0);
auto ipIn = messageDispatcher->gate("out", 1);

DispatchProtocolReq dispatchProtocolReq;
dispatchProtocolReq.setProtocol(&Protocol::tcp);

PacketProtocolTag packetProtocolTag;
packetProtocolTag.setProtocol(&Protocol::tcp);

PacketServiceTag packetServiceTag;
packetServiceTag.setProtocol(&Protocol::tcp);

dispatchProtocolReq.setServicePrimitive(SP_REQUEST);
CHECK(appIn, dispatchProtocolReq);
CHECK(ipIn, dispatchProtocolReq);

dispatchProtocolReq.setServicePrimitive(SP_INDICATION);
CHECK(appIn, dispatchProtocolReq);
CHECK(ipIn, dispatchProtocolReq);

CHECK(appIn, packetServiceTag);
CHECK(appIn, packetProtocolTag);

CHECK(ipIn, packetProtocolTag);
CHECK(ipIn, packetServiceTag);

%contains: stderr
gate = appIn, DispatchProtocolReq, protocol = tcp(60), servicePrimitive = 1 (SP_REQUEST) --> found
gate = ipIn, DispatchProtocolReq, protocol = tcp(60), servicePrimitive = 1 (SP_REQUEST) --> not found
gate = appIn, DispatchProtocolReq, protocol = tcp(60), servicePrimitive = 2 (SP_INDICATION) --> not found
gate = ipIn, DispatchProtocolReq, protocol = tcp(60), servicePrimitive = 2 (SP_INDICATION) --> found
gate = appIn, PacketServiceTag, protocol = tcp(60) --> found
gate = appIn, PacketProtocolTag, protocol = tcp(60), frontOffset = 0 B, backOffset = 0 B --> not found
gate = ipIn, PacketProtocolTag, protocol = tcp(60), frontOffset = 0 B, backOffset = 0 B --> found
gate = ipIn, PacketServiceTag, protocol = tcp(60) --> not found

%#--------------------------------------------------------------------------------------------------------------
%postrun-command: grep "undisposed object:" test.out > test_undisposed.out || true
%not-contains: test_undisposed.out
undisposed object: (
%#--------------------------------------------------------------------------------------------------------------
