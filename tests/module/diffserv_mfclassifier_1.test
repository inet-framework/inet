%description:
Tests for MultiFieldClassifier.


%file: TestApp.ned

simple TestApp
{
  gates:
    input in[];
    input defaultIn;
    output out;
}

%file: TestApp.cc

#include <fstream>
#include "inet/common/INETDefs.h"
#include "inet/common/Protocol.h"
#include "inet/common/ProtocolTag_m.h"
#include "inet/common/packet/Packet.h"
#include "inet/networklayer/ipv4/Ipv4Header_m.h"
#include "inet/networklayer/ipv6/Ipv6Header.h"
#include "inet/transportlayer/udp/UdpHeader_m.h"

using namespace inet;
namespace diffserv_mfclassifier_1
{

class INET_API TestApp : public cSimpleModule
{
    std::ofstream out;
  protected:
    void initialize();
    void finalize();
    void handleMessage(cMessage *msg);
};

Define_Module(TestApp);

void TestApp::initialize()
{
    out.open("result.txt");
    if (out.fail())
      throw cRuntimeError("Can not open output file.");

    {
        Packet *packet = new Packet("ipv4-1");
        const auto& ipv4Header = makeShared<Ipv4Header>();
        ipv4Header->setSrcAddress(Ipv4Address("192.168.1.1"));
        packet->insertAtFront(ipv4Header);
        packet->addTagIfAbsent<PacketProtocolTag>()->setProtocol(&Protocol::ipv4);
        send(packet, "out");
    }

    {
        Packet *packet = new Packet("ipv6-2");
        const auto& ipv6Header = makeShared<Ipv6Header>();
        ipv6Header->setSrcAddress(Ipv6Address("fe80::1122:3344:5566"));
        packet->insertAtFront(ipv6Header);
        packet->addTagIfAbsent<PacketProtocolTag>()->setProtocol(&Protocol::ipv6);
        send(packet, "out");
    }

    {
        Packet *packet = new Packet("ipv4-3");
        const auto& ipv4Header = makeShared<Ipv4Header>();
        ipv4Header->setDestAddress(Ipv4Address("192.168.1.1"));
        packet->insertAtFront(ipv4Header);
        packet->addTagIfAbsent<PacketProtocolTag>()->setProtocol(&Protocol::ipv4);
        send(packet, "out");
    }

    {
        Packet *packet = new Packet("ipv6-4");
        const auto& ipv6Header = makeShared<Ipv6Header>();
        ipv6Header->setDestAddress(Ipv6Address("fe80::1122:3344:5566"));
        packet->insertAtFront(ipv6Header);
        packet->addTagIfAbsent<PacketProtocolTag>()->setProtocol(&Protocol::ipv6);
        send(packet, "out");
    }

    {
        Packet *packet = new Packet("ipv4-5");
        const auto& ipv4Header = makeShared<Ipv4Header>();
        const auto& udpPacket = makeShared<UdpHeader>();
        udpPacket->setSourcePort(1000);
        packet->insertAtFront(udpPacket);
        ipv4Header->setProtocolId(IP_PROT_UDP);
        packet->insertAtFront(ipv4Header);
        packet->addTagIfAbsent<PacketProtocolTag>()->setProtocol(&Protocol::ipv4);
        send(packet, "out");
    }

    {
        Packet *packet = new Packet("ipv4-6");
        const auto& ipv4Header = makeShared<Ipv4Header>();
        const auto& udpPacket = makeShared<UdpHeader>();
        udpPacket->setDestinationPort(1000);
        packet->insertAtFront(udpPacket);
        ipv4Header->setProtocolId(IP_PROT_UDP);
        packet->insertAtFront(ipv4Header);
        packet->addTagIfAbsent<PacketProtocolTag>()->setProtocol(&Protocol::ipv4);
        send(packet, "out");
    }

    {
        Packet *packet = new Packet("ipv4-7");
        const auto& ipv4Header = makeShared<Ipv4Header>();
        const auto& udpPacket = makeShared<UdpHeader>();
        udpPacket->setDestinationPort(999);
        packet->insertAtFront(udpPacket);
        ipv4Header->setProtocolId(IP_PROT_UDP);
        packet->insertAtFront(ipv4Header);
        packet->addTagIfAbsent<PacketProtocolTag>()->setProtocol(&Protocol::ipv4);
        send(packet, "out");
    }

    {
        Packet *packet = new Packet("ipv4-8");
        const auto& ipv4Header = makeShared<Ipv4Header>();
        ipv4Header->setTypeOfService(0x2e);
        packet->insertAtFront(ipv4Header);
        packet->addTagIfAbsent<PacketProtocolTag>()->setProtocol(&Protocol::ipv4);
        send(packet, "out");
    }

    {
        Packet *packet = new Packet("ipv6-9");
        const auto& ipv6Header = makeShared<Ipv6Header>();
        ipv6Header->setTrafficClass(0x2e);
        packet->insertAtFront(ipv6Header);
        packet->addTagIfAbsent<PacketProtocolTag>()->setProtocol(&Protocol::ipv6);
        send(packet, "out");
    }

    {
        Packet *packet = new Packet("ipv4-10");
        const auto& ipv4Header = makeShared<Ipv4Header>();
        ipv4Header->setSrcAddress(Ipv4Address("192.168.2.1"));    
        packet->insertAtFront(ipv4Header);
        packet->addTagIfAbsent<PacketProtocolTag>()->setProtocol(&Protocol::ipv4);
        send(packet, "out");
    }

    {
        Packet *packet = new Packet("ipv6-11");
        const auto& ipv6Header = makeShared<Ipv6Header>();
        ipv6Header->setSrcAddress(Ipv6Address("fe80::1"));
        packet->insertAtFront(ipv6Header);
        packet->addTagIfAbsent<PacketProtocolTag>()->setProtocol(&Protocol::ipv6);
        send(packet, "out");
    }

    {
        Packet *packet = new Packet("ipv4-12");
        const auto& ipv4Header = makeShared<Ipv4Header>();
        ipv4Header->setDestAddress(Ipv4Address("192.168.2.1"));    
        packet->insertAtFront(ipv4Header);
        packet->addTagIfAbsent<PacketProtocolTag>()->setProtocol(&Protocol::ipv4);
        send(packet, "out");
    }

    {
        Packet *packet = new Packet("ipv6-13");
        const auto& ipv6Header = makeShared<Ipv6Header>();
        ipv6Header->setDestAddress(Ipv6Address("fe80::1"));
        packet->insertAtFront(ipv6Header);
        packet->addTagIfAbsent<PacketProtocolTag>()->setProtocol(&Protocol::ipv6);
        send(packet, "out");
    }

    {
        Packet *packet = new Packet("ipv4-14");
        const auto& ipv4Header = makeShared<Ipv4Header>();
        const auto& udpPacket = makeShared<UdpHeader>();
        udpPacket->setSourcePort(2100);
        packet->insertAtFront(udpPacket);
        ipv4Header->setProtocolId(IP_PROT_UDP);
        packet->insertAtFront(ipv4Header);
        packet->addTagIfAbsent<PacketProtocolTag>()->setProtocol(&Protocol::ipv4);
        send(packet, "out");
    }

    {
        Packet *packet = new Packet("ipv6-15");
        const auto& ipv6Header = makeShared<Ipv6Header>();
        const auto& udpPacket = makeShared<UdpHeader>();
        udpPacket->setSourcePort(2200);
        packet->insertAtFront(udpPacket);
        ipv6Header->setProtocolId(IP_PROT_UDP);
        packet->insertAtFront(ipv6Header);
        packet->addTagIfAbsent<PacketProtocolTag>()->setProtocol(&Protocol::ipv6);
        send(packet, "out");
    }

    {
        Packet *packet = new Packet("ipv4-16");
        const auto& ipv4Header = makeShared<Ipv4Header>();
        const auto& udpPacket = makeShared<UdpHeader>();
        udpPacket->setDestinationPort(2300);
        packet->insertAtFront(udpPacket);
        ipv4Header->setProtocolId(IP_PROT_UDP);
        packet->insertAtFront(ipv4Header);
        packet->addTagIfAbsent<PacketProtocolTag>()->setProtocol(&Protocol::ipv4);
        send(packet, "out");
    }

    {
        Packet *packet = new Packet("ipv6-17");
        const auto& ipv6Header = makeShared<Ipv6Header>();
        const auto& udpPacket = makeShared<UdpHeader>();
        udpPacket->setDestinationPort(2400);
        packet->insertAtFront(udpPacket);
        ipv6Header->setProtocolId(IP_PROT_UDP);
        packet->insertAtFront(ipv6Header);
        packet->addTagIfAbsent<PacketProtocolTag>()->setProtocol(&Protocol::ipv6);
        send(packet, "out");
    }

    {
        Packet *packet = new Packet("ipv4-18");
        const auto& ipv4Header = makeShared<Ipv4Header>();
        packet->insertAtFront(ipv4Header);
        packet->addTagIfAbsent<PacketProtocolTag>()->setProtocol(&Protocol::ipv4);
        send(packet, "out");
    }
}

void TestApp::finalize()
{
    out.close();
}

void TestApp::handleMessage(cMessage *msg)
{
  cGate *gate = msg->getArrivalGate();
  out << msg->getName() << ": " << gate->getName() << "[" << gate->getIndex() << "]\n";
  delete msg;
}

}

%file: TestNetwork.ned

import inet.networklayer.diffserv.MultiFieldClassifier;

network TestNetwork
{
  parameters:
    *.interfaceTableModule = "";
  submodules:
    app: TestApp;
    classifier: MultiFieldClassifier { filters = xmldoc("filters.xml"); }
  connections:
    app.out --> classifier.in;
    for i=0..13 {
      classifier.outs++ --> app.in++;
    }
    classifier.defaultOut --> app.defaultIn;
}

%file: filters.xml

<filters>
  <filter gate="0" srcAddress="192.168.1.1"/>
  <filter gate="1" srcAddress="fe80::1122:3344:5566"/>
  <filter gate="2" destAddress="192.168.1.1"/>
  <filter gate="3" destAddress="fe80::1122:3344:5566"/>
  <filter gate="4" srcPort="1000"/>
  <filter gate="5" destPort="1000"/>
  <filter gate="6" tos="0x2e" tosMask="0x3f"/>

  <filter gate="7" srcAddress="192.168.0.0" srcPrefixLength="16"/>
  <filter gate="8" srcAddress="fe80::" srcPrefixLength="10"/>
  <filter gate="9" destAddress="192.168.0.0" destPrefixLength="16"/>
  <filter gate="10" destAddress="fe80::" destPrefixLength="10"/>
  <filter gate="11" srcPortMin="2000" srcPortMax="2999"/>
  <filter gate="12" destPortMin="2000" destPortMax="2999"/>

  <filter gate="13" protocol="17"/>
</filters>


%inifile: omnetpp.ini
[General]
ned-path = .;../../../../src;../../lib
sim-time-limit=100s
cmdenv-express-mode = true
network = TestNetwork

#omnetpp 5.0 - 5.1 compatibility:
eventlog-file = "${resultdir}/${configname}-${runnumber}.elog"
output-scalar-file = "${resultdir}/${configname}-${runnumber}.sca"
output-vector-file = "${resultdir}/${configname}-${runnumber}.vec"
snapshot-file = "${resultdir}/${configname}-${runnumber}.sna"


%contains: result.txt
ipv4-1: in[0]
ipv6-2: in[1]
ipv4-3: in[2]
ipv6-4: in[3]
ipv4-5: in[4]
ipv4-6: in[5]
ipv4-7: in[13]
ipv4-8: in[6]
ipv6-9: in[6]
ipv4-10: in[7]
ipv6-11: in[8]
ipv4-12: in[9]
ipv6-13: in[10]
ipv4-14: in[11]
ipv6-15: in[11]
ipv4-16: in[12]
ipv6-17: in[12]
ipv4-18: defaultIn[0]
%#--------------------------------------------------------------------------------------------------------------
%not-contains: stdout
undisposed object:
%not-contains: stdout
-- check module destructor
%#--------------------------------------------------------------------------------------------------------------
