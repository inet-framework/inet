%description:

Check module interface lookup of EthernetLayer module.

%file: TestNetwork.ned

import inet.common.MessageDispatcher;
import inet.queueing.sink.PassivePacketSink;
import inet.networklayer.common.InterfaceTable;
import inet.linklayer.ethernet.modular.EthernetLayer;

network TestNetwork
{
    parameters:
        *.interfaceTableModule = absPath(".interfaceTable");
        @networkNode;
    submodules:
        interfaceTable: InterfaceTable;
        messageDispatcher: MessageDispatcher;
        ethernet: EthernetLayer;
        upperSink: PassivePacketSink;
        lowerSink: PassivePacketSink;
        test: Test;
    connections:
        messageDispatcher.out++ --> ethernet.upperLayerIn;
        messageDispatcher.out++ --> ethernet.lowerLayerIn;
        ethernet.upperLayerOut --> upperSink.in;
        ethernet.lowerLayerOut --> lowerSink.in;
}

%inifile: omnetpp.ini

[General]
network = TestNetwork
ned-path = .;../../../../src
sim-time-limit = 0s

cmdenv-log-prefix = "%>"

%includes
#include "inet/common/IModuleInterfaceLookup.h"
#include "inet/common/ProtocolTag_m.h"
#include "inet/queueing/contract/IPassivePacketSink.h"

%activity:
using namespace inet;
using namespace inet::queueing;

#define CHECK(gate, argument) { std::cerr << "gate = " << #gate << ", " << printToStringIfPossible(argument, 0) << " --> " << (findModuleInterface(gate, typeid(IPassivePacketSink), &argument) != nullptr ? "found" : "not found") << std::endl; }

auto messageDispatcher = cSimulation::getActiveSimulation()->getSystemModule()->getModuleByPath("messageDispatcher");
auto upperLayerIn = messageDispatcher->gate("out", 0);
auto lowerLayerIn = messageDispatcher->gate("out", 1);

DispatchProtocolReq dispatchProtocolReq;
dispatchProtocolReq.setProtocol(&Protocol::ethernetMac);

PacketProtocolTag packetProtocolTag;
packetProtocolTag.setProtocol(&Protocol::ethernetMac);

PacketServiceTag packetServiceTag;
packetServiceTag.setProtocol(&Protocol::ethernetMac);

dispatchProtocolReq.setServicePrimitive(SP_REQUEST);
CHECK(upperLayerIn, dispatchProtocolReq);
CHECK(lowerLayerIn, dispatchProtocolReq);

dispatchProtocolReq.setServicePrimitive(SP_INDICATION);
CHECK(upperLayerIn, dispatchProtocolReq);
CHECK(lowerLayerIn, dispatchProtocolReq);

CHECK(upperLayerIn, packetServiceTag);
CHECK(upperLayerIn, packetProtocolTag);

CHECK(lowerLayerIn, packetProtocolTag);
CHECK(lowerLayerIn, packetServiceTag);

%contains: stderr
gate = upperLayerIn, DispatchProtocolReq, protocol = ethernetmac(12), servicePrimitive = 1 (SP_REQUEST) --> found
gate = lowerLayerIn, DispatchProtocolReq, protocol = ethernetmac(12), servicePrimitive = 1 (SP_REQUEST) --> not found
gate = upperLayerIn, DispatchProtocolReq, protocol = ethernetmac(12), servicePrimitive = 2 (SP_INDICATION) --> not found
gate = lowerLayerIn, DispatchProtocolReq, protocol = ethernetmac(12), servicePrimitive = 2 (SP_INDICATION) --> found
gate = upperLayerIn, PacketServiceTag, protocol = ethernetmac(12) --> found
gate = upperLayerIn, PacketProtocolTag, protocol = ethernetmac(12), frontOffset = 0 B, backOffset = 0 B --> not found
gate = lowerLayerIn, PacketProtocolTag, protocol = ethernetmac(12), frontOffset = 0 B, backOffset = 0 B --> found
gate = lowerLayerIn, PacketServiceTag, protocol = ethernetmac(12) --> not found

%#--------------------------------------------------------------------------------------------------------------
%postrun-command: grep "undisposed object:" test.out > test_undisposed.out || true
%not-contains: test_undisposed.out
undisposed object: (
%#--------------------------------------------------------------------------------------------------------------
