%description:
TCP SACK test
 Examples from [RFC2018]:
   "Assume the left window edge is 5000 and that the data transmitter
   sends a burst of 8 segments, each containing 500 data bytes." [RFC2018]

      "Case 3:  The 2nd, 4th, 6th, and 8th (last) segments are
      dropped.

      The data receiver ACKs the first packet normally.  The
      third, fifth, and seventh packets trigger SACK options as
      follows:

          Triggering  ACK    First Block   2nd Block     3rd Block
          Segment            Left   Right  Left   Right  Left   Right
                             Edge   Edge   Edge   Edge   Edge   Edge

          5000       5500
          5500       (lost)
          6000       5500    6000   6500
          6500       (lost)
          7000       5500    7000   7500   6000   6500
          7500       (lost)
          8000       5500    8000   8500   7000   7500   6000   6500
          8500       (lost)" [RFC2018]

%inifile: {}.ini
[General]
#preload-ned-files = *.ned ../../*.ned @../../../../nedfiles.lst
ned-path = .;../../../../src;../../lib

#omnetpp 5.0 - 5.1 compatibility:
eventlog-file = "${resultdir}/${configname}-${runnumber}.elog"
output-scalar-file = "${resultdir}/${configname}-${runnumber}.sca"
output-vector-file = "${resultdir}/${configname}-${runnumber}.vec"
snapshot-file = "${resultdir}/${configname}-${runnumber}.sna"

network = TcpTestNet1

#[Cmdenv]
cmdenv-event-banners=false
cmdenv-express-mode=false
cmdenv-log-prefix="[%c]: "

#[Parameters]
*.testing=false

# for scriptabletester
*.tcptester.script="A10 delete; A12 delete; A14 delete; A16 delete"  # The 2nd, 4th, 6th, and 8th (last) segments are dropped.

# client test apps
*.cli_app.active = true
*.cli_app.localAddress="10.0.0.1"
*.cli_app.localPort=1000
*.cli_app.connectAddress="10.0.0.2"
*.cli_app.connectPort=2000
*.cli_app.active=true
*.cli_app.tOpen=0s
*.cli_app.tSend=0s
*.cli_app.sendBytes = 7500B
*.cli_app.sendScript=""
*.cli_app.tClose=-1s

# server test apps
*.srv_app.active=false
*.srv_app.localAddress="10.0.0.2"
*.srv_app.localPort=2000
*.srv_app.connectAddress="10.0.0.1"
*.srv_app.connectPort=1000
*.srv_app.tOpen=0s
*.srv_app.tSend=-1s
*.srv_app.sendBytes=0B
*.srv_app.sendScript=""
*.srv_app.tClose=-1s

# tcp settings
*.*_tcp.advertisedWindow = 5000                       # in bytes, corresponds with the maximal receiver buffer capacity (Note: normally, NIC queues should be at least this size)
*.*_tcp.delayedAcksEnabled = false                    # delayed ACK algorithm (RFC 1122) enabled/disabled
*.*_tcp.nagleEnabled = true                           # Nagle's algorithm (RFC 896) enabled/disabled
*.*_tcp.limitedTransmitEnabled = false                # Limited Transmit algorithm (RFC 3042) enabled/disabled (can be used for TcpReno/TcpTahoe/TcpNewReno/TcpNoCongestionControl)
*.*_tcp.increasedIWEnabled = false                    # Increased Initial Window (RFC 3390) enabled/disabled
*.*_tcp.sackSupport = true                            # Selective Acknowledgment (RFC 2018, 2883, 3517) support (header option) (SACK will be enabled for a connection if both endpoints support it)
*.*_tcp.windowScalingSupport = false                  # Window Scale (RFC 1323) support (header option) (WS will be enabled for a connection if both endpoints support it)
*.*_tcp.timestampSupport = false                      # Timestamps (RFC 1323) support (header option) (TS will be enabled for a connection if both endpoints support it)
*.*_tcp.mss = 500                                     # Maximum Segment Size (RFC 793) (header option)
*.*_tcp.tcpAlgorithmClass = "TcpReno"                 # TcpReno/TcpTahoe/TcpNewReno/TcpNoCongestionControl/DumbTcp
*.*_tcp.recordStats = true                            # recording of seqNum etc. into output vectors enabled/disabled

%#--------------------------------------------------------------------------------------------------------------
%file: postrun.pl
open FILE, '<test.out';
while($sor = <FILE>)
{
    if ($sor =~ /^\[testing\]: (.*)$/)
    {
        print "$1\n";
    }
}
%#--------------------------------------------------------------------------------------------------------------
%postrun-command:  perl ./postrun.pl
%#--------------------------------------------------------------------------------------------------------------
%# the first 8 lines is the precondition - if false, then check is invalid
%contains: postrun-command(1).out
[0.017 A009] A.1000 > B.2000: A 3501:4001(500) ack 501 win 5000
[0.017 A010] A.1000 > B.2000: A 4001:4501(500) ack 501 win 5000 # deleting
[0.017 A011] A.1000 > B.2000: A 4501:5001(500) ack 501 win 5000
[0.017 A012] A.1000 > B.2000: A 5001:5501(500) ack 501 win 5000 # deleting
[0.017 A013] A.1000 > B.2000: A 5501:6001(500) ack 501 win 5000
[0.017 A014] A.1000 > B.2000: A 6001:6501(500) ack 501 win 5000 # deleting
[0.017 A015] A.1000 > B.2000: A 6501:7001(500) ack 501 win 5000
[0.017 A016] A.1000 > B.2000: A 7001:7501(500) ack 501 win 5000 # deleting
[0.019 B009] A.1000 < B.2000: A ack 4001 win 5000
[0.019 B010] A.1000 < B.2000: A ack 4001 win 5000   Option(s): NOP NOP SACK[4501,5001)
[0.019 B011] A.1000 < B.2000: A ack 4001 win 5000   Option(s): NOP NOP SACK[5501,6001)[4501,5001)
[0.019 B012] A.1000 < B.2000: A ack 4001 win 5000   Option(s): NOP NOP SACK[6501,7001)[5501,6001)[4501,5001)
[0.021 A017] A.1000 > B.2000: A 4001:4501(500) ack 501 win 5000
[0.021 A018] A.1000 > B.2000: A 5001:5501(500) ack 501 win 5000
[0.021 A019] A.1000 > B.2000: A 6001:6501(500) ack 501 win 5000
[0.023 B013] A.1000 < B.2000: A ack 5001 win 4000   Option(s): NOP NOP SACK[4001,4501)[6501,7001)[5501,6001)
[0.023 B014] A.1000 < B.2000: A ack 6001 win 4500   Option(s): NOP NOP SACK[5001,5501)[6501,7001)
[0.023 B015] A.1000 < B.2000: A ack 7001 win 5000
[1.791 A020] A.1000 > B.2000: A 7001:7501(500) ack 501 win 5000
[1.793 B016] A.1000 < B.2000: A ack 7501 win 5000

%#--------------------------------------------------------------------------------------------------------------
%contains: stdout
[1.794] tcpdump finished, A:20 B:16 segments

%#--------------------------------------------------------------------------------------------------------------
%not-contains: stdout
undisposed object:
%#--------------------------------------------------------------------------------------------------------------
%not-contains: stdout
-- check module destructor
%#--------------------------------------------------------------------------------------------------------------
