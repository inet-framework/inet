%description:

Checks module interface lookup for layered Ethernet network interface module.

%file: TestNetwork.ned

import inet.common.MessageDispatcher;
import inet.linklayer.ethernet.modular.LayeredEthernetInterface;
import inet.networklayer.common.InterfaceTable;

network TestNetwork
{
    parameters:
        *.interfaceTableModule = absPath(".interfaceTable");
        ethernetInterface*.bitrate = 100Mbps;
        @networkNode;
    submodules:
        messageDispatcher: MessageDispatcher;
        interfaceTable: InterfaceTable;
        ethernetInterface: LayeredEthernetInterface;
        test: Test;
    connections allowunconnected:
        ethernetInterface.upperLayerOut --> messageDispatcher.in++;
        ethernetInterface.upperLayerIn <-- messageDispatcher.out++;
}

%inifile: omnetpp.ini

[General]
network = TestNetwork
ned-path = .;../../../../src
sim-time-limit = 0s

cmdenv-log-prefix = "%>"

%includes
#include "inet/common/IModuleInterfaceLookup.h"
#include "inet/common/ProtocolTag_m.h"
#include "inet/common/packet/Packet.h"
#include "inet/linklayer/common/InterfaceTag_m.h"
#include "inet/queueing/contract/IPassivePacketSink.h"

%activity:
using namespace inet;
using namespace inet::queueing;

#define CHECK(gate, argument) { std::cerr << printToStringIfPossible(argument, 0) << " --> " << (findModuleInterface(gate, typeid(IPassivePacketSink), &argument) != nullptr ? "found" : "not found") << std::endl; }

auto messageDispatcher = cSimulation::getActiveSimulation()->getSystemModule()->getModuleByPath("messageDispatcher");
auto ethernetInterface = messageDispatcher->gate("out", 0);

InterfaceReq interfaceReq;
interfaceReq.setInterfaceId(100);
CHECK(ethernetInterface, interfaceReq);

PacketProtocolTag packetProtocolTag;
packetProtocolTag.setProtocol(&Protocol::ethernetMac);
CHECK(ethernetInterface, packetProtocolTag);

DispatchProtocolReq dispatchProtocolReq;
dispatchProtocolReq.setServicePrimitive(SP_REQUEST);

dispatchProtocolReq.setProtocol(&Protocol::ethernetMac);
CHECK(ethernetInterface, dispatchProtocolReq);

dispatchProtocolReq.setProtocol(&Protocol::ppp);
CHECK(ethernetInterface, dispatchProtocolReq);

dispatchProtocolReq.setProtocol(&Protocol::ipv4);
CHECK(ethernetInterface, dispatchProtocolReq);

dispatchProtocolReq.setServicePrimitive(SP_INDICATION);

dispatchProtocolReq.setProtocol(&Protocol::ethernetMac);
CHECK(ethernetInterface, dispatchProtocolReq);

%contains: stderr
InterfaceReq, interfaceId = 100 --> found
PacketProtocolTag, protocol = ethernetmac(12), frontOffset = 0 B, backOffset = 0 B --> found
DispatchProtocolReq, protocol = ethernetmac(12), servicePrimitive = 1 (SP_REQUEST) --> not found
DispatchProtocolReq, protocol = ppp(52), servicePrimitive = 1 (SP_REQUEST) --> not found
DispatchProtocolReq, protocol = ipv4(38), servicePrimitive = 1 (SP_REQUEST) --> not found
DispatchProtocolReq, protocol = ethernetmac(12), servicePrimitive = 2 (SP_INDICATION) --> not found

%#--------------------------------------------------------------------------------------------------------------
%postrun-command: grep "undisposed object:" test.out > test_undisposed.out || true
%not-contains: test_undisposed.out
undisposed object: (
%#--------------------------------------------------------------------------------------------------------------
