%description:
Test serializing frames

%inifile: omnetpp.ini
[General]
#debugger-attach-on-startup=true
#debugger-attach-on-error=true

%includes:
#include <stdio.h>
#include <iostream>
#include "inet/common/serializer/SerializerBase.h"
#include "inet/common/serializer/headerserializers/ethernet/EthernetSerializer.h"
#include "inet/common/serializer/headerserializers/ieee80211/Ieee80211Serializer.h"

%global:

#define PCAP_MAGIC      0xa1b2c3d4

/* "libpcap" file header (minus magic number). */
struct pcap_hdr
{
    uint32 magic;    /* magic */
    uint16 version_major;    /* major version number */
    uint16 version_minor;    /* minor version number */
    uint32 thiszone;    /* GMT to local correction */
    uint32 sigfigs;    /* accuracy of timestamps */
    uint32 snaplen;    /* max length of captured packets, in octets */
    uint32 network;    /* data link type */
};

/* "libpcap" record header. */
struct pcaprec_hdr
{
    int32 ts_sec;    /* timestamp seconds */
    uint32 ts_usec;    /* timestamp microseconds */
    uint32 incl_len;    /* number of octets of packet saved in file */
    uint32 orig_len;    /* actual length of packet */
};


uint16_t swapByteOrder16(uint16_t v)
{
    return ((v & 0xFF) << 8) | ((v & 0xFF00) >> 8);
}

uint32_t swapByteOrder32(uint32_t v)
{
    return ((v & 0xFF) << 24) | ((v & 0xFF00) << 8) | ((v & 0xFF0000) >> 8) | ((v & 0xFF000000) >> 24);
}

using namespace inet::serializer;

static void printobject(cObject* object)
{
    EV << object->getClassName() << ":" << endl;
    cClassDescriptor *descriptor = object->getDescriptor();
    for (int i = 0; i < descriptor->getFieldCount(object); i++) {
        EV << "    " << descriptor->getFieldName(object, i) << ": ";
        if (descriptor->getFieldIsArray(object, i)) {
            for (int j = 0; j < descriptor->getArraySize(object, i); j++) {
                EV << "      [" << j << "]: " << descriptor->getFieldAsString(object,i,j) << endl;
            }
        }
        else
            EV << descriptor->getFieldAsString(object,i,0) << endl;
    }
}

static void testRecord(const char* filename, bool fcs = true)
{
    FILE *pcapFile;
    struct pcap_hdr fileHeader;
    struct pcaprec_hdr recordHeader;
    static uint8 readBuf[60000];
    static uint8 writeBuf[60000];

    memset((void*)&readBuf, 0, sizeof(readBuf));
    memset((void*)&writeBuf, 0, sizeof(writeBuf));

    EV << "=== Testing file " << filename << endl;

    pcapFile  = fopen(filename, "rb");
    if (!pcapFile)
        throw cRuntimeError("pcap file '%s' can not opened.", filename);

    size_t err = fread(&fileHeader, sizeof(fileHeader), 1, pcapFile);
    if (err != 1)
        throw cRuntimeError("Can not read pcap fileheader from file '%s', errno is %ld.", filename, err);

    if (fileHeader.magic == 0xa1b2c3d4)
    {
    }
    else if (fileHeader.magic == 0xd4c3b2a1)
    {
        fileHeader.version_major = swapByteOrder16(fileHeader.version_major);
        fileHeader.version_minor = swapByteOrder16(fileHeader.version_minor);
        fileHeader.thiszone = swapByteOrder32(fileHeader.thiszone);
        fileHeader.sigfigs = swapByteOrder32(fileHeader.sigfigs);
        fileHeader.snaplen = swapByteOrder32(fileHeader.snaplen);
        fileHeader.network = swapByteOrder32(fileHeader.network);
    }
    else
        throw cRuntimeError("unknown pcap fileheader from file '%s'", filename);

    err = fread(&recordHeader, sizeof(recordHeader), 1, pcapFile);
    if (err != 1)
        throw cRuntimeError("Can not read pcap recordheader from file '%s', errno is %ld.", filename, err);
    if (fileHeader.magic != 0xa1b2c3d4)
    {
        recordHeader.ts_sec = swapByteOrder32(recordHeader.ts_sec);
        recordHeader.ts_usec = swapByteOrder32(recordHeader.ts_usec);
        recordHeader.orig_len = swapByteOrder32(recordHeader.orig_len);
        recordHeader.incl_len = swapByteOrder32(recordHeader.incl_len);
    }
    fread(&readBuf, recordHeader.incl_len, 1, pcapFile);
    fclose(pcapFile);

    uint32 serializedLength = 0;

    Buffer rb(readBuf, recordHeader.incl_len);
    Buffer wb(writeBuf, sizeof(writeBuf));
    Context c;
    cPacket *frame = SerializerBase::parse(rb, c, LINKTYPE, fileHeader.network, 0);
    for (cPacket *temp = frame; temp; temp = temp->getEncapsulatedPacket())
        printobject(temp);
    SerializerBase::serialize(frame, wb, c, LINKTYPE, fileHeader.network, 0);
    serializedLength = wb.getPos();
    delete frame;

    if(recordHeader.incl_len == serializedLength)
        EV << "Frame lengths are the same" << endl;
    else
        EV << "Frame lengths are not the same: " << recordHeader.incl_len << " ws " << serializedLength << endl;
    if(recordHeader.incl_len == serializedLength && !memcmp(readBuf, writeBuf, fcs ? serializedLength : serializedLength - 4))
        EV << "Frames are the same" << endl;
    else
        EV << "Frames are not the same" << endl;
}

%activity:
testRecord("../../pcap/rarp_request.pcap", false);
testRecord("../../pcap/rarp_req_reply.pcap", false);
//testRecord("../../pcap/v6.pcap", false);
testRecord("../../pcap/tcp_ok_capture.pcap", false);
//testRecord("../../pcap/80211ack.pcap", false);

%contains-regex: stdout
=== Testing file ../../pcap/rarp_request.pcap
.*
Frames are the same
=== Testing file ../../pcap/rarp_req_reply.pcap
.*
Frames are the same

%not-contains: stdout
Frames are not the same
