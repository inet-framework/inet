%description:
Test serializing frames

%inifile: omnetpp.ini
[General]
#debugger-attach-on-startup=true
#debugger-attach-on-error=true

%includes:
#include <stdio.h>
#include <iostream>
#include "inet/common/Protocol.h"
#include "inet/common/ProtocolGroup.h"
#include "inet/common/packet/Packet.h"
#include "inet/common/packet/chunk/BytesChunk.h"
#include "inet/common/checksum/EthernetCRC.h"
#include "inet/linklayer/ethernet/EtherFrame_m.h"
#include "inet/linklayer/ethernet/Ethernet.h"
#include "inet/linklayer/ieee8022/Ieee8022Llc.h"
#include "inet/networklayer/arp/ipv4/ArpPacket_m.h"
#include "inet/networklayer/icmpv6/Icmpv6Header_m.h"
#include "inet/networklayer/ipv4/IcmpHeader_m.h"
#include "inet/networklayer/ipv4/Ipv4Header_m.h"
#include "inet/networklayer/ipv6/Ipv6Header.h"
#include "inet/transportlayer/tcp_common/TcpHeader.h"
#include "inet/transportlayer/udp/UdpHeader_m.h"

%global:

using namespace inet;


#define PCAP_MAGIC      0xa1b2c3d4

enum {  // from libpcap
    LINKTYPE_ETHERNET = 1,
    LINKTYPE_IEEE802_11 = 105
};

/* "libpcap" file header (minus magic number). */
struct pcap_hdr
{
    uint32_t magic;    /* magic */
    uint16_t version_major;    /* major version number */
    uint16_t version_minor;    /* minor version number */
    uint32_t thiszone;    /* GMT to local correction */
    uint32_t sigfigs;    /* accuracy of timestamps */
    uint32_t snaplen;    /* max length of captured packets, in octets */
    uint32_t network;    /* data link type */
};

/* "libpcap" record header. */
struct pcaprec_hdr
{
    int32_t ts_sec;    /* timestamp seconds */
    uint32_t ts_usec;    /* timestamp microseconds */
    uint32_t incl_len;    /* number of octets of packet saved in file */
    uint32_t orig_len;    /* actual length of packet */
};


uint16_t swapByteOrder16(uint16_t v)
{
    return ((v & 0xFF) << 8) | ((v & 0xFF00) >> 8);
}

uint32_t swapByteOrder32(uint32_t v)
{
    return ((v & 0xFFL) << 24) | ((v & 0xFF00L) << 8) | ((v & 0xFF0000L) >> 8) | ((v & 0xFF000000L) >> 24);
}

#if OMNETPP_VERSION < 0x0500
//cClassDescriptor compatibility
#define getFieldValueAsString(a, b, c)         getFieldAsString((a), (b), (c))
#define getFieldProperty(a, b)                 getFieldProperty(nullptr, (a), (b))
#define getFieldName(a)                        getFieldName(nullptr, (a))
#define getFieldIsCObject(a)                   getFieldIsCObject(nullptr, (a))
#define getFieldCount()                        getFieldCount(nullptr)
#define getFieldTypeString(a)                  getFieldTypeString(nullptr, (a))
#define getFieldIsArray(a)                     getFieldIsArray(nullptr, (a))
#define getFieldArraySize(a, b)                getArraySize((a), (b))
#define getFieldStructValuePointer(a, b, c)    getFieldStructPointer((a), (b), (c))
#define getFieldTypeFlags(a)                   getFieldTypeFlags(nullptr, (a))
#define getFieldStructName(a)                  getFieldStructName(nullptr, (a))
#endif    // OMNETPP_VERSION < 0x0500

static void printobject(cObject* object)
{
    EV << object->getClassName() << ":" << endl;
    cClassDescriptor *descriptor = object->getDescriptor();
    for (int i = 0; i < descriptor->getFieldCount(); i++) {
        EV << "    " << descriptor->getFieldName(i) << ": ";
        if (descriptor->getFieldIsArray(i)) {
            for (int j = 0; j < descriptor->getFieldArraySize(object, i); j++) {
                EV << "      [" << j << "]: " << descriptor->getFieldValueAsString(object,i,j) << endl;
            }
        }
        else
            EV << descriptor->getFieldValueAsString(object,i,0) << endl;
    }
}

static bool testOneRecord(const Protocol *protocol, Packet *pk);
static Packet *deserialize(const Protocol *protocol, Packet *pk);

static bool testRecords(const char* filename, bool fcs = true)
{
    bool isGood = true;
    FILE *pcapFile;
    struct pcap_hdr fileHeader;
    struct pcaprec_hdr recordHeader;
    static uint8_t readBuf[65000];
    static uint8_t writeBuf[65000];

    memset((void*)&readBuf, 0, sizeof(readBuf));
    memset((void*)&writeBuf, 0, sizeof(writeBuf));

    EV << "=== Testing file " << filename << endl;

    pcapFile  = fopen(filename, "rb");
    if (!pcapFile)
        throw cRuntimeError("pcap file '%s' can not opened.", filename);

    size_t err = fread(&fileHeader, sizeof(fileHeader), 1, pcapFile);
    if (err != 1)
        throw cRuntimeError("Can not read pcap fileheader from file '%s', errno is %ld.", filename, err);

    bool needSwap = false;
    if (fileHeader.magic == 0xa1b2c3d4)
    {
    }
    else if (fileHeader.magic == 0xd4c3b2a1)
    {
        needSwap = true;
        fileHeader.version_major = swapByteOrder16(fileHeader.version_major);
        fileHeader.version_minor = swapByteOrder16(fileHeader.version_minor);
        fileHeader.thiszone = swapByteOrder32(fileHeader.thiszone);
        fileHeader.sigfigs = swapByteOrder32(fileHeader.sigfigs);
        fileHeader.snaplen = swapByteOrder32(fileHeader.snaplen);
        fileHeader.network = swapByteOrder32(fileHeader.network);
    }
    else
        throw cRuntimeError("unknown pcap fileheader from file '%s'", filename);

    for (int i=1; true; i++) {
    EV << "  === Testing frame " << i << " in file " << filename << endl;
        err = fread(&recordHeader, sizeof(recordHeader), 1, pcapFile);
        if (err != 1) {
            if (feof(pcapFile))
                break;
            throw cRuntimeError("Can not read pcap recordheader from file '%s', errno is %ld.", filename, err);
        }
        if (needSwap)
        {
            recordHeader.ts_sec = swapByteOrder32(recordHeader.ts_sec);
            recordHeader.ts_usec = swapByteOrder32(recordHeader.ts_usec);
            recordHeader.orig_len = swapByteOrder32(recordHeader.orig_len);
            recordHeader.incl_len = swapByteOrder32(recordHeader.incl_len);
        }
        err = fread(&readBuf, recordHeader.incl_len, 1, pcapFile);
        if (err != 1) {
            throw cRuntimeError("Can not read pcap record from file '%s', errno is %ld.", filename, err);
        }
        if (recordHeader.orig_len == recordHeader.incl_len) {
            const auto& bytesChunk = makeShared<BytesChunk>(readBuf, recordHeader.incl_len);
            Packet *pk = new Packet("pcap");
            pk->insertAtFront(bytesChunk);
            if (! fcs && fileHeader.network == LINKTYPE_ETHERNET) {
                // add FCS
                const auto& fcsChunk = makeShared<EthernetFcs>();
                uint32_t fcs = ethernetCRC(readBuf, recordHeader.incl_len);
                fcsChunk->setFcs(fcs);
                fcsChunk->setFcsMode(FCS_COMPUTED);
                pk->insertAtBack(fcsChunk);
            }
            const Protocol *protocol = nullptr;
            if (fileHeader.network == LINKTYPE_ETHERNET)
                protocol = &Protocol::ethernetMac;
//            else if (fileHeader.network == XYZ)
//                protocol = &Protocol::XYZ;
            else
                EV << "Unknown pcap protocol " << fileHeader.network << "\n";
            bool isGoodOne = testOneRecord(protocol, pk);
            isGood = isGood && isGoodOne;
            delete pk;
        }
        else {
            EV << "Skipped the truncated record: only first " << recordHeader.incl_len << " bytes stored instead of " << recordHeader.orig_len << " bytes\n";
        }
    }
    fclose(pcapFile);
    if (isGood)
        EV << "All frames are the same in file " << filename << "\n";
    else
        EV << "Some frames are differ in file " << filename << "\n";
    return isGood;
}

static bool testOneRecord(const Protocol *protocol, Packet *pk)
{
    bool retval = true;
    Packet *pk2 = pk->dup();
    Packet *rPk = deserialize(protocol, pk2);

    if (pk->getDataLength() == rPk->getDataLength()) {
        EV << "Frame lengths are the same" << endl;
        bool diff = false;
        auto bytes1 = pk->peekDataAsBytes();
        auto bytes2 = rPk->peekDataAsBytes();
        unsigned int i;
        for (i=0; i < pk->getByteLength(); ++i) {
            if (bytes1->getByte(i) != bytes2->getByte(i)) {
                diff = true;
                break;
            }
        }
        if (diff) {
            EV << "Packet and deserialized packet are differ at position " << i << ":\n" << bytes1->str() << "\n" << bytes2->str() << "\n";
            retval = false;
        }
        else {
            EV << "Frames are the same" << endl;
            EV << rPk << "\n";
        }
    }
    else {
        EV << "Packet and deserialized packet length are differ: " << pk->getDataLength() << " vs " << rPk->getDataLength() << "\n";
        retval = false;
    }
    delete  rPk;
    delete pk2;

    return retval;
}

static Packet *deserialize(const Protocol *protocol, Packet *pk)
{
    Packet *outPk = nullptr;

    if (protocol == nullptr) {
        outPk = new Packet("inet");
        if (pk->getDataLength() > b(0)) {
            const auto& chunk = pk->popAtFront(pk->getDataLength());
            outPk->insertAtBack(chunk);
        }
    }
    else if (*protocol == Protocol::ethernetMac) {
        const auto& header = pk->popAtFront<EthernetMacHeader>();
        Ptr<const Ieee8022LlcHeader> llcHeader;
        const auto& fcs = pk->popAtBack<EthernetFcs>(B(ETHER_FCS_BYTES));
        protocol = nullptr;
        int etherType = -1;
        if (isEth2Header(*header)) {
            etherType = header->getTypeOrLength();
        }
        else if (isIeee8023Header(*header)) {
            llcHeader = pk->popAtFront<Ieee8022LlcHeader>();
            if (llcHeader->getSsap() == 0xAA && llcHeader->getDsap() == 0xAA && llcHeader->getControl() == 0x03) {
                const auto& snapHeader = dynamicPtrCast<const Ieee8022LlcSnapHeader>(llcHeader);
                if (snapHeader == nullptr)
                    throw cRuntimeError("LLC header indicates SNAP header, but SNAP header is missing");
                if (snapHeader->getOui() == 0)
                    etherType = snapHeader->getProtocolId();
            }
        }
        if (etherType != -1) {
            protocol = ProtocolGroup::ethertype.findProtocol(etherType);
        }
        outPk = deserialize(protocol, pk);
        if (llcHeader)
            outPk->insertAtFront(llcHeader);
        outPk->insertAtFront(header);
        outPk->insertAtBack(fcs);
    }
    else if (*protocol == Protocol::ipv4) {
        const auto& header = pk->popAtFront<Ipv4Header>();
        b trailerLength = header->getChunkLength() + pk->getDataLength() - B(header->getTotalLengthField());
        Ptr<const Chunk> trailer = nullptr;
        if (trailerLength > b(0))
            trailer = pk->popAtBack(trailerLength);
        protocol = ProtocolGroup::ipprotocol.findProtocol(header->getProtocolId());
        outPk = deserialize(protocol, pk);
        outPk->insertAtFront(header);
        if (trailer != nullptr)
            outPk->insertAtBack(trailer);
    }
    else if (*protocol == Protocol::ipv6) {
        const auto& header = pk->popAtFront<Ipv6Header>();
        protocol = ProtocolGroup::ipprotocol.findProtocol(header->getProtocolId());
        outPk = deserialize(protocol, pk);
        outPk->insertAtFront(header);
    }
    else if (*protocol == Protocol::tcp) {
        const auto& header = pk->popAtFront<tcp::TcpHeader>();
        protocol = nullptr;
        outPk = deserialize(protocol, pk);
        outPk->insertAtFront(header);
    }
    else if (*protocol == Protocol::udp) {
        const auto& header = pk->popAtFront<UdpHeader>();
        protocol = nullptr;
        outPk = deserialize(protocol, pk);
        outPk->insertAtFront(header);
    }
    else if (*protocol == Protocol::arp) {
        const auto& header = pk->popAtFront<ArpPacket>();
        protocol = nullptr;
        outPk = deserialize(protocol, pk);
        outPk->insertAtFront(header);
    }
    else if (*protocol == Protocol::icmpv4) {
        const auto& header = pk->popAtFront<IcmpHeader>();
        protocol = nullptr;
        outPk = deserialize(protocol, pk);
        outPk->insertAtFront(header);
    }
    else if (*protocol == Protocol::icmpv6) {
        const auto& header = pk->popAtFront<Icmpv6Header>(b(-1), Chunk::PF_ALLOW_IMPROPERLY_REPRESENTED);
        protocol = nullptr;
        outPk = deserialize(protocol, pk);
        outPk->insertAtFront(header);
    }
//    else if (*protocol == Protocol::) {
//    }
    else {
        const auto& chunk = pk->popAtFront(pk->getDataLength());
        outPk = new Packet("inet");
        outPk->insertAtBack(chunk);
    }
    return outPk;
}

%activity:
testRecords("../../pcap/rarp_request.pcap", false);
testRecords("../../pcap/rarp_req_reply.pcap", false);
testRecords("../../pcap/Ethernet_Pause_Frame.pcap", false);
testRecords("../../pcap/eth_fcs_good.pcap", true);
testRecords("../../pcap/v6.pcap", false);
//testRecords("../../pcap/tcp_ok_capture.pcap", false);
//testRecords("../../pcap/80211ack.pcap", false);

%contains-regex: stdout
=== Testing file ../../pcap/rarp_request.pcap
.*
All frames are the same in file ../../pcap/rarp_request.pcap
=== Testing file ../../pcap/rarp_req_reply.pcap
.*
All frames are the same in file ../../pcap/rarp_req_reply.pcap
=== Testing file ../../pcap/Ethernet_Pause_Frame.pcap
.*
All frames are the same in file ../../pcap/Ethernet_Pause_Frame.pcap
=== Testing file ../../pcap/eth_fcs_good.pcap
.*
All frames are the same in file ../../pcap/eth_fcs_good.pcap
=== Testing file ../../pcap/v6.pcap
.*
All frames are the same in file ../../pcap/v6.pcap

%not-contains: stdout
Packet and deserialized packet are differ

%not-contains: stdout
Packet and deserialized packet length are differ

