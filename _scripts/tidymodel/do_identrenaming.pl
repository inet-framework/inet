#!/usr/bin/perl
#
# Execute renamings in a mapping.txt file (usually generated by suggest_identrenaming)
#
# Usage: do_identrenaming listfile mappingfile (incomments|incode|everywhere)
#

$verbose = 1;

$listfile = $ARGV[0];
$mappingfile = $ARGV[1];
$operation = $ARGV[2];

if ($operation ne "incomments" && $operation ne "incode" && $operation ne "everywhere") {
    print STDERR "usage: do_identrenaming listfile mappingfile (incomments|incode|everywhere)\n";
    exit(1);
}

# parse listfile
print "reading $listfile...\n" if ($verbose);
$listfilecontents = readfile($listfile);
$listfilecontents =~ s|^\s*(.*?)\s*$|push(@fnames,$1);""|gme;

# parse mappingfile
print "reading $mappingfile...\n" if ($verbose);
$mapping = readfile($mappingfile);
$mapping =~ s|^\s*(.*?)\s*->\s*(.*?)\s*$|$map{$1}=$2;""|gme;

# debug: print map
for $i (sort(keys(%map))) {print "$i -> $map{$i}\n";}

# do it
foreach $fname (@fnames)
{
    print "renaming in $fname...\n" if ($verbose);
    $txt = readfile($fname);
    writefile("$fname.bak", $txt);

    # tokenize comments
    $txt =~ s|(/\*.*?\*/)|$comment{++$ctr}=$1;"\@comment$ctr@"|gse;
    $txt =~ s|((\s*//.*?\n)+)|$comment{++$ctr}=$1;"\@comment$ctr@"|gse;

    # tokenize string literals (bug: does not recognize (=mishandles) backslash-")
    $txt =~ s|(".*?")|$stringliteral{++$ctr}=$1;"\@stringliteral$ctr@"|gme;

    # replace in the code
    if ($operation eq "incode" || $operation eq "everywhere") {
        for $i (keys(%map)) {
            $txt =~ s|\b$i\b|$map{$i}|gs;
        }
    }

    # replace in the extracted comments
    if ($operation eq "incomments" || $operation eq "everywhere") {
        for $k (keys(%comment)) {
            for $i (keys(%map)) {
                $comment{$k} =~ s|\b$i\b|$map{$i}|gs;
            }
        }
    }

    # restore comments
    while ($txt =~ s|\@comment([0-9]+)\@|$comment{$1}|gse) {};

    # restore string literals
    while ($txt =~ s|\@stringliteral([0-9]+)\@|$stringliteral{$1}|gse) {};

    writefile($fname, $txt);
}

print "done -- backups saved as .bak\n" if ($verbose);

sub readfile ()
{
    my $fname = shift;
    my $content;
    open FILE, "$fname" || die "cannot open $fname";
    read(FILE, $content, 1000000);
    close FILE;
    $content;
}

sub writefile ()
{
    my $fname = shift;
    my $content = shift;
    open FILE, ">$fname" || die "cannot open $fname for write";
    print FILE $content;
    close FILE;
}



