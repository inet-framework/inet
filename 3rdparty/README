Place 3rd party libraries and software here. Some components of the INET
Framework expect to find their external components here.

Supported software:

- Network Simulation Cradle (real-world TCP implementations from Linux/OpenBSD/FreeBSD/lwIP)

  Download NSC from: http://www.wand.net.nz/~stj2/nsc/

  Extract the 'nsc-0.5.3.tar.bz2' tarball in this directory and build it.

  $ tar xvfj nsc-0.5.3.tar.bz2

  If you use it on a 64-bit system, you need 'patch_for_nsc-0.5.3-amd64.txt'.
  NSC works with this patch on 32-bit systems, too.

  $ cd nsc-0.5.3
  $ patch -p 2 <../patch_for_nsc-0.5.3-amd64.txt

  Build the NSC libraries.

  $ python scons.py

  This should generate libfreebsd5.3.so, liblinux2.6.10.so, liblinux2.6.18.so,
  liblinux2.6.26.so, liblwip.so, libopenbsd3.5.so in the nsc-0.5.2 directory.
  If you use NSC on a 64-bit system, only liblinux2.6.18.so and liblinux2.6.26.so
  will be built.

  You also need to add the location of the newly built libraries to
  LD_LIBRARY_PATH so that the simulations will find it.

  $ LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/path-to-inet/3rdparty/nsc-0.5.3/lib

  To rebuild INET:

  - Start the IDE and open the INET project in Project Explorer.
  - Right-click on the INET project and choose Properties.
  - On the OMNeT++/Project Features page, enable the TCP (NSC) feature.
  - Press OK and rebuild INET.

  NOTE: Building INET from the command line will not work, because in the default
  Makefile the NSC feature is turned off. If you want to build INET from the
  command line, edit the Makefile in the root folder and change the command
  in the 'makemake' target: Replace the '-Xtransport/tcp_nsc' with
  '-DWITH_TCP_NSC'. Then:

  $ make cleanall
  $ make makefiles
  $ make

  To test if your build was correct, try the examples/inet/tcpclientserver
  example, and choose a configuration which uses NSC as the TCP implementation.
